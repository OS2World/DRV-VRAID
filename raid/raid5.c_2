/*
 * $Source$
 * $Revision$
 * $Date$
 * $Locker$
 *
 *	How to do RAID5 I/O.
 *
 *	Guidelines:
 *	- all I/O have to go through the cache
 *
 * $Log$
 * ---------------------------------------------
 * This code is Copyright Vitus Jensen 2000-2001
 */
static char const id[]="$Id$";

#include <string.h>

#define INCL_NOBASEAPI
#define INCL_INITRP_ONLY
#include "os2intf.h"

#include "vraid.h"
#include "proto.h"
#include "extern.h"
#include "cache.h"

#define MIN_STRIPE_SIZE		16		/* [sectors] */

PRIVATE USHORT NEAR _Cdecl	Raid5Worker(PVRDEVHDR const self,PVRIO const myio);
PRIVATE USHORT NEAR _Cdecl	Raid5Update(PVRDEVHDR const self,PVOID const sec);

INITMSG	szFailState[]=		"RAID5, fail state: 1 child missing";
INITMSG	szErrorState[]=		"RAID5, error state: %u child(s) missing";
INITMSG	szCreationDelayed[]=	"RAID5 creation delayed";

#if defined(DEBUG)
CONSTMSG dszBFLSEntry[]=	"\r\n[BlknoFromLargeSec] sector %lx";
CONSTMSG dszBFLSExit[]=   	"\r\n[ArrayWorker] strno %lx, stroffs %w, devidx %w";

CONSTMSG dszNotify[]=		"\r\n[Raid5Notify] io %p, myio %p, err %w";
CONSTMSG dszNotifyValid[]=	"\r\n[Raid5Notify] child %w now valid";
CONSTMSG dszNotifyUStart[]=	"\r\n[Raid5Notify] starting UpdateCfg()";
CONSTMSG dszNotifyUDefer[]=	"\r\n[Raid5Notify] deferring UpdateCfg()";
CONSTMSG dszWorker[]=		"\r\n[Raid5Worker] %p";
CONSTMSG dszWorkerRelease[]=	"\r\n[Raid5Worker] releasing VRIOs";
CONSTMSG dszWorkerBusy[]=	"\r\n[Raid5Worker] child busy, queuing VRIO";
CONSTMSG dszCreate[]=		"\r\n[Raid5Create] at %p";
CONSTMSG dstAdminData[]=	"\r\n[Raid5Create] admin data\r\n%z";
CONSTMSG dszStr[]=		"\r\n%s";
CONSTMSG dszNoBuild[]=		"\r\n[Raid5Create] sector says BUILD, all childs valid -> clear BUILD";
#endif






/*
 * Our object: the RAID5 array.
 */
typedef struct _VRDRAID5 {
    VRDEVHDR	header;				/* ALWAYS FIRST! */

    USHORT	readchild;			/* AREAD from this child */
    BOOL	need_updatecfg;
    USHORT	stripesize;			/* [sectors] */

    USHORT	children;			/* entries in table below */
    struct {
	PVRDEVHDR	vrd;
	ULONG		valid;			/* 0 - vrd->size	needs update
						   0xFFFFFFFF		valid */
	struct {
	    int		missing : 1;
	};
    } child[];

} VRDRAID5, FAR * PVRDRAID5;






/* **********************************************************************
 * **** Stripe Caching **************************************************
 * ******************************************************************* */

typedef struct _BUFFER {
    PVOID	data;
    UCHAR	state;
} BUFFER, FAR * PBUFFER;

#define BUFSTATE_INVALID	0
#define BUFSTATE_VALID		1
#define BUFSTATE_INVALID	0
#define BUFSTATE_INVALID	0


typedef struct {
    PVRDRAID5	array;
    PBUFFER	cache[MAX_PDEV];
    PBUFFER	read[MAX_PDEV];
    PBUFFER	write[MAX_PDEV];
    ULONG	blkno;				/* on child, not array */

    UCHAR	state;
} STRIPE_HEADER, FAR * PSTRIPE_HEADER;



PRIVATE PSTRIPE_HEADER
AllocateStrHdr(PVRDRAID5 const array, ULONG blkno)
{
    return NULL;
}
PRIVATE PSTRIPE_HEADER
FreeStrHdr(PSTRIPE_HEADER const strhdr)
{
    return NULL;
}






/* **********************************************************************
 * **** Private Routines ************************************************
 * ******************************************************************* */

static USHORT NEAR
Vrd2Child(PVRDRAID5 const array, PVRDEVHDR const child)
{
    USHORT	i;

    for( i = 0; i < array->children; ++i )
    {
	if( child == array->child[i].vrd )
	    return i;
    }
    return (USHORT)-1;
}




/*# ----------------------------------------------------------------------
 * NextValidChild(array, previous)
 *
 * PARAMETER
 *	array		a VRD which forms a RAID 5 device
 *	previous	the previously used child
 *
 * RETURNS
 *	child index or (USHORT)-1
 *
 * DESCRIPTION
 *	Selects another valid child.
 *
 * REMARKS
 */
static USHORT
NextValidChild(PVRDRAID5 const array, USHORT const previous)
{
    USHORT	next = previous;
    USHORT	tries = array->children;
    BOOL	found = FALSE;

    do
    {
	next = (next + 1 == array->children ? 0 : next + 1);
	if( array->child[next].vrd != NULL
	    &&  !array->child[next].missing
	    &&  array->child[next].valid == (ULONG)-1 )
	{
	    found = TRUE;
	    break;
	}
    }
    while( tries-- );
    if( !found )
    {
	array->header.flags &= ~RDFLAG_STATEMASK;
	array->header.flags |= RDFLAG_ERROR;	/* ERROR state */
	array->need_updatecfg = TRUE;
	return (USHORT)-1;
    }
    return next;
}




/*# ----------------------------------------------------------------------
 * BlknoFromLargeSec(array, largesec, datachild, xorchild, remaining_blks)
 *
 * PARAMETER
 *	array		IN	array information
 *	largesec	IN	sector no in array
 *	datachild	OUT	child no to read data stripe from
 *	xorchild	OUT	child no  to read XOR stripe from
 *	remaining_blks	OUT	remaining sectors in stripe
 *
 * RETURNS
 *	sector in data resp. XOR stripe
 *
 * DESCRIPTION
 * 	Calculates disks where the data and the XOR information are
 *	stored.  Both are stored starting at the returned sector no.
 *	And there are '*remaining_blks' sectors in the same data/xor
 *	combination behind the requested one.
 *
 * REMARKS
 *	Currently implements RAID 4!!!
 */
PRIVATE ULONG
BlknoFromLargeSec(VRDRAID5 const FAR * array, ULONG largesec,
		  PUSHORT datachild, PUSHORT xorchild,
		  PULONG remaining_blks)
{
    ULONG	strno;
    USHORT	devidx, stroffs;


    DEBMSG1(DBG_LEVEL3,dszBFLSEntry,(PVOID)&largesec);

    /* Calculate child, offset and count for this block. */

    /* Which band? */

    strno = largesec / (array->stripesize * (array->children - 1));

    /* Wich device? */

    devidx = (USHORT)((largesec / array->stripesize) % (array->children - 1));

    /* Offset in band? */

    stroffs = (USHORT)(largesec % array->stripesize);

    /* How many blks in that band behind the requested? */

    *remaining_blks = array->stripesize - stroffs;

    *datachild = devidx;
    *xorchild = array->children-1;		/* there is only one */

    DEBMSG3(DBG_LEVEL3,dszBFLSExit,(PVOID)&strno,stroffs,devidx);

    return (strno * array->stripesize) + stroffs;
}




/*# ----------------------------------------------------------------------
 * <fkt>
 *
 * PARAMETER
 * RETURNS
 * DESCRIPTION
 *	Look at all
 * REMARKS
 */
PRIVATE void
ProcessStripe(PSTRIPE_HEADER const strhdr)
{
    int		i;
    USHORT	rc;

    for( i = 0; i < MAX_PDEV; ++i )
    {
	USHORT	iocmd = (USHORT)-1;
	PVRIO	io;

	if( strhdr->read[i] != NULL )
	{
	    if( strhdr->read[i]->state == BUFSTATE_VALID )
	    {
		/* Just call the notification. */

		/*xxx*/

		continue;
	    }
	    iocmd = IOCMD_READ;
	}
	else if( strhdr->write[i] != NULL )
	{
	    iocmd = IOCMD_WRITE;
	}


	/* Build VRIO */

	io = AllocateVrio(strhdr->array->child[i].vrd, (PVOID)strhdr);
	if( io == NULL )			/* memory exhausted? */
	    break;

	io->link = NULL;

	io->iorb = NULL;
	io->iocmd = iocmd;
#if 0
	io->cSGList = myio->cSGList;		/* xxx */
	io->pSGList = myio->pSGList;
	io->ppSGList = myio->ppSGList;
#endif

	io->offset = 0;
	io->blk = strhdr->blkno;
	io->bcnt = strhdr->array->stripesize;

	io->oserr = 0xFFFF;			/* invalidate error code */

	rc = io->vrd->worker(io->vrd, io);
	if( rc )
	{
	    DEBMSG(DBG_ALL,dszWorkerBusy);
	    QueueVrio(io);
	}
    } /* end[for] */
}







/*# ----------------------------------------------------------------------
 * Raid5Notify(io)
 *
 * PARAMETER
 *	io			I/O chich completed
 * RETURNS
 *	(nothing)
 *
 * DESCRIPTION
 *	Notified by child when it has completed an I/O.
 *
 * REMARKS
 */
PRIVATE VOID NEAR _Cdecl
Raid5Notify(PVRIO const io)
{
    PVRIO const		myio = io->mother;		/* I/O to us */
    PVRDRAID5 const	array = (PVRDRAID5)myio->vrd; 	/* it's me */
    USHORT const	childidx = Vrd2Child(array, io->vrd);


    DEBMSG3(DBG_PATH,dszNotify,io,myio,io->oserr);

    ASSERT( io->bcnt != 0 );
    ASSERT( io->link == NULL );
    ASSERT( myio->link == NULL );
    ASSERT( myio->bcnt != 0 );
    ASSERT( myio->vrd->size != 0 );
    ASSERT( myio->vrd->notify == Raid5Notify );
    ASSERT( myio->vrd->worker == Raid5Worker );
    ASSERT( myio->vrd->update == Raid5Update );

    pushf();
    cli();

/*xxx*/

    /* Error handling, keep OKs
     * Force update if anything failed and this hasn't already be marked
     * on disk. */

    if( io->oserr != 0 )
    {
	if( array->child[childidx].valid != 0 )
	{
	    array->child[childidx].valid = 0;
	    array->child[childidx].missing = 1;
	    array->need_updatecfg = TRUE;	/* we *need* an update */
	}
	if( (array->header.flags & RDFLAG_FAIL) == 0 )
	{
	    array->header.flags |= RDFLAG_FAIL;
	    ++cBeeps;
	    array->need_updatecfg = TRUE;	/* we *need* an update */
	}
    }
    if( myio->oserr == 0xFFFF )			/* still not set? */
	myio->oserr = io->oserr;		/* propagate error */
    else if( myio->oserr != 0 )			/* any error until now? */
	myio->oserr = io->oserr;		/* keep this (OK?) */


    switch( io->iocmd )
    {
#if 0
	/* **** WRITE data area **** */
      case IOCMD_WRITE:
	--myio->children;
	if( io->oserr == 0  &&  (array->header.flags & RDFLAG_BUILDING) )
	{
	    /* Update build variables when build is in effect and
	     * this child isn't valid already. */

	    if( io->blk <= array->child[childidx].valid
		&&  io->blk + io->bcnt > array->child[childidx].valid )
	    {
		array->child[childidx].valid = io->blk + io->bcnt;
		if( array->child[childidx].valid == array->header.size )
		{
		    /* Build process is now complete.  Mark configuration
		     * sectors.
		     * The build process itself should close down automatically. */

		    DEBMSG1(DBG_ALL,dszMNotifyValid,childidx);
		    array->child[childidx].valid = (ULONG)-1;
		    array->need_updatecfg = TRUE;
		}
	    }
	}
	break;

      case IOCMD_AWRITE:
	/* **** AWRITE ****
	 * If last I/O, call parent notification. */

	--myio->children;
	break;
#endif

      case IOCMD_READ:
      case IOCMD_AREAD:
	/* **** READ ****
	 * **** AREAD ****
	 * Try next device if error.  Else call parent notification. */

	if( io->oserr == 0 )
	{
	    myio->children = 0;			/* no more I/Os, see below */
	}
	else
	{
#if 0
	    PVRDEVHDR	child = io->vrd;	/* child which completed */

	    --myio->children;
	    if( myio->children != 0 )
	    {
		PVRIO	newio;
		USHORT	rc;
		USHORT	i, found = 0;

		/* Select next child. */

		for( i = 0; i < mirror->children; ++i )
		    if( child == mirror->child[i].vrd )
		    {
			i = (i + 1 == mirror->children ? 0 : i+1);
			child = mirror->child[i].vrd;
			found = 1;
			break;
		    }
		ASSERT( found == 1 );

		/* Allocate VRIO for this new child and start it.  We
		 * can't reuse 'io' as it will be free when we return
		 * from MirrorNotify! */

		newio = AllocateVrio(child, myio);
		if( newio == NULL )
		    myio->children = 0;		/* will end 'myio' with last error */
		else
		{
		    newio->iorb =	io->iorb;
		    newio->iocmd =	io->iocmd;
		    newio->cSGList =	io->cSGList;
		    newio->pSGList =	io->pSGList;
		    newio->ppSGList =	io->ppSGList;
		    newio->offset =	io->offset;
		    newio->bcnt =	io->bcnt;
		    newio->blk =	io->blk;

		    rc = newio->vrd->worker(newio->vrd, newio);
		    if( rc )
			QueueVrio(newio);
		}
	    } /* end[if(children!=0)] */
#endif
	}
	break;
    } /* end[switch] */


    if( myio->children == 0 )
    {
	/* Our task is now completed, all transfer has been done.
	 * Complete 'myio' by calling it's notification routine. */

	CompleteVrio(myio);

	/* If neccessary rewrite configuration sector.  This is
	 * delayed until all I/O regarding the data sector causing this
	 * update have been completed. */

	if( array->need_updatecfg == TRUE )
	{
	    DEBMSG(DBG_ALL,dszNotifyUStart);
	    if( UpdateCfg(&array->header, FALSE) == TRUE )
		array->need_updatecfg = FALSE;
	}
    }
    else if( array->need_updatecfg == TRUE )
    {
	DEBMSG(DBG_ALL,dszNotifyUDefer);
    }

    popf();
    return;
}




/*# ----------------------------------------------------------------------
 * Raid5Worker(self,myio)
 *
 * PARAMETER
 *	mirror		a VRD which forms a RAID 5 array
 *	myio		I/O to myself, distribute
 *
 * RETURNS
 *	0		OK, I/O started
 *	/0		not started
 *
 * DESCRIPTION
 *	Pass VRIO to I/O routines of affected childs on read or write.
 *
 * REMARKS
 *	Erst einmal nur den OK Fall implementieren!
 */
PRIVATE USHORT NEAR _Cdecl
Raid5Worker(PVRDEVHDR const self, PVRIO const myio)
{
    PVRDRAID5 const	array = (PVRDRAID5)self;
    PVRIO	io;

    ULONG	firstblk = myio->blk;		/* first blk */
    ULONG const	lastblk = firstblk + myio->bcnt - 1;

    PSTRIPE_HEADER	strhdr[128/MIN_STRIPE_SIZE];
    unsigned		used_stripes = 0;
    unsigned		i;

    BOOL		busy = FALSE;		/* delay I/O */


    DEBMSG1(DBG_PATH,dszWorker,(PVOID)myio);

    ASSERT( myio->vrd == self );
    ASSERT( myio->link == NULL );
    ASSERT( myio->bcnt != 0 );
    ASSERT( array->header.size != 0 );
    ASSERT( array->header.notify == Raid5Notify );
    ASSERT( array->header.worker == Raid5Worker );
    ASSERT( array->header.update == Raid5Update );
    ++self->iocnt;


    switch( myio->iocmd )
    {
      case IOCMD_READ:
	/* Create VRIO to all affected children. */

	myio->children = 0;
	for(; firstblk <= lastblk ; firstblk += io->bcnt )
	{
	    USHORT	dd_idx, pd_idx;
	    ULONG	maxblks;
	    ULONG	blkno;
	    ULONG	this_cnt;

	    blkno = BlknoFromLargeSec(array, firstblk, &dd_idx, &pd_idx, &maxblks);
	    this_cnt = (maxblks >= lastblk - firstblk + 1
			? lastblk - firstblk + 1 : maxblks);

	    /* For all I/Os we need a stripe header.  Allocate one! */

	    strhdr[used_stripes] = AllocateStrHdr(array, blkno);
	    if( strhdr[used_stripes] == NULL )
	    {
		/* No stripe header available or corresponding stripe
		 * currently in use.  Retry later. */

		busy = TRUE;
		break;
	    }

	    /* Move BUFFER of data child to readlist. */

	    strhdr[used_stripes]->read[dd_idx]
		= strhdr[used_stripes]->cache[dd_idx];
	    strhdr[used_stripes]->cache[dd_idx] = NULL;

	    /* For reading there is nothing more to to. */

	    ++used_stripes;
	}
	break;

    } /* end[switch] */


    if( busy == TRUE )
    {
	/* Not enough resources to process the I/O.  Free everything
	 * and return error code to parent. */

	DEBMSG(DBG_ALL,dszWorkerRelease);
	for( i = 0; i < used_stripes; ++i )
	{
	    FreeStrHdr(strhdr[i]);
	}

	++self->busycnt;
	return 1;
    }


    /* The strhdr[] array now contains BUFFERs for all data needed.  Build
     * VRIOs if needed and start them (the same processing as done by
     * time ticks). */

    for( i = 0; i < used_stripes; ++i )
    {
	ProcessStripe(strhdr[i]);
    }






    return 0;
} /* end[Raid5Worker] */




/*# ----------------------------------------------------------------------
 * Raid5Update(self,sec)
 *
 * PARAMETER
 *	self		a VRD which forms a RAID5 array
 *	sec		sector contains configuration
 *
 * RETURNS
 *	0		don't write back, nothing changed
 *	/0		modified, write back
 *
 * DESCRIPTION
 *	Update configuration sector if anything has changed.
 *
 *	The RDFLAGS_ERROR, RDFLAGS_FAIL don't have to be written to disk
 *	as they can be detected by analysing the childs data.
 *
 * REMARKS
 * ------------------------------------------------------------------- #*/
PRIVATE USHORT NEAR _Cdecl
Raid5Update(PVRDEVHDR const self, PVOID const sec)
{
    PVRDRAID5 const	array = (PVRDRAID5)self;
    PSEC_VRDEV2 const	cfg = sec;
    unsigned		i;


    cfg->timestamp = pGlobalInfoSeg->SIS_BigTime;

    for( i = 0; i < array->children; ++i )
    {
	if( array->child[i].vrd == 0 )
	{
	    cfg->u.s.child[i].flags &= ~0x01;
	    cfg->u.s.child[i].valid = 0;	/* no sector at all */
	}
	else if( array->child[i].valid == (ULONG)-1 )
	{
	    cfg->u.s.child[i].flags |= 0x01;
	    cfg->u.s.child[i].valid = (ULONG)-1;
	}
	else
	{
	    cfg->u.s.child[i].flags &= ~0x01;	/* not completely valid */
	    cfg->u.s.child[i].valid = array->child[i].valid;
	}
    }

    if( (array->header.flags & RDFLAG_BUILDING) )
	cfg->u.s.flags |= RDFLAG_BUILDING;
    else
	cfg->u.s.flags &= ~RDFLAG_BUILDING;

    cfg->crc = Crc16(sec, SECTOR_SIZE-2);
    return 1;
} /* end[MirrorUpdate] */






/* **********************************************************************
 * **** INIT-time processing ********************************************
 * ******************************************************************* */



/* **********************************************************************
 * **** Public Entries **************************************************
 * ******************************************************************* */

/*# ----------------------------------------------------------------------
 * Raid5Create(pVrh,pPhys,sec,pSize)
 *
 * PARAMETER
 *	pVrh		create here
 *	tab		table of device to build from
 *	sec		contents of configuration sector
 *	pSize		return: size used at '*pVrh'
 *
 * RETURNS
 *	0		OK
 *	/0		couldn't create
 *
 * DESCRIPTION
 *	Analyses configuration sector and builds RAID5 VRAID structure
 *	in memory pointed to by 'pVrh'.
 *
 * REMARKS
 */
PUBLIC int NEAR _Cdecl
Raid5Create(PVRDEVHDR pVrh,PVRDEVHDR FAR * tab,PSEC_VRDEV2 sec,PUSHORT pSize)
{
    PVRDRAID5 const array = (PVRDRAID5)pVrh;
    USHORT	i, j, found;
    int		invalids = 0;
    int		result;


    DEBMSG1(DBG_INIT1,dszCreate,(PVOID)pVrh);
    DEBMSG2(DBG_INIT2,dstAdminData,(PVOID)sec,SECTOR_SIZE);
    _fmemset(array, 0, sizeof(*array));


    /* Initialize header elements */

    array->header.notify = Raid5Notify;
    array->header.worker = Raid5Worker;
    array->header.update = Raid5Update;
    array->header.size = 0;			/* initialize, will be modified */
    array->header.flags = 0;
    _fmemcpy(array->header.id, sec->u.s.id, sizeof(array->header.id));

    array->stripesize = STRIPE_SIZE;

    /* Build linking by looking up all parts in 'tab'. */

    array->children = sec->u.s.children;
    array->header.size = sec->u.s.child[0].size * (array->children - 1);
    _fmemset(array->child, 0, array->children * sizeof(array->child[0]));
    found = 0;
    for( i = 0; i < array->children; ++i )
    {
	for( j = 0; j < MAX_PDEV; ++j )
	{
	    if( tab[j] == NULL )
		continue;			/* ignore empty entries */

	    if( _fmemcmp(tab[j]->id, sec->u.s.child[i].id, sizeof(tab[j]->id)) == 0 )
	    {
		result = ValidateVSec2(tab[j], sec);
		if( result < 0 )
		{
		    sprintk(szMsgBuffer, szCreationDelayed);
		    DEBMSG1(DBG_INIT1,dszStr,(PSZ)szMsgBuffer);
		    if( (fDriverFlags & DF_VERBOSE) )
			SaveMessage();

		    return 1;			/* don't create mirror, be quiet */
		}
		else if( result != 0 )
		    continue;			/* don't use this child */

		array->child[i].vrd = tab[j];
		if( (sec->u.s.child[i].flags & 0x01) == 0 )
		{
		    ++invalids;
		    array->child[i].valid = sec->u.s.child[i].valid;
		}
		else
		{
		    array->child[i].valid = (ULONG)-1;
		}
		++found;
		break;				/* stop scan, next child */
	    }
	}
    }


    /* OK, we will indeed create an array.  Remove children from 'tab'
     * so that they don't get used for another array. */

    CreateCache(&array->header, array->stripesize);
    for( i = 0; i < array->children; ++i )
    {
	if( array->child[i].vrd != 0 )
	{
	    for( j = 0; j < MAX_PDEV; ++j )
		if( tab[j] == array->child[i].vrd )
		{
		    tab[j] = NULL;
		    break;
		}
	}
    }


    /* Update local flags and start [re]build process if usefull. */

    if( found != array->children )
    {
	if( found != (array->children-1) )
	{
	    sprintk(szMsgBuffer, szErrorState, array->children-found);
	    array->header.flags |= RDFLAG_ERROR;
	}
	else
	{
	    sprintk(szMsgBuffer, szFailState);
	    array->header.flags |= RDFLAG_FAIL;
	}
	DEBMSG1(DBG_INIT1,dszStr,(PSZ)szMsgBuffer);
	if( (fDriverFlags & DF_VERBOSE) )
	    SaveMessage();
	++cBeeps;
    }
    else if( (sec->u.s.flags & RDFLAG_BUILDING)  ||  invalids != 0 )
    {
	ULONG	bdone = (ULONG)-1;

	for( i = 0; i < array->children; ++i )
	    bdone = MIN(bdone,array->child[i].valid);
	if( bdone == (ULONG)-1 )
	{
	    /* Well, there may be all configuration data from
	     * an aborted BUILD (stopped via VSetup).
	     * We *need* to update: no BUILD */

	    array->need_updatecfg = TRUE;
	    DEBMSG(DBG_INIT1,dszNoBuild);
	}
	else
	{
	    array->header.flags |= RDFLAG_BUILDING;
	    BuildCreate(pVrh, bdone, 0);
	}
    }


    array->readchild = NextValidChild(array, array->readchild);


    /* Size of administrative data depends on count of children. */

    *pSize = sizeof(*array) + array->children * sizeof(array->child[0]);

    return 0;
} /* end[Raid5Create] */
