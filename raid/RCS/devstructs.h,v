head	2.4;
access;
symbols
	vrflt031113:2.4
	vrflt010903:2.4
	PREV010803:2.4
	VRAIDv0_85:2.4
	VRAIDv0_84:2.3
	VRAIDv0_82:1.11
	VRAIDv0_70:1.9
	VRAIDv0_60:1.5
	VRAIDv0_51:1.4
	VRAIDv0_50:1.4
	VRAIDv0_40:1.4
	VRAIDv0_30:1.4
	ALPHA1:1.3;
locks; strict;
comment	@ * @;


2.4
date	2001.06.25.00.30.11;	author vitus;	state Exp;
branches;
next	2.3;

2.3
date	2001.02.11.01.18.45;	author vitus;	state Exp;
branches;
next	2.2;

2.2
date	2000.08.29.01.08.08;	author vitus;	state Exp;
branches;
next	2.1;

2.1
date	2000.06.15.01.11.25;	author vitus;	state Exp;
branches;
next	1.11;

1.11
date	99.10.01.00.52.16;	author vitus;	state Exp;
branches;
next	1.10;

1.10
date	99.09.18.14.33.27;	author vitus;	state Exp;
branches;
next	1.9;

1.9
date	99.06.21.02.34.43;	author vitus;	state Exp;
branches;
next	1.8;

1.8
date	99.05.12.01.35.50;	author vitus;	state Exp;
branches;
next	1.7;

1.7
date	99.02.06.00.45.52;	author vitus;	state Exp;
branches;
next	1.6;

1.6
date	99.01.22.02.52.08;	author vitus;	state Exp;
branches;
next	1.5;

1.5
date	98.12.13.22.27.01;	author vitus;	state Exp;
branches;
next	1.4;

1.4
date	98.06.26.22.10.31;	author vitus;	state Stab;
branches;
next	1.3;

1.3
date	98.04.08.01.02.03;	author vitus;	state Exp;
branches;
next	1.2;

1.2
date	98.03.10.02.30.00;	author vitus;	state Exp;
branches;
next	1.1;

1.1
date	98.03.06.01.27.21;	author vitus;	state Exp;
branches;
next	;


desc
@Layout of device structures used at runtime
@


2.4
log
@- BUILDPROCESS: added lin_buffer, builds now use a seperate buffer
@
text
@/*
 * $Source: r:/source/driver/raid/RCS/devstructs.h,v $
 * $Revision: 2.3 $
 * $Date: 2001/02/11 01:18:45 $
 * $Locker: vitus $
 *
 *
 *	Layout of device structures used at runtime.
 *
 *
 * $Log: devstructs.h,v $
 * Revision 2.3  2001/02/11 01:18:45  vitus
 * - VRDEVHDR: changed ioctl() method to return DRVSTATUS
 *
 * Revision 2.2  2000/08/29 01:08:08  vitus
 * - defined more VRDIOCTL_* codes
 *
 * Revision 2.1  2000/06/15 01:11:25  vitus
 * - added 'ioctl' method to VRDEVHDR and defined some codes
 *
 * Revision 1.11  1999/10/01 00:52:16  vitus
 * - VRDEVHDR includes iocnt and busycnt fields
 *
 * Revision 1.10  1999/09/18 14:33:27  vitus
 * - added BASEDISK definition (router to PHYSDEVICEs)
 * - added macro UH2PPTR() to get device pointer from iorb.UnitHandle
 *
 * Revision 1.9  1999/06/21 02:34:43  vitus
 * - corrected english spelling
 *
 * Revision 1.8  1999/05/12 01:35:50  vitus
 * - removed admin() element of VRDEVHDR, now handled via IOCMD_A*
 * - removed RDFLAGS_*, see dsklayout.h
 * - BUILDPROCESS don't needs VRIO, VRDEVHDR.  Removed.
 *
 * Revision 1.7  1999/02/06 00:45:52  vitus
 * - added 'admin' method to VRDEVHDR
 * - modified VRIO to include all relevant parts of IORB (which isn't
 *   used any more for commands, addresses, etc.)
 *
 * Revision 1.6  1999/01/22 02:52:08  vitus
 * - added definition of BUILDPROCESS: keeps data from processes which rebuild arrays
 * - added RDFLAGS_BUILD, related
 *
 * Revision 1.5  1998/12/13 22:27:01  vitus
 * - removed hdr, size, flags from HOSTDRIVE: we don't need them as a
 *   HOSTDRIVE is used only for a single internal device structure so
 *   we can query that device.
 *
 * Revision 1.4  1998/06/26 22:10:31  vitus
 * - corrected worker,notify prototypes (MS-C wonders)
 *
 * Revision 1.3  1998/04/08 01:02:03  vitus
 * - added VRDEVHDR to HOSTDRIVE structure
 * - renamed father I/O to mother
 *
 * Revision 1.2  1998/03/10 02:30:00  vitus
 * - changed VRDEVICE to VRDEVHDR structure (modules define their structure)
 *
 * Revision 1.1  1998/03/06 01:27:21  vitus
 * Initial revision
 * ---------------------------------------------
 * This code is Copyright Vitus Jensen 1998-2001
 */

/* Forward declarations */

typedef struct _VRIO FAR *	PVRIO;
typedef struct _VRDEVHDR FAR *	PVRDEVHDR;



/*
 * Runtime configuration is done with list/tables/parent-child of
 * structures.  An I/O enters at HOSTDRIVE which has a pointer to
 * the first VRDEVICE which has pointers to child which build it.  And
 * those children have pointers, etc.
 *
 * Phys,mirror,spanning,stripe-VRDEVICES are all different
 * but start with this header.
 *
 * The difference between 'worker' and 'admin' is:
 * - 'admin' allows access to the configuration sectors, in fact it should
 *   only be used for this purpose.  Reading sector 0 gives the configuration
 *   data for the device you are reading from (SEC_PHYSDEV from PYHSDEVICE).
 * - 'worker' only reads sectors from the "data range" (where OS/2 writes
 *   it's data to).
 *
 */
typedef struct _VRDEVHDR {
    DEVID	id;
    UCHAR	flags;				/* RDFLAG_* */
    USHORT	iocnt;				/* counts VRIOs */
    USHORT	busycnt;			/* counts VRIOs not started */
    ULONG	size;				/* [sectors] */

    /* self:	VR device which will be notified ('notify' is method
     *		of 'self'.
     * io:	VR I/O to child of 'self' which completed. */

    void	(NEAR _Cdecl *notify)(PVRIO const io);

    /* self:	VR device which has to process 'io' ('worker' is method
     *		of 'self').
     * io:	VR I/O to 'self' */

    USHORT	(NEAR _Cdecl *worker)(PVRDEVHDR const self,PVRIO const io);

    /* self:	VR device which has to modify 'sector' ('update' is method
     *		of 'self').
     * sector:	'self's definition sector */

    USHORT	(NEAR _Cdecl *update)(PVRDEVHDR const self, PVOID const sector);

    /* Special function ('ioctl') interface.  This method is only called
     * at task time and may block the current thread!
     *
     * self:	VR device which is to query/modify ('ioctl' is method
     *		of 'self').
     * fct:	function code to execute (VRDIOCTL_*)
     * data:	dependend on 'cmd'
     *
     * returns 0 or driver status code (incl. STDON). */

    DRVSTATUS	(NEAR _Cdecl *ioctl)(PVRDEVHDR const self, USHORT const cmd,
				     PVOID const parameter, PVOID const data);


} VRDEVHDR, FAR * PVRDEVHDR;

#define VRDIOCTL_QUERY_CHILDREN	0
#define VRDIOCTL_INFO		1
#define VRDIOCTL_VERIFY		10
#define VRDIOCTL_START_REBUILD	11
#define VRDIOCTL_CHILD_STATE	12



#if 0
/* command codes above 0x8000 are used for internal purposes: */

#define VRDIOCTL_SET_BUILDPOS	0x8000		/* parameter contains pointer to
						   current position of [re]build
						   process (which may be detected
						   by other means from the array
						   itself, it's only a hint). */
#endif




/*
 * A physical device is kind of special.  We need data to access it
 * via ADD and may --- in the future --- save some hardware related
 * settings here.
 */
typedef struct _PHYSDEVICE {
    PVRDEVHDR	parent;

    /* Used to address the ADD: */

    void	(FAR  _Cdecl * pADDEntry)(PIORB);
    USHORT	hdADDUnit;			/* ADD handle of this unit */
    USHORT	hdFilter;			/* previous filter (if any) */

    USHORT	iAdapter;			/* global index */
    USHORT	iUnit;				/* per adapter index */

    /* From MBR and VRAID disk sectors: */

    ULONG	ulVRStart;			/* start of partition */
    ULONG	ulVRSize;			/* size of partition */

} PHYSDEVICE, FAR * PPHYSDEVICE;




/*
 * All internal I/O handling uses VRIO structures.
 */
typedef struct _VRIO {

    PVRDEVHDR	vrd;				/* who processes this I/O? */
    PVRIO	link;				/* temporary pointer
						   and in QueueVrio() */

    /* Data for notification */

    PVOID	iorb;				/* OS/2 request to VRAID.FLT */

    PVRIO	mother;				/* created on behalf of this I/O */
    USHORT	children;			/* how many child I/Os? */
    USHORT	oserr;				/* like in IORB */


    /* Data to generate command to underlying
     * ADD or VRDEVICE from. */

    USHORT	iocmd;

    USHORT	cSGList;			/* count of S/G list elements */
    PSCATGATENTRY pSGList;			/* far ptr to S/G list */
    ULONG	ppSGList;			/* physical address of S/G list */

    USHORT	offset;				/* in memory relative
						   to S/G list start [sector] */
    USHORT	bcnt;				/* how many sectors */
    ULONG	blk;				/* block no on device [sector]
						   worker: relative to data area
						   admin: relative to partition */
} VRIO;


#define IOCMD_READ	0x01			/* read from data area */
#define IOCMD_WRITE	0x02			/* write to data area */

#define IOCMD_AREAD	0x11			/* read from admin sectors */
#define IOCMD_AWRITE	0x12			/* write to admin sectors */




/*
 * This structure contains all information the OS is willing
 * to know or change.
 * I.e. keep modified unitinfo, etc. here.
 */
typedef struct _HOSTDRIVE {

    USHORT	OsFlags;			/* OF_* */
    USHORT	ReqCnt;				/* counts IORBs, IORB chains count
						   as single request */

    PVRDEVHDR	child;

    PUNITINFO	modinfo;			/* modified unit info */

    /* We might need an IORB queue */

    PIORB	pQueueHead;
    PIORB	pQueueFoot;			/* IORB queueing */
    ULONG	hlQueue;			/* 0B: lock handle for above */

} HOSTDRIVE, FAR * PHOSTDRIVE;



typedef struct _BASEDISK {

    USHORT	OsFlags;			/* OF_* */
    UNITINFO	info;
    PPHYSDEVICE	phys;				/* to access ADD etc */

} BASEDISK, FAR * PBASEDISK;



#define OF_ALLOCATED	0x0001			/* OS/2 related (OsFlags) */




/* Translate the UnitHandle passed to/from OS/2 to a pointer.  Pointer
 * points to PHOSTDRIVE of PBASEDISK. */

#define UH2PPTR(uhandle)		((ULONG _based(_segname("_DATA")) *)(uhandle))






typedef struct _BUILDPROCESS {
    PVRDEVHDR		vrd;			/* which to build */
    ULONG		next;			/* next sector to update */
    UCHAR		busy;			/* nonzero if I/O running */
    ULONG		lin_buffer;		/* linear address of buffer
						   allocated for I/Os */
} BUILDPROCESS, FAR *PBUILDPROCESS;
@


2.3
log
@- VRDEVHDR: changed ioctl() method to return DRVSTATUS
@
text
@d3 2
a4 2
 * $Revision: 2.2 $
 * $Date: 2000/08/29 01:08:08 $
d12 3
d278 2
@


2.2
log
@- defined more VRDIOCTL_* codes
@
text
@d3 2
a4 2
 * $Revision: 2.1 $
 * $Date: 2000/06/15 01:11:25 $
d7 1
d10 1
d12 3
d59 2
a60 2
 * -------------------------------------------
 * This code is Copyright Vitus Jensen 1998-99
d122 1
a122 1
    USHORT	(NEAR _Cdecl *ioctl)(PVRDEVHDR const self, USHORT const cmd,
@


2.1
log
@- added 'ioctl' method to VRDEVHDR and defined some codes
@
text
@d3 2
a4 2
 * $Revision: 1.11 $
 * $Date: 1999/10/01 00:52:16 $
d10 3
d126 4
d131 2
d134 6
@


1.11
log
@- VRDEVHDR includes iocnt and busycnt fields
@
text
@d3 2
a4 2
 * $Revision: 1.10 $
 * $Date: 1999/09/18 14:33:27 $
d10 3
d102 15
a116 1
    USHORT	(NEAR _Cdecl *update)(PVRDEVHDR const self,PVOID const sector);
d119 6
@


1.10
log
@- added BASEDISK definition (router to PHYSDEVICEs)
- added macro UH2PPTR() to get device pointer from iorb.UnitHandle
@
text
@d3 2
a4 2
 * $Revision: 1.9 $
 * $Date: 1999/06/21 02:34:43 $
d10 4
d79 2
d87 1
a87 1
    VOID	(NEAR _Cdecl *notify)(PVRIO const io);
@


1.9
log
@- corrected english spelling
@
text
@d3 2
a4 2
 * $Revision: 1.8 $
 * $Date: 1999/05/12 01:35:50 $
d10 3
d179 1
a179 1
    USHORT	OsFlags;
d195 23
a217 1
#define OF_ALLOCATED	0x0001			/* OS/2 related */
@


1.8
log
@- removed admin() element of VRDEVHDR, now handled via IOCMD_A*
- removed RDFLAGS_*, see dsklayout.h
- BUILDPROCESS don't needs VRIO, VRDEVHDR.  Removed.
@
text
@d3 2
a4 2
 * $Revision: 1.7 $
 * $Date: 1999/02/06 00:45:52 $
d10 5
d56 1
a56 1
 * those childs have pointers, etc.
d138 1
a138 1
    USHORT	childs;				/* how many child I/Os? */
@


1.7
log
@- added 'admin' method to VRDEVHDR
- modified VRIO to include all relevant parts of IORB (which isn't
  used any more for commands, addresses, etc.)
@
text
@d3 2
a4 2
 * $Revision: 1.6 $
 * $Date: 1999/01/22 02:52:08 $
d10 5
d56 7
a62 3
 * The difference between worker and admin is that
 * - admin allows access to the configuration sectors, in fact it should
 *   only be used for this purpose.
d66 1
a66 1
    UCHAR	flags;				/* RDFLAGS_* */
d80 6
a85 1
    USHORT	(NEAR _Cdecl *admin)(PVRDEVHDR const self,PVRIO const io);
a88 5
#define RDFLAGS_ERROR	0x01			/* array in ERROR state,
						   no more I/Os possible */
#define RDFLAGS_FAIL	0x02			/* redundancy lost */
#define RDFLAGS_BUILD	0x80			/* array is in build process */

d144 1
a144 1
    ULONG	ppSGList;			/* physical address of  S/G list */
d154 6
a159 2
#define IOCMD_READ	0x01
#define IOCMD_WRITE	0x02
a195 2
    VRIO		vrio;			/* need a mother for MirrorXxxxx */
    VRDEVHDR		parent;			/* and a dummy VRDEVHDR ... */
@


1.6
log
@- added definition of BUILDPROCESS: keeps data from processes which rebuild arrays
- added RDFLAGS_BUILD, related
@
text
@d3 2
a4 2
 * $Revision: 1.5 $
 * $Date: 1998/12/13 22:27:01 $
d10 4
d49 5
a53 1
 * but start with this header:
d71 2
d116 1
a116 1
    PVRIO	link;				/* before sending to VRDEVICE
d119 3
a121 1
    /* Data for notification. */
d127 2
a128 1
    /* data to generate command to underlying
d131 6
a136 1
    PIORB_EXECUTEIO request;			/* OS/2 request to VRAID.FLT */
d139 5
a143 2
    USHORT	bcnt;				/* how many [sector] */
    ULONG	blk;				/* on device absolute [sector] */
d145 2
a146 1
} VRIO;
@


1.5
log
@- removed hdr, size, flags from HOSTDRIVE: we don't need them as a
  HOSTDRIVE is used only for a single internal device structure so
  we can query that device.
@
text
@d3 2
a4 2
 * $Revision: 1.4 $
 * $Date: 1998/06/26 22:10:31 $
d10 5
d27 2
a28 2
 * ----------------------------------------
 * This code is Copyright Vitus Jensen 1998
d65 1
a65 1
#define RDFLAGS_ERROR	0x0001			/* array in ERROR state,
d67 2
a68 1
#define RDFLAGS_FAIL	0x0002			/* redundancy lost */
d75 1
a75 1
 * via ADD and may --- in the future --- save some harware related
d152 2
d155 9
a163 1
#define OF_ALLOCATED	0x0001			/* OS/2 related */
@


1.4
log
@- corrected worker,notify prototypes (MS-C wonders)
@
text
@d2 3
a4 3
 * $Source: d:/source/driver/raid/RCS/devstructs.h,v $
 * $Revision: 1.3 $
 * $Date: 1998/04/08 01:02:03 $
d7 1
a7 1
 * Layout of device structures used at runtime.
d10 3
a128 1
    VRDEVHDR	hdr;
a129 1
    UCHAR	flags;				/* RDFLAGS_* */
d131 2
a132 1
    ULONG	size;				/* [sector] */
@


1.3
log
@- added VRDEVHDR to HOSTDRIVE structure
- renamed father I/O to mother
@
text
@d3 2
a4 2
 * $Revision: 1.2 $
 * $Date: 1998/03/10 02:30:00 $
d10 4
d48 1
a48 1
    void	(*notify)(PVRIO io);
d54 1
a54 1
    USHORT	(*worker)(PVRDEVHDR self,PVRIO io);
@


1.2
log
@- changed VRDEVICE to VRDEVHDR structure (modules define their structure)
@
text
@d3 3
a5 3
 * $Revision: 1.1 $
 * $Date: 1998/03/06 01:27:21 $
 * $Locker$
d10 3
d98 1
a98 1
    PVRIO	father;				/* created on behalf of this I/O */
d122 2
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * $Source$
 * $Revision$
 * $Date$
 * $Author$
d9 3
a11 1
 * $Log$
d19 34
a52 1
typedef struct _VRDEVICE FAR *	PVRDEVICE;
d58 3
a60 2
 * To really send I/Os to an underlying ADD we need some information which
 * are combined in the following structure.
d63 1
a63 2

    PVRDEVICE	parent;				/* to commit status changes */
a84 49
 * All configuration is done with linked lists of VRDEVICE structures:
 * - I/Os from OS enter at HOSTDEVICE
 * - HOSTDEVICE.child points to the first VRDEVICE to build the
 *   structure named in HOSTDEVICE.type.  All VRDEVICE.sibling
 *   of this first VRDEVICE form the complete structure.
 * - Any VRDEVICE may itself consist of a structure of VRDEVICEs in
 *   which case VRDEVICE.type says anything other than RDTYPE_SINGLE.
 *   In this case examine VRDEVICE.child to get all VRDEVICEs to build
 *   that structure (via VRDEVICE.child->sibling).
 * - If VRDEVICE.type == RDTYPE_SINGLE we reached a VRDEVICE which consists
 *   of a single disk described in VRDEVICE.phys.
 *
 * Implementation:
 *	Implement functions like StripeIo, MirrorIo and pass VROBJECT.child
 *	to them.  They walk child's VRDEVICE.sibling and examine each
 *	VROBJECT.type to determine how to do I/O.
 */
typedef struct _VRDEVICE {
    UCHAR	type;				/* RDTYPE_* */
    UCHAR	flags;				/* RDFLAGS_* */
    DEVID	id;
    ULONG	size;				/* [sectors] */

    PVRDEVICE	sibling;			/* NULL if parent single */
    PVRDEVICE	child;				/* NULL if this single */
    PVRDEVICE	parent;				/* to commit status changes */

    PPHYSDEVICE	phys;				/* !NULL if this single */

    void	(*notify)(PVRDEVICE child,PVRIO io);
    USHORT	(*worker)(PVRDEVICE self,PVRIO io);

} VRDEVICE;

#define RDTYPE_SINGLE	1
#define RDTYPE_STRIPE	2
#define RDTYPE_SPAN	3
#define RDTYPE_MIRROR	4
#define RDTYPE_RAID4	5
#define RDTYPE_RAID5	6

#define RDFLAGS_ERROR	0x0001			/* array in ERROR state,
						   no more I/Os possible */
#define RDFLAGS_FAIL	0x0002			/* redundancy lost */




/*
d89 1
a89 1
    PVRDEVICE	vrd;				/* who executes this I/O? */
d93 1
a93 1
    /* Links for worker on notify */
d95 1
a95 2
    PVRIO	father;				/* I/O created on behalf
						   of this I/O */
a118 1
    UCHAR	type;				/* RDTYPE_* */
d123 1
a123 1
    PVRDEVICE	child;
@
