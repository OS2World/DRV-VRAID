

    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    1

    xxxx-ii-yyyy-cc-f--oooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


       1       1  0 +  0000                                           title   drvscan.cpp
       2       2  0 +            @Cpu=00000D0F                            .386
       3       3  0 +            @Cpu=00000D0F                            .387
       4       4  0 +                                                     includelib CPPOM30.LIB
       5       5  0 +                                                     includelib OS2386.LIB
       6       6  0 +                                             CODE32  segment dword use32 public 'CODE'
       7       7  0 +  00000000                                   CODE32  ends
       8       8  0 +                                             DATA32  segment dword use32 public 'DATA'
       9       9  0 +  00000000                                   DATA32  ends
      10      10  0 +                                             CONST32_RO      segment dword use32 public 'CONST'
      11      11  0 +  00000000                                   CONST32_RO      ends
      12      12  0 +                                             BSS32   segment dword use32 public 'BSS'
      13      13  0 +  00000000                                   BSS32   ends
      14      14  0 +                                             EH_CODE segment dword use32 public 'CODE'
      15      15  0 +  00000000                                   EH_CODE ends
      16      16  0 +                                             CTOR_DTOR1      segment dword use32 public 'DATA'
      17      17  0 +  00000000                                   CTOR_DTOR1      ends
      18      18  0 +                                             CTOR_DTOR2      segment dword use32 public 'DATA'
      19      19  0 +  00000000                                   CTOR_DTOR2      ends
      20      20  0 +                                             CTOR_DTOR3      segment dword use32 public 'DATA'
      21      21  0 +  00000000                                   CTOR_DTOR3      ends
      22      22  0 +                                             EH_DATA segment para use32 public 'DATA'
      23      23  0 +  00000000                                   EH_DATA ends
      24      24  0 +                                             _VFT    segment para use32 public 'DATA'
      25      25  0 +  00000000                                   _VFT    ends
      26      26  0 +                                             DGROUP  group BSS32, DATA32
      27      27  0 +                                                     assume  cs:FLAT, ds:FLAT, ss:FLAT, es:FLAT
      28      28  0 +                                                     public  usHostId
      29      29  0 +                                                     extrn   memcpy:proc
      30      30  0 +                                                     extrn   memcmp:proc
      31      31  0 +                                                     extrn   __vn__FUi:proc
      32      32  0 +                                                     extrn   __nw__FUi:proc
      33      33  0 +                                                     extrn   memset:proc
      34      34  0 +                                                     extrn   DriverArrayinfo__FUsP21_VRAID_ARRAYINFO_DATA:proc
      35      35  0 +                                                     extrn   Verbose:proc
      36      36  0 +                                                     extrn   queryIndex__8VOS2DiskFv:proc
      37      37  0 +                                                     extrn   DosSleep:proc
      38      38  0 +                                                     extrn   __vd__FPv:proc
      39      39  0 +                                                     extrn   DriverPhysinfo__FUsP20_VRAID_PHYSINFO_DATA:proc
      40      40  0 +                                                     extrn   __dl__FPv:proc
      41      41  0 +                                                     extrn   DriverPhyslist__FPUsPPUs:proc
      42      42  0 +                                                     extrn   __ct__6VFRDevFUs:proc
      43      43  0 +                                                     extrn   _Exception_CPP:proc
      44      44  0 +                                                     extrn   DriverArraylist__FPUsPPUs:proc
      45      45  0 +                                                     extrn   PDskEnum:proc
      46      46  0 +                                                     extrn   PDskOpen:proc
      47      47  0 +                                                     extrn   MyMessageBox__FCiCUlPce:proc
      48      48  0 +                                                     extrn   __ct__8VOS2DiskFUlT1:proc
      49      49  0 +                                                     extrn   __dt__8VOS2DiskFv:proc
      50      50  0 +                                                     extrn   Crc16__FPvUs:proc
      51      51  0 +                                                     extrn   __ct__6VChainFPUci:proc
      52      52  0 +                                                     extrn   __ct__7VStripeFPUci:proc
      53      53  0 +                                                     extrn   __ct__7VSingleFPUc:proc
      54      54  0 +                                                     extrn   __ct__8VMissingFPUcUl:proc
      55      55  0 +                                                     extrn   __ct__7VMirrorFPUci:proc


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    2
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


      56      56  0 +                                                     extrn   __ct__9PartTableFP8VOS2DiskUl7Boolean:proc
      57      57  0 +                                                     extrn   __dt__9PartTableFv:proc
      58      58  0 +                                                     extrn   __ct__9VOS2DriveFP8VOS2Disk:proc
      59      59  0 +                                                     extrn   __ct__6VORDevFP8VOS2DiskUlT2:proc
      60      60  0 +                                                     extrn   queryDPB__8VOS2DiskFv:proc
      61      61  0 +                                                     extrn   __ct__9PartTableFP8VOS2DiskUlT2:proc
      62      62  0 +                                                     extrn   clear__9PartTableFv:proc
      63      63  0 +                                                     extrn   addPE__9PartTableFRC15_PARTITIONENTRY:proc
      64      64  0 +                                                     extrn   delPE__9PartTableFP15_PARTITIONENTRY:proc
      65      65  0 +                                                     extrn   addForeign__9PartTableFUcT1UlT3:proc
      66      66  0 +                                                     extrn   addOwn__9PartTableFUcT1UlT3:proc
      67      67  0 +                                                     extrn   WinDlgBox:proc
      68      68  0 +                                                     extrn   AreaDlgProc:proc
      69      69  0 +                                                     extrn   WinQueryWindowPtr:proc
      70      70  0 +                                                     extrn   CrcInit__FUs:proc
      71      71  0 +                                                     extrn   QueryHostId__FCPUs:proc
      72      72  0 +                                                     extrn   DriverStartSetup__Fv:proc
      73      73  0 +                                                     extrn   WinPostMsg:proc
      74      74  0 +                                                     extrn   WinDefWindowProc:proc
      75      75  0 +                                                     extrn   WinInitialize:proc
      76      76  0 +                                                     extrn   WinCreateMsgQueue:proc
      77      77  0 +                                                     extrn   WinGetLastError:proc
      78      78  0 +                                                     extrn   WinCancelShutdown:proc
      79      79  0 +                                                     extrn   WinRegisterClass:proc
      80      80  0 +                                                     extrn   WinCreateWindow:proc
      81      81  0 +                                                     extrn   WinSetWindowPtr:proc
      82      82  0 +                                                     extrn   WinGetMsg:proc
      83      83  0 +                                                     extrn   WinDispatchMsg:proc
      84      84  0 +                                                     extrn   WinDestroyWindow:proc
      85      85  0 +                                                     extrn   WinDestroyMsgQueue:proc
      86      86  0 +                                                     extrn   WinTerminate:proc
      87      87  0 +                                                     extrn   fSetupMode:word
      88      88  0 +                                                     extrn   _fltused:dword
      89      89  0 +                                             CONST32_RO      segment
      90      90  0 +  00000000  44 72 76 53 63 61 6E             @CBE1   db "DrvScan",0h
                                 00
      91      91  0 +  00000008  54 65 73 74 69 6E 67             @CBE2   db "Testing array %u",0h
                                 20 61 72 72 61 79 20
                                 25 75 00
      92      92  0 +  00000019  00 00 00                                 align 04h
      93      93  0 +  0000001C  41 72 72 61 79 20 49             @CBE3   db "Array Info %u - rc %lu",0h
                                 6E 66 6F 20 25 75 20
                                 2D 20 72 63 20 25 6C
                                 75 00
      94      94  0 +  00000033  00                                       align 04h
      95      95  0 +  00000034  41 72 72 61 79 20 25             @CBE4   db "Array %u accessed when r"
                                 75 20 61 63 63 65 73
                                 73 65 64 20 77 68 65
                                 6E 20 72
      96      96  0 +  0000004C  65 61 64 69 6E 67 20             db "eading OS/2 Drive %lu",0h
                                 4F 53 2F 32 20 44 72
                                 69 76 65 20 25 6C 75
                                 00
      97      97  0 +  00000062  00 00                                    align 04h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    3
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


      98      98  0 +  00000064  54 65 73 74 69 6E 67             @CBE5   db "Testing Physdev %u",0h
                                 20 50 68 79 73 64 65
                                 76 20 25 75 00
      99      99  0 +  00000077  00                                       align 04h
     100     100  0 +  00000078  50 68 79 73 64 65 76             @CBE6   db "Physdev Info %u - rc %lu"
                                 20 49 6E 66 6F 20 25
                                 75 20 2D 20 72 63 20
                                 25 6C 75
     101     101  0 +  00000090  00                               db 0h
     102     102  0 +  00000091  00 00 00                                 align 04h
     103     103  0 +  00000094  50 48 59 53 44 45 56             @CBE7   db "PHYSDEV %u accessed when"
                                 20 25 75 20 61 63 63
                                 65 73 73 65 64 20 77
                                 68 65 6E
     104     104  0 +  000000AC  20 72 65 61 64 69 6E             db " reading OS/2 disk %lu",0h
                                 67 20 4F 53 2F 32 20
                                 64 69 73 6B 20 25 6C
                                 75 00
     105     105  0 +  000000C3  00                                       align 04h
     106     106  0 +  000000C4  41 6C 6C 6F 63 61 74             @CBE8   db "AllocateFltDevices",0h
                                 65 46 6C 74 44 65 76
                                 69 63 65 73 00
     107     107  0 +  000000D7  00                                       align 04h
     108     108  0 +  000000D8  44 72 76 53 65 74 75             @CBE9   db "DrvSetup",0h
                                 70 00
     109     109  0 +  000000E1  00 00 00                                 align 04h
     110     110  0 +  000000E4  44 72 69 76 65 72 50             @CBE10  db "DriverPhyslist - rc %lu",0h
                                 68 79 73 6C 69 73 74
                                 20 2D 20 72 63 20 25
                                 6C 75 00
     111     111  0 +  000000FC  46 4C 54 20 64 72 69             @CBE11  db "FLT drive capacity: %lu "
                                 76 65 20 63 61 70 61
                                 63 69 74 79 3A 20 25
                                 6C 75 20
     112     112  0 +  00000114  4D 42 79 74 65 73 00             db "MBytes",0h
     113     113  0 +  0000011B  00                                       align 04h
     114     114  0 +  0000011C  41 6C 6C 6F 63 61 74             @CBE12  db "AllocateOs2Devices",0h
                                 65 4F 73 32 44 65 76
                                 69 63 65 73 00
     115     115  0 +  0000012F  00                                       align 04h
     116     116  0 +  00000130  44 72 69 76 65 72 41             @CBE13  db "DriverArraylist - rc %lu"
                                 72 72 61 79 6C 69 73
                                 74 20 2D 20 72 63 20
                                 25 6C 75
     117     117  0 +  00000148  00                               db 0h
     118     118  0 +  00000149  00 00 00                                 align 04h
     119     119  0 +  0000014C  50 44 73 6B 45 6E 75             @CBE14  db "PDskEnum - rc %lu",0h
                                 6D 20 2D 20 72 63 20
                                 25 6C 75 00
     120     120  0 +  0000015E  00 00                                    align 04h
     121     121  0 +  00000160  50 44 73 6B 4F 70 65             @CBE15  db "PDskOpen(%lu) - rc %lu",0h
                                 6E 28 25 6C 75 29 20
                                 2D 20 72 63 20 25 6C
                                 75 00


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    4
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     122     122  0 +  00000177  00                                       align 04h
     123     123  0 +  00000178  41 6E 20 4F 53 32 20             @CBE16  db "An OS2 disk cannot be ac"
                                 64 69 73 6B 20 63 61
                                 6E 6E 6F 74 20 62 65
                                 20 61 63
     124     124  0 +  00000190  63 65 73 73 65 64 2E             db "cessed.  There may be an"
                                 20 20 54 68 65 72 65
                                 20 6D 61 79 20 62 65
                                 20 61 6E
     125     125  0 +  000001A8  20 69 6E 73 74 61 6E             db " instance of FDISK runni"
                                 63 65 20 6F 66 20 46
                                 44 49 53 4B 20 72 75
                                 6E 6E 69
     126     126  0 +  000001C0  6E 67 20 73 6F 6D 65             db "ng somewhere.",0ah,"Please don"
                                 77 68 65 72 65 2E 0A
                                 50 6C 65 61 73 65 20
                                 64 6F 6E
     127     127  0 +  000001D8  27 74 20 63 68 61 6E             db "'t change drive configur"
                                 67 65 20 64 72 69 76
                                 65 20 63 6F 6E 66 69
                                 67 75 72
     128     128  0 +  000001F0  61 74 69 6F 6E 20 62             db "ation but end VSetup and"
                                 75 74 20 65 6E 64 20
                                 56 53 65 74 75 70 20
                                 61 6E 64
     129     129  0 +  00000208  20 61 6E 79 20 64 69             db " any disk management sof"
                                 73 6B 20 6D 61 6E 61
                                 67 65 6D 65 6E 74 20
                                 73 6F 66
     130     130  0 +  00000220  74 77 61 72 65 20 6C             db "tware like FDISK and res"
                                 69 6B 65 20 46 44 49
                                 53 4B 20 61 6E 64 20
                                 72 65 73
     131     131  0 +  00000238  74 61 72 74 20 56 53             db "tart VSetup!",0h
                                 65 74 75 70 21 00
     132     132  0 +  00000245  00 00 00                                 align 04h
     133     133  0 +  00000248  43 52 43 20 65 72 72             @CBE17  db "CRC error in VRAIDDEVICE"
                                 6F 72 20 69 6E 20 56
                                 52 41 49 44 44 45 56
                                 49 43 45
     134     134  0 +  00000260  20 73 65 63 74 6F 72             db " sector (%#x, %#x)",0h
                                 20 28 25 23 78 2C 20
                                 25 23 78 29 00
     135     135  0 +  00000273  00                                       align 04h
     136     136  0 +  00000274  55 6E 6B 6E 6F 77 6E             @CBE18  db "Unknown VRAID type %u",0h
                                 20 56 52 41 49 44 20
                                 74 79 70 65 20 25 75
                                 00
     137     137  0 +  0000028A  00 00                                    align 04h
     138     138  0 +  0000028C  56 61 6C 69 64 61 74             @CBE19  db "ValidateVSec2( child %p)"
                                 65 56 53 65 63 32 28
                                 20 63 68 69 6C 64 20
                                 25 70 29
     139     139  0 +  000002A4  00                               db 0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    5
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     140     140  0 +  000002A5  00 00 00                                 align 04h
     141     141  0 +  000002A8  6D 65 6D 6F 72 79 20             @CBE20  db "memory problem, can't va"
                                 70 72 6F 62 6C 65 6D
                                 2C 20 63 61 6E 27 74
                                 20 76 61
     142     142  0 +  000002C0  6C 69 64 61 74 65 20             db "lidate child",0h
                                 63 68 69 6C 64 00
     143     143  0 +  000002CD  00 00 00                                 align 04h
     144     144  0 +  000002D0  72 65 61 64 20 65 72             @CBE21  db "read error, can't valida"
                                 72 6F 72 2C 20 63 61
                                 6E 27 74 20 76 61 6C
                                 69 64 61
     145     145  0 +  000002E8  74 65 20 63 68 69 6C             db "te child",0h
                                 64 00
     146     146  0 +  000002F1  00 00 00                                 align 04h
     147     147  0 +  000002F4  56 52 41 49 44 44 45             @CBE22  db "VRAIDDEVICE2    ",0h
                                 56 49 43 45 32 20 20
                                 20 20 00
     148     148  0 +  00000305  00 00 00                                 align 04h
     149     149  0 +  00000308  43 52 43 20 65 72 72             @CBE23  db "CRC error in VRAIDDEVICE"
                                 6F 72 20 69 6E 20 56
                                 52 41 49 44 44 45 56
                                 49 43 45
     150     150  0 +  00000320  32 20 73 65 63 74 6F             db "2 sector (%#x, %#x)",0h
                                 72 20 28 25 23 78 2C
                                 20 25 23 78 29 00
     151     151  0 +  00000334  4D 49 52 52 4F 52 20             @CBE24  db "MIRROR creation delayed",0h
                                 63 72 65 61 74 69 6F
                                 6E 20 64 65 6C 61 79
                                 65 64 00
     152     152  0 +  0000034C  6E 6F 20 56 52 41 49             @CBE25  db "no VRAID partition on dr"
                                 44 20 70 61 72 74 69
                                 74 69 6F 6E 20 6F 6E
                                 20 64 72
     153     153  0 +  00000364  69 76 65 20 25 75 00             db "ive %u",0h
     154     154  0 +  0000036B  00                                       align 04h
     155     155  0 +  0000036C  66 6F 75 6E 64 20 56             @CBE26  db "found VRAID partition on"
                                 52 41 49 44 20 70 61
                                 72 74 69 74 69 6F 6E
                                 20 6F 6E
     156     156  0 +  00000384  20 64 72 69 76 65 20             db " drive %u, size %lu",0h
                                 25 75 2C 20 73 69 7A
                                 65 20 25 6C 75 00
     157     157  0 +  00000398  72 65 61 64 20 65 72             @CBE27  db "read error %lu, device i"
                                 72 6F 72 20 25 6C 75
                                 2C 20 64 65 76 69 63
                                 65 20 69
     158     158  0 +  000003B0  67 6E 6F 72 65 64 00             db "gnored",0h
     159     159  0 +  000003B7  00                                       align 04h
     160     160  0 +  000003B8  56 52 41 49 44 44 45             @CBE28  db "VRAIDDEVICE     ",0h
                                 56 49 43 45 20 20 20
                                 20 20 00
     161     161  0 +  000003C9  00 00 00                                 align 04h
     162     162  0 +  000003CC  25 73 20 61 72 65 61             @CBE29  db "%s area (start %lu, size"


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    6
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


                                 20 28 73 74 61 72 74
                                 20 25 6C 75 2C 20 73
                                 69 7A 65
     163     163  0 +  000003E4  20 25 6C 75 29 2C 20             db " %lu), PT %lu, EXT %lu",0h
                                 50 54 20 25 6C 75 2C
                                 20 45 58 54 20 25 6C
                                 75 00
     164     164  0 +  000003FB  00                                       align 04h
     165     165  0 +  000003FC  53 63 61 6E 45 78 74             @CBE30  db "ScanExtAllocated(%lu, %l"
                                 41 6C 6C 6F 63 61 74
                                 65 64 28 25 6C 75 2C
                                 20 25 6C
     166     166  0 +  00000414  75 29 00                         db "u)",0h
     167     167  0 +  00000417  00                                       align 04h
     168     168  0 +  00000418  53 63 61 6E 45 78 74             @CBE31  db "ScanExtAllocated - found"
                                 41 6C 6C 6F 63 61 74
                                 65 64 20 2D 20 66 6F
                                 75 6E 64
     169     169  0 +  00000430  00                               db 0h
     170     170  0 +  00000431  00 00 00                                 align 04h
     171     171  0 +  00000434  46 69 6E 64 46 72 65             @CBE32  db "FindFreeExtSpace(%lu, %l"
                                 65 45 78 74 53 70 61
                                 63 65 28 25 6C 75 2C
                                 20 25 6C
     172     172  0 +  0000044C  75 29 00                         db "u)",0h
     173     173  0 +  0000044F  00                                       align 04h
     174     174  0 +  00000450  46 69 6E 64 46 72 65             @CBE33  db "FindFreeExtSpace - found"
                                 65 45 78 74 53 70 61
                                 63 65 20 2D 20 66 6F
                                 75 6E 64
     175     175  0 +  00000468  20 75 73 65 64 00                db " used",0h
     176     176  0 +  0000046E  00 00                                    align 04h
     177     177  0 +  00000470  46 69 6E 64 46 72 65             @CBE34  db "FindFreeSpace(%lu): no p"
                                 65 53 70 61 63 65 28
                                 25 6C 75 29 3A 20 6E
                                 6F 20 70
     178     178  0 +  00000488  61 72 74 69 74 69 6F             db "artition entry available"
                                 6E 20 65 6E 74 72 79
                                 20 61 76 61 69 6C 61
                                 62 6C 65
     179     179  0 +  000004A0  00                               db 0h
     180     180  0 +  000004A1  00 00 00                                 align 04h
     181     181  0 +  000004A4  46 69 6E 64 46 72 65             @CBE35  db "FindFreeSpace - found fr"
                                 65 53 70 61 63 65 20
                                 2D 20 66 6F 75 6E 64
                                 20 66 72
     182     182  0 +  000004BC  65 65 00                         db "ee",0h
     183     183  0 +  000004BF  00                                       align 04h
     184     184  0 +  000004C0  46 69 6E 64 46 72 65             @CBE36  db "FindFreeSpace - found",0h
                                 65 53 70 61 63 65 20
                                 2D 20 66 6F 75 6E 64
                                 00
     185     185  0 +  000004D6  00 00                                    align 04h
     186     186  0 +  000004D8  46 69 6E 64 46 72 65             @CBE37  db "FindFreeSpace - rc %lu",0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    7
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


                                 65 53 70 61 63 65 20
                                 2D 20 72 63 20 25 6C
                                 75 00
     187     187  0 +  000004EF  00                                       align 04h
     188     188  0 +  000004F0  46 69 6E 64 46 72 65             @CBE38  db "FindFreeSpace(%lu, %lu)",0h
                                 65 53 70 61 63 65 28
                                 25 6C 75 2C 20 25 6C
                                 75 29 00
     189     189  0 +  00000508  43 72 65 61 74 65 4C             @CBE39  db "CreateLogPartition",0h
                                 6F 67 50 61 72 74 69
                                 74 69 6F 6E 00
     190     190  0 +  0000051B  00                                       align 04h
     191     191  0 +  0000051C  73 74 61 72 74 20 25             @CBE40  db "start %lu, size %lu",0h
                                 6C 75 2C 20 73 69 7A
                                 65 20 25 6C 75 00
     192     192  0 +  00000530  74 61 62 6C 65 20 25             @CBE41  db "table %lu",0h
                                 6C 75 00
     193     193  0 +  0000053A  00 00                                    align 04h
     194     194  0 +  0000053C  69 6E 76 61 6C 69 64             @CBE42  db "invalid partition entry "
                                 20 70 61 72 74 69 74
                                 69 6F 6E 20 65 6E 74
                                 72 79 20
     195     195  0 +  00000554  25 64 20 69 6E 20 73             db "%d in sector %lu",0h
                                 65 63 74 6F 72 20 25
                                 6C 75 00
     196     196  0 +  00000565  00 00 00                                 align 04h
     197     197  0 +  00000568  43 72 65 61 74 65 50             @CBE43  db "CreatePriPartition",0h
                                 72 69 50 61 72 74 69
                                 74 69 6F 6E 00
     198     198  0 +  0000057B  00                                       align 04h
     199     199  0 +  0000057C  56 52 41 49 44 20 70             @CBE44  db "VRAID partition already "
                                 61 72 74 69 74 69 6F
                                 6E 20 61 6C 72 65 61
                                 64 79 20
     200     200  0 +  00000594  74 68 65 72 65 2C 20             db "there, stopping",0h
                                 73 74 6F 70 70 69 6E
                                 67 00
     201     201  0 +  000005A4  4E 6F 20 72 6F 6F 6D             @CBE45  db "No room on disk, abortin"
                                 20 6F 6E 20 64 69 73
                                 6B 2C 20 61 62 6F 72
                                 74 69 6E
     202     202  0 +  000005BC  67 00                            db "g",0h
     203     203  0 +  000005BE  00 00                                    align 04h
     204     204  0 +  000005C0  54 68 65 72 65 20 69             @CBE46  db "There is no room on requ"
                                 73 20 6E 6F 20 72 6F
                                 6F 6D 20 6F 6E 20 72
                                 65 71 75
     205     205  0 +  000005D8  65 73 74 65 64 20 64             db "ested disk to create a V"
                                 69 73 6B 20 74 6F 20
                                 63 72 65 61 74 65 20
                                 61 20 56
     206     206  0 +  000005F0  52 41 49 44 20 70 61             db "RAID partition.",0h
                                 72 74 69 74 69 6F 6E
                                 2E 00


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    8
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     207     207  0 +  00000600  43 72 65 61 74 65 50             @CBE47  db "CreatePhysdev: user abor"
                                 68 79 73 64 65 76 3A
                                 20 75 73 65 72 20 61
                                 62 6F 72
     208     208  0 +  00000618  74 65 64 00                      db "ted",0h
     209     209  0 +  0000061C  44 65 76 53 63 61 6E             @CBE48  db "DevScan",0h
                                 00
     210     210  0 +  00000624  43 72 65 61 74 65 50             @CBE49  db "CreatePhysdev: can't cle"
                                 68 79 73 64 65 76 3A
                                 20 63 61 6E 27 74 20
                                 63 6C 65
     211     211  0 +  0000063C  61 72 20 53 45 43 5F             db "ar SEC_PHYSDEV- rc %lu",0h
                                 50 48 59 53 44 45 56
                                 2D 20 72 63 20 25 6C
                                 75 00
     212     212  0 +  00000653  00                                       align 04h
     213     213  0 +  00000654  57 4D 5F 43 52 45 41             @CBE50  db "WM_CREATE -> default",0h
                                 54 45 20 2D 3E 20 64
                                 65 66 61 75 6C 74 00
     214     214  0 +  00000669  00 00 00                                 align 04h
     215     215  0 +  0000066C  63 6F 75 6C 64 6E 27             @CBE51  db "couldn't determine host "
                                 74 20 64 65 74 65 72
                                 6D 69 6E 65 20 68 6F
                                 73 74 20
     216     216  0 +  00000684  69 64 00                         db "id",0h
     217     217  0 +  00000687  00                                       align 04h
     218     218  0 +  00000688  57 4D 5F 43 4C 4F 53             @CBE52  db "WM_CLOSE",0h
                                 45 00
     219     219  0 +  00000691  00 00 00                                 align 04h
     220     220  0 +  00000694  57 55 4D 5F 53 54 41             @CBE53  db "WUM_START",0h
                                 52 54 00
     221     221  0 +  0000069E  00 00                                    align 04h
     222     222  0 +  000006A0  57 55 4D 5F 4D 4B 50             @CBE54  db "WUM_MKPDEV",0h
                                 44 45 56 00
     223     223  0 +  000006AB  00                                       align 04h
     224     224  0 +  000006AC  57 55 4D 5F 44 45 4C             @CBE55  db "WUM_DELPDEV",0h
                                 50 44 45 56 00
     225     225  0 +  000006B8  4D 61 6B 65 20 73 75             @CBE56  db "Make sure you delete the"
                                 72 65 20 79 6F 75 20
                                 64 65 6C 65 74 65 20
                                 74 68 65
     226     226  0 +  000006D0  20 56 52 41 49 44 20             db " VRAID partition by hand"
                                 70 61 72 74 69 74 69
                                 6F 6E 20 62 79 20 68
                                 61 6E 64
     227     227  0 +  000006E8  20 61 66 74 65 72 20             db " after reboot.",0ah,"Use the c"
                                 72 65 62 6F 6F 74 2E
                                 0A 55 73 65 20 74 68
                                 65 20 63
     228     228  0 +  00000700  6F 6E 74 65 78 74 20             db "ontext menu of the drive"
                                 6D 65 6E 75 20 6F 66
                                 20 74 68 65 20 64 72
                                 69 76 65
     229     229  0 +  00000718  73 20 66 6F 6C 64 65             db "s folder for this purpos"


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:    9
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


                                 72 20 66 6F 72 20 74
                                 68 69 73 20 70 75 72
                                 70 6F 73
     230     230  0 +  00000730  65 2E 00                         db "e.",0h
     231     231  0 +  00000733  00                                       align 04h
     232     232  0 +  00000734  57 55 4D 5F 44 45 56             @CBE57  db "WUM_DEVTREE",0h
                                 54 52 45 45 00
     233     233  0 +  00000740  57 55 4D 5F 44 45 4C             @CBE58  db "WUM_DELDRV",0h
                                 44 52 56 00
     234     234  0 +  0000074B  00                                       align 04h
     235     235  0 +  0000074C  57 55 4D 5F 43 4C 4F             @CBE59  db "WUM_CLOSEDEV",0h
                                 53 45 44 45 56 00
     236     236  0 +  00000759  00 00 00                                 align 04h
     237     237  0 +  0000075C  57 55 4D 5F 52 45 4D             @CBE60  db "WUM_REMCHILD",0h
                                 43 48 49 4C 44 00
     238     238  0 +  00000769  00 00 00                                 align 04h
     239     239  0 +  0000076C  57 69 6E 49 6E 69 74             @CBE61  db "WinInitialize failed!?!",0h
                                 69 61 6C 69 7A 65 20
                                 66 61 69 6C 65 64 21
                                 3F 21 00
     240     240  0 +  00000784  57 69 6E 43 72 65 61             @CBE62  db "WinCreateMsgQueue - erro"
                                 74 65 4D 73 67 51 75
                                 65 75 65 20 2D 20 65
                                 72 72 6F
     241     241  0 +  0000079C  72 20 25 23 78 00                db "r %#x",0h
     242     242  0 +  000007A2  00 00                                    align 04h
     243     243  0 +  000007A4  44 72 76 73 63 61 6E             @CBE63  db "DrvscanWindow",0h
                                 57 69 6E 64 6F 77 00
     244     244  0 +  000007B2  00 00                                    align 04h
     245     245  0 +  000007B4  57 69 6E 52 65 67 69             @CBE64  db "WinRegisterClass - error"
                                 73 74 65 72 43 6C 61
                                 73 73 20 2D 20 65 72
                                 72 6F 72
     246     246  0 +  000007CC  20 25 23 78 00                   db " %#x",0h
     247     247  0 +  000007D1  00 00 00                                 align 04h
     248     248  0 +  000007D4  57 69 6E 43 72 65 61             @CBE65  db "WinCreateWindow - error "
                                 74 65 57 69 6E 64 6F
                                 77 20 2D 20 65 72 72
                                 6F 72 20
     249     249  0 +  000007EC  25 23 78 00                      db "%#x",0h
     250     250  0 +  000007F0  57 69 6E 53 65 74 57             @CBE66  db "WinSetWindowPtr failed -"
                                 69 6E 64 6F 77 50 74
                                 72 20 66 61 69 6C 65
                                 64 20 2D
     251     251  0 +  00000808  20 65 72 72 6F 72 20             db " error %#",0h
                                 25 23 00
     252     252  0 +  00000812  00 00                                    align 04h
     253     253  0 +  00000814  44 72 76 53 63 61 6E             @CBE67  db "DrvScanThread: stopped",0h
                                 54 68 72 65 61 64 3A
                                 20 73 74 6F 70 70 65
                                 64 00
     254     254  0 +  0000082B  00                                       align 04h
     255     255  0 +  0000082C  24 49 64 3A 20 64 72             @1vcid  db "$Id: drvscan.cpp,v 2.5 2"
                                 76 73 63 61 6E 2E 63


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   10
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


                                 70 70 2C 76 20 32 2E
                                 35 20 32
     256     256  0 +  00000844  30 30 30 2F 30 34 2F             db "000/04/15 23:50:12 vitus"
                                 31 35 20 32 33 3A 35
                                 30 3A 31 32 20 76 69
                                 74 75 73
     257     257  0 +  0000085C  20 45 78 70 20 24 00             db " Exp $",0h
     258     258  0 +  00000863                                   CONST32_RO      ends
     259     259  0 +                                             BSS32   segment
     260     260  0 +  00000000  0000                             usHostId        dw 0h
     261     261  0 +  00000002  00 00                                    align 04h
     262     262  0 +  00000004  0300 * ( 00 )                    @3ahsOs2Devid   db 0300h DUP (0h)
     263     263  0 +  00000304                                   BSS32   ends
     264     264  0 +                                             EH_DATA segment
     265     265  0 +  00000000  AD DE EF BE                      @59__fsm_tab    db 0adh,0deh,0efh,0beh
     266     266  0 +  00000004  01 00 00 00                              db 01h,0h,0h,0h
     267     267  0 +  00000008  FFFFFFF0                                 dd -010h
     268     268  0 +  0000000C  00000000:E                               dd offset FLAT:__dl__FPv
     269     269  0 +  00000010  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     270     270  0 +  00000014  2C 00 00 00                              db ",",0h,0h,0h
     271     271  0 +  00000018  00 00                                    db 0h,0h
     272     272  0 +  0000001A  00 00                                    db 0h,0h
     273     273  0 +  0000001C  AD DE EF BE                      @7d__fsm_tab    db 0adh,0deh,0efh,0beh
     274     274  0 +  00000020  01 00 00 00                              db 01h,0h,0h,0h
     275     275  0 +  00000024  FFFFFFF0                                 dd -010h
     276     276  0 +  00000028  00000000:E                               dd offset FLAT:__dl__FPv
     277     277  0 +  0000002C  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     278     278  0 +  00000030  20 00 00 00                              db " ",0h,0h,0h
     279     279  0 +  00000034  00 00                                    db 0h,0h
     280     280  0 +  00000036  00 00                                    db 0h,0h
     281     281  0 +  00000038  AD DE EF BE                      @b5__fsm_tab    db 0adh,0deh,0efh,0beh
     282     282  0 +  0000003C  04 00 00 00                              db 04h,0h,0h,0h
     283     283  0 +  00000040  FFFFFFF0                                 dd -010h
     284     284  0 +  00000044  00000000:E                               dd offset FLAT:__dl__FPv
     285     285  0 +  00000048  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     286     286  0 +  0000004C  30 01 00 00                              db "0",01h,0h,0h
     287     287  0 +  00000050  00 00                                    db 0h,0h
     288     288  0 +  00000052  00 00                                    db 0h,0h
     289     289  0 +  00000054  FFFFFFEC                                 dd -014h
     290     290  0 +  00000058  00000000:E                               dd offset FLAT:__dl__FPv
     291     291  0 +  0000005C  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     292     292  0 +  00000060  30 01 00 00                              db "0",01h,0h,0h
     293     293  0 +  00000064  00 00                                    db 0h,0h
     294     294  0 +  00000066  00 00                                    db 0h,0h
     295     295  0 +  00000068  FFFFFFE8                                 dd -018h
     296     296  0 +  0000006C  00000000:E                               dd offset FLAT:__dl__FPv
     297     297  0 +  00000070  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     298     298  0 +  00000074  30 00 00 00                              db "0",0h,0h,0h
     299     299  0 +  00000078  00 00                                    db 0h,0h
     300     300  0 +  0000007A  00 00                                    db 0h,0h
     301     301  0 +  0000007C  FFFFFFE4                                 dd -01ch
     302     302  0 +  00000080  00000000:E                               dd offset FLAT:__dl__FPv
     303     303  0 +  00000084  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     304     304  0 +  00000088  18 00 00 00                              db 018h,0h,0h,0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   11
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     305     305  0 +  0000008C  00 00                                    db 0h,0h
     306     306  0 +  0000008E  00 00                                    db 0h,0h
     307     307  0 +  00000090  AD DE EF BE                      @ea__fsm_tab    db 0adh,0deh,0efh,0beh
     308     308  0 +  00000094  02 00 00 00                              db 02h,0h,0h,0h
     309     309  0 +  00000098  FFFFFFF0                                 dd -010h
     310     310  0 +  0000009C  00000000:E                               dd offset FLAT:__dl__FPv
     311     311  0 +  000000A0  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     312     312  0 +  000000A4  34 01 00 00                              db "4",01h,0h,0h
     313     313  0 +  000000A8  00 00                                    db 0h,0h
     314     314  0 +  000000AA  00 00                                    db 0h,0h
     315     315  0 +  000000AC  FFFFFFEC                                 dd -014h
     316     316  0 +  000000B0  00000000:E                               dd offset FLAT:__dl__FPv
     317     317  0 +  000000B4  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     318     318  0 +  000000B8  18 00 00 00                              db 018h,0h,0h,0h
     319     319  0 +  000000BC  00 00                                    db 0h,0h
     320     320  0 +  000000BE  00 00                                    db 0h,0h
     321     321  0 +  000000C0  AD DE EF BE                      @109__fsm_tab   db 0adh,0deh,0efh,0beh
     322     322  0 +  000000C4  01 00 00 00                              db 01h,0h,0h,0h
     323     323  0 +  000000C8  FFFFFDD8                                 dd -0228h
     324     324  0 +  000000CC  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     325     325  0 +  000000D0  01 00 00 00                              db 01h,0h,0h,0h
     326     326  0 +  000000D4  1C 02 00 00                              db 01ch,02h,0h,0h
     327     327  0 +  000000D8  00 00                                    db 0h,0h
     328     328  0 +  000000DA  00 00                                    db 0h,0h
     329     329  0 +  000000DC  AD DE EF BE                      @128__fsm_tab   db 0adh,0deh,0efh,0beh
     330     330  0 +  000000E0  02 00 00 00                              db 02h,0h,0h,0h
     331     331  0 +  000000E4  FFFFFFF0                                 dd -010h
     332     332  0 +  000000E8  00000000:E                               dd offset FLAT:__dl__FPv
     333     333  0 +  000000EC  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     334     334  0 +  000000F0  20 00 00 00                              db " ",0h,0h,0h
     335     335  0 +  000000F4  00 00                                    db 0h,0h
     336     336  0 +  000000F6  00 00                                    db 0h,0h
     337     337  0 +  000000F8  FFFFFFEC                                 dd -014h
     338     338  0 +  000000FC  00000000:E                               dd offset FLAT:__dl__FPv
     339     339  0 +  00000100  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     340     340  0 +  00000104  30 00 00 00                              db "0",0h,0h,0h
     341     341  0 +  00000108  00 00                                    db 0h,0h
     342     342  0 +  0000010A  00 00                                    db 0h,0h
     343     343  0 +  0000010C  AD DE EF BE                      @14f__fsm_tab   db 0adh,0deh,0efh,0beh
     344     344  0 +  00000110  01 00 00 00                              db 01h,0h,0h,0h
     345     345  0 +  00000114  FFFFFDD8                                 dd -0228h
     346     346  0 +  00000118  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     347     347  0 +  0000011C  01 00 00 00                              db 01h,0h,0h,0h
     348     348  0 +  00000120  1C 02 00 00                              db 01ch,02h,0h,0h
     349     349  0 +  00000124  00 00                                    db 0h,0h
     350     350  0 +  00000126  00 00                                    db 0h,0h
     351     351  0 +  00000128  AD DE EF BE                      @174__fsm_tab   db 0adh,0deh,0efh,0beh
     352     352  0 +  0000012C  01 00 00 00                              db 01h,0h,0h,0h
     353     353  0 +  00000130  FFFFFDD8                                 dd -0228h
     354     354  0 +  00000134  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     355     355  0 +  00000138  01 00 00 00                              db 01h,0h,0h,0h
     356     356  0 +  0000013C  1C 02 00 00                              db 01ch,02h,0h,0h
     357     357  0 +  00000140  00 00                                    db 0h,0h
     358     358  0 +  00000142  00 00                                    db 0h,0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   12
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     359     359  0 +  00000144  AD DE EF BE                      @190__fsm_tab   db 0adh,0deh,0efh,0beh
     360     360  0 +  00000148  01 00 00 00                              db 01h,0h,0h,0h
     361     361  0 +  0000014C  FFFFFDD8                                 dd -0228h
     362     362  0 +  00000150  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     363     363  0 +  00000154  01 00 00 00                              db 01h,0h,0h,0h
     364     364  0 +  00000158  1C 02 00 00                              db 01ch,02h,0h,0h
     365     365  0 +  0000015C  00 00                                    db 0h,0h
     366     366  0 +  0000015E  00 00                                    db 0h,0h
     367     367  0 +  00000160  AD DE EF BE                      @1b8__fsm_tab   db 0adh,0deh,0efh,0beh
     368     368  0 +  00000164  03 00 00 00                              db 03h,0h,0h,0h
     369     369  0 +  00000168  FFFFFDD8                                 dd -0228h
     370     370  0 +  0000016C  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     371     371  0 +  00000170  01 00 00 00                              db 01h,0h,0h,0h
     372     372  0 +  00000174  1C 02 00 00                              db 01ch,02h,0h,0h
     373     373  0 +  00000178  00 00                                    db 0h,0h
     374     374  0 +  0000017A  00 00                                    db 0h,0h
     375     375  0 +  0000017C  FFFFFBBC                                 dd -0444h
     376     376  0 +  00000180  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     377     377  0 +  00000184  01 00 00 00                              db 01h,0h,0h,0h
     378     378  0 +  00000188  1C 02 00 00                              db 01ch,02h,0h,0h
     379     379  0 +  0000018C  00 00                                    db 0h,0h
     380     380  0 +  0000018E  01 00                                    db 01h,0h
     381     381  0 +  00000190  FFFFF9A0                                 dd -0660h
     382     382  0 +  00000194  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     383     383  0 +  00000198  01 00 00 00                              db 01h,0h,0h,0h
     384     384  0 +  0000019C  1C 02 00 00                              db 01ch,02h,0h,0h
     385     385  0 +  000001A0  00 00                                    db 0h,0h
     386     386  0 +  000001A2  01 00                                    db 01h,0h
     387     387  0 +  000001A4  AD DE EF BE                      @1cb__fsm_tab   db 0adh,0deh,0efh,0beh
     388     388  0 +  000001A8  01 00 00 00                              db 01h,0h,0h,0h
     389     389  0 +  000001AC  FFFFFDD8                                 dd -0228h
     390     390  0 +  000001B0  00000000:R                               dd offset FLAT:__dftdt__9PartTableFv
     391     391  0 +  000001B4  01 00 00 00                              db 01h,0h,0h,0h
     392     392  0 +  000001B8  1C 02 00 00                              db 01ch,02h,0h,0h
     393     393  0 +  000001BC  00 00                                    db 0h,0h
     394     394  0 +  000001BE  00 00                                    db 0h,0h
     395     395  0 +  000001C0  AD DE EF BE                      @1ef__fsm_tab   db 0adh,0deh,0efh,0beh
     396     396  0 +  000001C4  02 00 00 00                              db 02h,0h,0h,0h
     397     397  0 +  000001C8  FFFFFFF0                                 dd -010h
     398     398  0 +  000001CC  00000000:E                               dd offset FLAT:__dl__FPv
     399     399  0 +  000001D0  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     400     400  0 +  000001D4  30 00 00 00                              db "0",0h,0h,0h
     401     401  0 +  000001D8  00 00                                    db 0h,0h
     402     402  0 +  000001DA  00 00                                    db 0h,0h
     403     403  0 +  000001DC  FFFFFFEC                                 dd -014h
     404     404  0 +  000001E0  00000000:E                               dd offset FLAT:__dl__FPv
     405     405  0 +  000001E4  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     406     406  0 +  000001E8  30 00 00 00                              db "0",0h,0h,0h
     407     407  0 +  000001EC  00 00                                    db 0h,0h
     408     408  0 +  000001EE  00 00                                    db 0h,0h
     409     409  0 +  000001F0  AD DE EF BE                      @227__fsm_tab   db 0adh,0deh,0efh,0beh
     410     410  0 +  000001F4  01 00 00 00                              db 01h,0h,0h,0h
     411     411  0 +  000001F8  FFFFFFF0                                 dd -010h
     412     412  0 +  000001FC  00000000:E                               dd offset FLAT:__dl__FPv


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   13
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     413     413  0 +  00000200  FD FF FF FF                              db 0fdh,0ffh,0ffh,0ffh
     414     414  0 +  00000204  20 00 00 00                              db " ",0h,0h,0h
     415     415  0 +  00000208  00 00                                    db 0h,0h
     416     416  0 +  0000020A  00 00                                    db 0h,0h
     417     417  0 +  0000020C                                   EH_DATA ends
     418     418  0 +                                             CODE32  segment
     419     419  0 +
     420     420  0 +                                             ; 2176 DrvscanThread(void *dummy)
     421     421  0 +
     422     422  0 +                                                     public DrvscanThread
     423     423  0 +  00000000                                   DrvscanThread   proc
     424     424  0 +  00000000  55                                       push    ebp
     425     425  0 +
     426     426  0 +                                             ; 2187  memset(ahsOs2Devid, 0, sizeof(ahsOs2Devid));
     427     427  0 +  00000001  B9 00000300                              mov     ecx,0300h
     428     428  0 +
     429     429  0 +                                             ; 2176 DrvscanThread(void *dummy)
     430     430  0 +  00000006  8B EC                                    mov     ebp,esp
     431     431  0 +  00000008  53                                       push    ebx
     432     432  0 +  00000009  8B D8                                    mov     ebx,eax
     433     433  0 +  0000000B  57                                       push    edi
     434     434  0 +
     435     435  0 +                                             ; 2187  memset(ahsOs2Devid, 0, sizeof(ahsOs2Devid));
     436     436  0 +  0000000C  33 D2                                    xor     edx,edx
     437     437  0 +
     438     438  0 +                                             ; 2176 DrvscanThread(void *dummy)
     439     439  0 +  0000000E  56                                       push    esi
     440     440  0 +
     441     441  0 +                                             ; 2187  memset(ahsOs2Devid, 0, sizeof(ahsOs2Devid));
     442     442  0 +  0000000F  B8 00000004:R                            mov     eax,offset FLAT:@3ahsOs2Devid
     443     443  0 +
     444     444  0 +                                             ; 2176 DrvscanThread(void *dummy)
     445     445  0 +  00000014  83 EC 3C                                 sub     esp,03ch
     446     446  0 +
     447     447  0 +                                             ; 2178     PTHR_DRVSCAN dta = (PTHR_DRVSCAN)dummy;
     448     448  0 +  00000017  89 5D [E4]                               mov     [ebp-01ch],ebx; dta
     449     449  0 +
     450     450  0 +                                             ; 2187  memset(ahsOs2Devid, 0, sizeof(ahsOs2Devid));
     451     451  0 +  0000001A  E8 00000000:E                            call    memset
     452     452  0 +
     453     453  0 +                                             ; 2189  work = new WORK;
     454     454  0 +  0000001F  B8 00000020                              mov     eax,020h
     455     455  0 +  00000024  E8 00000000:E                            call    __nw__FUi
     456     456  0 +  00000029  8B F8                                    mov     edi,eax
     457     457  0 +
     458     458  0 +                                             ; 2190  memset(work, 0, sizeof(*work));
     459     459  0 +  0000002B  B9 00000020                              mov     ecx,020h
     460     460  0 +  00000030  33 D2                                    xor     edx,edx
     461     461  0 +  00000032  E8 00000000:E                            call    memset
     462     462  0 +  00000037  8B C3                                    mov     eax,ebx
     463     463  0 +
     464     464  0 +                                             ; 2191  work->self = dta;
     465     465  0 +  00000039  89 07                                    mov     [edi],eax
     466     466  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   14
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     467     467  0 +                                             ; 2193  work->apOs2Dsk = new VOS2Disk *[MAXDRIVES];
     468     468  0 +  0000003B  B8 00000100                              mov     eax,0100h
     469     469  0 +  00000040  E8 00000000:E                            call    __vn__FUi
     470     470  0 +  00000045  89 47 [08]                               mov     [edi+08h],eax
     471     471  0 +
     472     472  0 +                                             ; 2194  memset(work->apOs2Dsk, 0, MAXDRIVES * sizeof(VOS2Disk *));
     473     473  0 +  00000048  B9 00000100                              mov     ecx,0100h
     474     474  0 +  0000004D  33 D2                                    xor     edx,edx
     475     475  0 +  0000004F  E8 00000000:E                            call    memset
     476     476  0 +
     477     477  0 +                                             ; 2196  work->apDskInfo = new VRDev *[MAXDRIVES];
     478     478  0 +  00000054  B8 00000100                              mov     eax,0100h
     479     479  0 +  00000059  E8 00000000:E                            call    __vn__FUi
     480     480  0 +
     481     481  0 +                                             ; 2189  work = new WORK;
     482     482  0 +  0000005E  8B F7                                    mov     esi,edi
     483     483  0 +
     484     484  0 +                                             ; 2196  work->apDskInfo = new VRDev *[MAXDRIVES];
     485     485  0 +  00000060  89 47 [10]                               mov     [edi+010h],eax
     486     486  0 +
     487     487  0 +                                             ; 2197  memset(work->apDskInfo, 0, MAXDRIVES * sizeof(VRDev *));
     488     488  0 +  00000063  B9 00000100                              mov     ecx,0100h
     489     489  0 +  00000068  33 D2                                    xor     edx,edx
     490     490  0 +  0000006A  E8 00000000:E                            call    memset
     491     491  0 +
     492     492  0 +                                             ; 2199  work->apEndPts = new VRDev *[MAXDRIVES];
     493     493  0 +  0000006F  B8 00000100                              mov     eax,0100h
     494     494  0 +  00000074  E8 00000000:E                            call    __vn__FUi
     495     495  0 +
     496     496  0 +                                             ; 2201  if( (work->hab = WinInitialize(0)) )
     497     497  0 +  00000079  6A 00                                    push    0h
     498     498  0 +
     499     499  0 +                                             ; 2199  work->apEndPts = new VRDev *[MAXDRIVES];
     500     500  0 +  0000007B  89 47 [18]                               mov     [edi+018h],eax
     501     501  0 +
     502     502  0 +                                             ; 2201  if( (work->hab = WinInitialize(0)) )
     503     503  0 +  0000007E  E8 00000000:E                            call    WinInitialize
     504     504  0 +  00000083  83 C4 04                                 add     esp,04h
     505     505  0 +  00000086  89 47 [04]                               mov     [edi+04h],eax
     506     506  0 +  00000089  83 7F [04] 00                            cmp     dword ptr [edi+04h],0h
     507     507  0 +  0000008D  0F 85 000000A9:R                         jne     @BLBL463
     508     508  0 +
     509     509  0 +                                             ; 2203      Verbose(0, "DrvScan", "WinInitialize failed?");
     510     510  0 +  00000093  33 C0                                    xor     eax,eax
     511     511  0 +  00000095  B9 0000076C:R                            mov     ecx,offset FLAT:@CBE61
     512     512  0 +  0000009A  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
     513     513  0 +  0000009F  E8 00000000:E                            call    Verbose
     514     514  0 +
     515     515  0 +                                             ; 2204      break;
     516     516  0 +  000000A4  E9 00000246:R                            jmp     @BLBL464
     517     517  0 +  000000A9                                   @BLBL463:
     518     518  0 +
     519     519  0 +                                             ; 2207  if( (hmq = WinCreateMsgQueue(work->hab, 0)) )
     520     520  0 +  000000A9  6A 00                                    push    0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   15
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     521     521  0 +  000000AB  8B DE                                    mov     ebx,esi
     522     522  0 +  000000AD  FF 73 [04]                               push    dword ptr [ebx+04h]
     523     523  0 +  000000B0  E8 00000000:E                            call    WinCreateMsgQueue
     524     524  0 +  000000B5  83 C4 08                                 add     esp,08h
     525     525  0 +  000000B8  89 45 [E8]                               mov     [ebp-018h],eax; hmq
     526     526  0 +  000000BB  85 C0                                    test    eax,eax
     527     527  0 +  000000BD  0F 85 000000E8:R                         jne     @BLBL465
     528     528  0 +
     529     529  0 +                                             ; 2209      Verbose(0, "DrvScan", "WinCreateMsgQueue - error %#x",
     530     530  0 +  000000C3  FF 73 [04]                               push    dword ptr [ebx+04h]
     531     531  0 +  000000C6  E8 00000000:E                            call    WinGetLastError
     532     532  0 +  000000CB  50                                       push    eax
     533     533  0 +  000000CC  B9 00000784:R                            mov     ecx,offset FLAT:@CBE62
     534     534  0 +  000000D1  83 EC 0C                                 sub     esp,0ch
     535     535  0 +  000000D4  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
     536     536  0 +  000000D9  33 C0                                    xor     eax,eax
     537     537  0 +  000000DB  E8 00000000:E                            call    Verbose
     538     538  0 +  000000E0  83 C4 14                                 add     esp,014h
     539     539  0 +
     540     540  0 +                                             ; 2211      break;
     541     541  0 +  000000E3  E9 00000246:R                            jmp     @BLBL464
     542     542  0 +  000000E8                                   @BLBL465:
     543     543  0 +
     544     544  0 +                                             ; 2213  WinCancelShutdown(hmq, TRUE);           /* don't want to handle it */
     545     545  0 +  000000E8  6A 01                                    push    01h
     546     546  0 +
     547     547  0 +                                             ; 2215  if( WinRegisterClass(work->hab, WC_DRVSCAN, DrvscanWindowProc,
     548     548  0 +  000000EA  8B DE                                    mov     ebx,esi
     549     549  0 +
     550     550  0 +                                             ; 2213  WinCancelShutdown(hmq, TRUE);           /* don't want to handle it */
     551     551  0 +  000000EC  FF 75 [E8]                               push    dword ptr [ebp-018h];   hmq
     552     552  0 +  000000EF  E8 00000000:E                            call    WinCancelShutdown
     553     553  0 +
     554     554  0 +                                             ; 2215  if( WinRegisterClass(work->hab, WC_DRVSCAN, DrvscanWindowProc,
     555     555  0 +  000000F4  6A 04                                    push    04h
     556     556  0 +  000000F6  6A 00                                    push    0h
     557     557  0 +  000000F8  68 00000274:R                            push    offset FLAT: DrvscanWindowProc
     558     558  0 +  000000FD  68 000007A4:R                            push    offset FLAT:@CBE63
     559     559  0 +  00000102  FF 73 [04]                               push    dword ptr [ebx+04h]
     560     560  0 +  00000105  E8 00000000:E                            call    WinRegisterClass
     561     561  0 +  0000010A  83 C4 1C                                 add     esp,01ch
     562     562  0 +  0000010D  85 C0                                    test    eax,eax
     563     563  0 +  0000010F  0F 85 0000013A:R                         jne     @BLBL466
     564     564  0 +
     565     565  0 +                                             ; 2218      Verbose(0, "DrvSetup", "WinRegisterClass - error %#x",
     566     566  0 +  00000115  FF 73 [04]                               push    dword ptr [ebx+04h]
     567     567  0 +  00000118  E8 00000000:E                            call    WinGetLastError
     568     568  0 +  0000011D  50                                       push    eax
     569     569  0 +  0000011E  B9 000007B4:R                            mov     ecx,offset FLAT:@CBE64
     570     570  0 +  00000123  83 EC 0C                                 sub     esp,0ch
     571     571  0 +  00000126  BA 000000D8:R                            mov     edx,offset FLAT:@CBE9
     572     572  0 +  0000012B  33 C0                                    xor     eax,eax
     573     573  0 +  0000012D  E8 00000000:E                            call    Verbose
     574     574  0 +  00000132  83 C4 14                                 add     esp,014h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   16
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     575     575  0 +
     576     576  0 +                                             ; 2220      break;
     577     577  0 +  00000135  E9 00000246:R                            jmp     @BLBL464
     578     578  0 +  0000013A                                   @BLBL466:
     579     579  0 +
     580     580  0 +                                             ; 2223  hwnd = WinCreateWindow(HWND_OBJECT, WC_DRVSCAN, NULL,
     581     581  0 +  0000013A  6A 00                                    push    0h
     582     582  0 +  0000013C  6A 00                                    push    0h
     583     583  0 +  0000013E  6A 00                                    push    0h
     584     584  0 +  00000140  6A 04                                    push    04h
     585     585  0 +  00000142  6A 00                                    push    0h
     586     586  0 +  00000144  6A 00                                    push    0h
     587     587  0 +  00000146  6A 00                                    push    0h
     588     588  0 +  00000148  6A 00                                    push    0h
     589     589  0 +  0000014A  6A 00                                    push    0h
     590     590  0 +  0000014C  6A 00                                    push    0h
     591     591  0 +  0000014E  6A 00                                    push    0h
     592     592  0 +  00000150  68 000007A4:R                            push    offset FLAT:@CBE63
     593     593  0 +  00000155  6A 02                                    push    02h
     594     594  0 +  00000157  E8 00000000:E                            call    WinCreateWindow
     595     595  0 +  0000015C  83 C4 34                                 add     esp,034h
     596     596  0 +  0000015F  89 45 [EC]                               mov     [ebp-014h],eax; hwnd
     597     597  0 +
     598     598  0 +                                             ; 2230  if( hwnd == NULL )
     599     599  0 +  00000162  85 C0                                    test    eax,eax
     600     600  0 +  00000164  0F 85 00000191:R                         jne     @BLBL467
     601     601  0 +
     602     602  0 +                                             ; 2232      Verbose(0, "DrvScan", "WinCreateWindow - error %#x",
     603     603  0 +  0000016A  8B DE                                    mov     ebx,esi
     604     604  0 +  0000016C  FF 73 [04]                               push    dword ptr [ebx+04h]
     605     605  0 +  0000016F  E8 00000000:E                            call    WinGetLastError
     606     606  0 +  00000174  50                                       push    eax
     607     607  0 +  00000175  B9 000007D4:R                            mov     ecx,offset FLAT:@CBE65
     608     608  0 +  0000017A  83 EC 0C                                 sub     esp,0ch
     609     609  0 +  0000017D  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
     610     610  0 +  00000182  33 C0                                    xor     eax,eax
     611     611  0 +  00000184  E8 00000000:E                            call    Verbose
     612     612  0 +  00000189  83 C4 14                                 add     esp,014h
     613     613  0 +
     614     614  0 +                                             ; 2234      break;
     615     615  0 +  0000018C  E9 00000246:R                            jmp     @BLBL464
     616     616  0 +  00000191                                   @BLBL467:
     617     617  0 +
     618     618  0 +                                             ; 2237  bool = WinSetWindowPtr(hwnd, 0, work);
     619     619  0 +  00000191  8B DE                                    mov     ebx,esi
     620     620  0 +  00000193  53                                       push    ebx
     621     621  0 +  00000194  6A 00                                    push    0h
     622     622  0 +  00000196  FF 75 [EC]                               push    dword ptr [ebp-014h];   hwnd
     623     623  0 +  00000199  E8 00000000:E                            call    WinSetWindowPtr
     624     624  0 +  0000019E  83 C4 0C                                 add     esp,0ch
     625     625  0 +
     626     626  0 +                                             ; 2238  if( bool == FALSE )
     627     627  0 +  000001A1  85 C0                                    test    eax,eax
     628     628  0 +  000001A3  0F 85 000001CE:R                         jne     @BLBL468


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   17
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     629     629  0 +
     630     630  0 +                                             ; 2240      MyMessageBox(0, HWND_DESKTOP,
     631     631  0 +  000001A9  FF 73 [04]                               push    dword ptr [ebx+04h]
     632     632  0 +  000001AC  E8 00000000:E                            call    WinGetLastError
     633     633  0 +  000001B1  50                                       push    eax
     634     634  0 +  000001B2  B9 000007F0:R                            mov     ecx,offset FLAT:@CBE66
     635     635  0 +  000001B7  83 EC 0C                                 sub     esp,0ch
     636     636  0 +  000001BA  BA 00000001                              mov     edx,01h
     637     637  0 +  000001BF  33 C0                                    xor     eax,eax
     638     638  0 +  000001C1  E8 00000000:E                            call    MyMessageBox__FCiCUlPce
     639     639  0 +  000001C6  83 C4 14                                 add     esp,014h
     640     640  0 +
     641     641  0 +                                             ; 2243      break;
     642     642  0 +  000001C9  EB 7B 90 90 90                           jmp     @BLBL464
     643     643  0 +  000001CE                                   @BLBL468:
     644     644  0 +
     645     645  0 +                                             ; 2248  WinPostMsg(hwnd, WUM_START, 0, 0);
     646     646  0 +  000001CE  6A 00                                    push    0h
     647     647  0 +
     648     648  0 +                                             ; 2249  while( WinGetMsg(work->hab, &qmsg, 0L,
     649     649  0 +                                             ; 2249 0, 0) )
     650     650  0 +  000001D0  8B DE                                    mov     ebx,esi
     651     651  0 +
     652     652  0 +                                             ; 2248  WinPostMsg(hwnd, WUM_START, 0, 0);
     653     653  0 +  000001D2  6A 00                                    push    0h
     654     654  0 +  000001D4  68 00001002                              push    01002h
     655     655  0 +  000001D9  FF 75 [EC]                               push    dword ptr [ebp-014h];   hwnd
     656     656  0 +  000001DC  E8 00000000:E                            call    WinPostMsg
     657     657  0 +
     658     658  0 +                                             ; 2249  while( WinGetMsg(work->hab, &qmsg, 0L,
     659     659  0 +                                             ; 2249 0, 0) )
     660     660  0 +  000001E1  6A 00                                    push    0h
     661     661  0 +  000001E3  8D 4D [C4]                               lea     ecx,[ebp-03ch]; qmsg
     662     662  0 +  000001E6  6A 00                                    push    0h
     663     663  0 +  000001E8  6A 00                                    push    0h
     664     664  0 +  000001EA  51                                       push    ecx
     665     665  0 +  000001EB  FF 73 [04]                               push    dword ptr [ebx+04h]
     666     666  0 +  000001EE  E8 00000000:E                            call    WinGetMsg
     667     667  0 +  000001F3  83 C4 24                                 add     esp,024h
     668     668  0 +  000001F6  85 C0                                    test    eax,eax
     669     669  0 +  000001F8  0F 84 00000222:R                         je      @BLBL469
     670     670  0 +  000001FE  8B FB                                    mov     edi,ebx
     671     671  0 +  00000200                                   @BLBL470:
     672     672  0 +
     673     673  0 +                                             ; 2250      WinDispatchMsg(work->hab, &qmsg);
     674     674  0 +  00000200  8D 5D [C4]                               lea     ebx,[ebp-03ch]; qmsg
     675     675  0 +  00000203  53                                       push    ebx
     676     676  0 +  00000204  FF 77 [04]                               push    dword ptr [edi+04h]
     677     677  0 +  00000207  E8 00000000:E                            call    WinDispatchMsg
     678     678  0 +
     679     679  0 +                                             ; 2249  while( WinGetMsg(work->hab, &qmsg, 0L,
     680     680  0 +                                             ; 2249 0, 0) )
     681     681  0 +  0000020C  6A 00                                    push    0h
     682     682  0 +  0000020E  6A 00                                    push    0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   18
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     683     683  0 +  00000210  6A 00                                    push    0h
     684     684  0 +  00000212  53                                       push    ebx
     685     685  0 +  00000213  FF 77 [04]                               push    dword ptr [edi+04h]
     686     686  0 +  00000216  E8 00000000:E                            call    WinGetMsg
     687     687  0 +  0000021B  83 C4 1C                                 add     esp,01ch
     688     688  0 +  0000021E  85 C0                                    test    eax,eax
     689     689  0 +  00000220  75 DE                                    jne     @BLBL470
     690     690  0 +  00000222                                   @BLBL469:
     691     691  0 +
     692     692  0 +                                             ; 2254  WinDestroyWindow(hwnd);
     693     693  0 +  00000222  FF 75 [EC]                               push    dword ptr [ebp-014h];   hwnd
     694     694  0 +
     695     695  0 +                                             ; 2256  WinTerminate(work->hab);
     696     696  0 +  00000225  8B FE                                    mov     edi,esi
     697     697  0 +
     698     698  0 +                                             ; 2254  WinDestroyWindow(hwnd);
     699     699  0 +  00000227  E8 00000000:E                            call    WinDestroyWindow
     700     700  0 +
     701     701  0 +                                             ; 2255  WinDestroyMsgQueue(hmq);
     702     702  0 +  0000022C  FF 75 [E8]                               push    dword ptr [ebp-018h];   hmq
     703     703  0 +  0000022F  E8 00000000:E                            call    WinDestroyMsgQueue
     704     704  0 +
     705     705  0 +                                             ; 2256  WinTerminate(work->hab);
     706     706  0 +  00000234  FF 77 [04]                               push    dword ptr [edi+04h]
     707     707  0 +  00000237  E8 00000000:E                            call    WinTerminate
     708     708  0 +  0000023C  8B C7                                    mov     eax,edi
     709     709  0 +
     710     710  0 +                                             ; 2257  delete work;
     711     711  0 +  0000023E  E8 00000000:E                            call    __dl__FPv
     712     712  0 +  00000243  83 C4 0C                                 add     esp,0ch
     713     713  0 +
     714     714  0 +                                             ; 2259     while(0);
     715     715  0 +  00000246                                   @BLBL464:
     716     716  0 +
     717     717  0 +                                             ; 2262     WinPostMsg(dta->parent, WUM_THREADENDED, dta, 0);
     718     718  0 +  00000246  8B 5D [E4]                               mov     ebx,[ebp-01ch]; dta
     719     719  0 +
     720     720  0 +                                             ; 2261     Verbose(2, "DrvScan", "DrvScanThread: stopped");
     721     721  0 +  00000249  B9 00000814:R                            mov     ecx,offset FLAT:@CBE67
     722     722  0 +  0000024E  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
     723     723  0 +  00000253  B8 00000002                              mov     eax,02h
     724     724  0 +  00000258  E8 00000000:E                            call    Verbose
     725     725  0 +
     726     726  0 +                                             ; 2262     WinPostMsg(dta->parent, WUM_THREADENDED, dta, 0);
     727     727  0 +  0000025D  6A 00                                    push    0h
     728     728  0 +  0000025F  53                                       push    ebx
     729     729  0 +  00000260  68 00001003                              push    01003h
     730     730  0 +  00000265  FF 33                                    push    dword ptr [ebx]
     731     731  0 +  00000267  E8 00000000:E                            call    WinPostMsg
     732     732  0 +
     733     733  0 +                                             ; 2263     return;
     734     734  0 +  0000026C  83 C4 4C                                 add     esp,04ch
     735     735  0 +  0000026F  5E                                       pop     esi
     736     736  0 +  00000270  5F                                       pop     edi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   19
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     737     737  0 +  00000271  5B                                       pop     ebx
     738     738  0 +  00000272  5D                                       pop     ebp
     739     739  0 +  00000273  C3                                       ret
     740     740  0 +  00000274                                   DrvscanThread   endp
     741     741  0 +
     742     742  0 +                                             ; 1941 DrvscanWindowProc(HWND hwnd,ULONG msg,MPARAM mp1,MPARAM mp2)
     743     743  0 +
     744     744  0 +  00000274                                   DrvscanWindowProc       proc
     745     745  0 +  00000274  55                                       push    ebp
     746     746  0 +  00000275  8B EC                                    mov     ebp,esp
     747     747  0 +  00000277  68 00000000:E                            push    offset FLAT: _Exception_CPP
     748     748  0 +  0000027C  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(748:7): Warning ALP4511: Assuming segment width for operand size
     749     749  0 +  00000283  64:89 25 [00000000]                      mov     fs:[0h],esp
     750     750  0 +  0000028A  6A B4                                    push    0ffffffb4h
     751     751  0 +  0000028C  83 EC 44                                 sub     esp,044h
     752     752  0 +
     753     753  0 +                                             ; 1942 {
     754     754  0 +  0000028F  C7 45 [B4] 00000000                      mov     dword ptr [ebp-04ch],0h;        __es
     755     755  0 +
     756     756  0 +                                             ; 1941 DrvscanWindowProc(HWND hwnd,ULONG msg,MPARAM mp1,MPARAM mp2)
     757     757  0 +  00000296  53                                       push    ebx
     758     758  0 +
     759     759  0 +                                             ; 1942 {
     760     760  0 +  00000297  C7 45 [BC]                               mov     dword ptr [ebp-044h],offset FLAT:@227__fsm_tab; __es
                                 000001F0:R
     761     761  0 +
     762     762  0 +                                             ; 1941 DrvscanWindowProc(HWND hwnd,ULONG msg,MPARAM mp1,MPARAM mp2)
     763     763  0 +  0000029E  57                                       push    edi
     764     764  0 +  0000029F  56                                       push    esi
     765     765  0 +
     766     766  0 +                                             ; 1943     WORK * const work = (PWORK)WinQueryWindowPtr(hwnd, 0);
     767     767  0 +  000002A0  6A 00                                    push    0h
     768     768  0 +  000002A2  FF 75 [08]                               push    dword ptr [ebp+08h];    hwnd
     769     769  0 +  000002A5  E8 00000000:E                            call    WinQueryWindowPtr
     770     770  0 +
     771     771  0 +                                             ; 1947     switch( msg )
     772     772  0 +  000002AA  8B 4D [0C]                               mov     ecx,[ebp+0ch];  msg
     773     773  0 +
     774     774  0 +                                             ; 1943     WORK * const work = (PWORK)WinQueryWindowPtr(hwnd, 0);
     775     775  0 +  000002AD  83 C4 08                                 add     esp,08h
     776     776  0 +  000002B0  89 45 [EC]                               mov     [ebp-014h],eax; work
     777     777  0 +
     778     778  0 +                                             ; 1947     switch( msg )
     779     779  0 +  000002B3  81 F9 0000100B                           cmp     ecx,0100bh
     780     780  0 +  000002B9  0F 8C 00000305:R                         jl      @BLBL488
     781     781  0 +  000002BF  0F 84 00000522:R                         je      @BLBL483
     782     782  0 +  000002C5  81 F9 0000100D                           cmp     ecx,0100dh
     783     783  0 +  000002CB  0F 8C 000002F4:R                         jl      @BLBL489
     784     784  0 +  000002D1  0F 84 0000044D:R                         je      @BLBL482
     785     785  0 +  000002D7  81 F9 0000100E                           cmp     ecx,0100eh
     786     786  0 +  000002DD  0F 84 000007BB:R                         je      @BLBL487
     787     787  0 +  000002E3  81 F9 0000100F                           cmp     ecx,0100fh
     788     788  0 +  000002E9  0F 84 0000076E:R                         je      @BLBL486


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   20
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     789     789  0 +  000002EF  E9 00000880:R                            jmp     @BLBL478
     790     790  0 +  000002F4                                   @BLBL489:
     791     791  0 +  000002F4  81 F9 0000100C                           cmp     ecx,0100ch
     792     792  0 +  000002FA  0F 84 0000067F:R                         je      @BLBL485
     793     793  0 +  00000300  E9 00000880:R                            jmp     @BLBL478
     794     794  0 +  00000305                                   @BLBL488:
     795     795  0 +  00000305  83 F9 29                                 cmp     ecx,029h
     796     796  0 +  00000308  0F 8C 00000331:R                         jl      @BLBL490
     797     797  0 +  0000030E  0F 84 0000039E:R                         je      @BLBL480
     798     798  0 +  00000314  81 F9 00001002                           cmp     ecx,01002h
     799     799  0 +  0000031A  0F 84 000003BD:R                         je      @BLBL481
     800     800  0 +  00000320  81 F9 0000100A                           cmp     ecx,0100ah
     801     801  0 +  00000326  0F 84 0000062B:R                         je      @BLBL484
     802     802  0 +  0000032C  E9 00000880:R                            jmp     @BLBL478
     803     803  0 +  00000331                                   @BLBL490:
     804     804  0 +  00000331  83 F9 01                                 cmp     ecx,01h
     805     805  0 +  00000334  0F 85 00000880:R                         jne     @BLBL478
     806     806  0 +  0000033A                                   @BLBL479:
     807     807  0 +
     808     808  0 +                                             ; 1950  Verbose(3, "DrvScan", "WM_CREATE -> default");
     809     809  0 +  0000033A  83 EC 0C                                 sub     esp,0ch
     810     810  0 +  0000033D  BB 00000000:R                            mov     ebx,offset FLAT:@CBE1
     811     811  0 +  00000342  B9 00000654:R                            mov     ecx,offset FLAT:@CBE50
     812     812  0 +  00000347  8B D3                                    mov     edx,ebx
     813     813  0 +  00000349  B8 00000003                              mov     eax,03h
     814     814  0 +  0000034E  E8 00000000:E                            call    Verbose
     815     815  0 +  00000353  83 C4 08                                 add     esp,08h
     816     816  0 +
     817     817  0 +                                             ; 1951  CrcInit(0xA001);                        /* CRC16 table */
     818     818  0 +  00000356  66:B8 A001                               mov     ax,0a001h
     819     819  0 +  0000035A  E8 00000000:E                            call    CrcInit__FUs
     820     820  0 +
     821     821  0 +                                             ; 1952  if( (rc=QueryHostId(&usHostId)) = 0 )
     822     822  0 +  0000035F  B8 00000000:R                            mov     eax,offset FLAT:usHostId
     823     823  0 +  00000364  E8 00000000:E                            call    QueryHostId__FCPUs
     824     824  0 +  00000369  83 C4 04                                 add     esp,04h
     825     825  0 +  0000036C  8B D3                                    mov     edx,ebx
     826     826  0 +  0000036E  85 C0                                    test    eax,eax
     827     827  0 +  00000370  0F 84 00000399:R                         je      @BLBL425
     828     828  0 +
     829     829  0 +                                             ; 1954      Verbose(0, "DrvScan", "couldn't determine host id");
     830     830  0 +  00000376  33 C0                                    xor     eax,eax
     831     831  0 +  00000378  83 EC 0C                                 sub     esp,0ch
     832     832  0 +  0000037B  B9 0000066C:R                            mov     ecx,offset FLAT:@CBE51
     833     833  0 +  00000380  E8 00000000:E                            call    Verbose
     834     834  0 +  00000385  83 C4 0C                                 add     esp,0ch
     835     835  0 +
     836     836  0 +                                             ; 1955      return 0;
     837     837  0 +  00000388  33 C0                                    xor     eax,eax
     838     838  0 +  0000038A  5E                                       pop     esi
     839     839  0 +  0000038B  5F                                       pop     edi
     840     840  0 +  0000038C  5B                                       pop     ebx
     841     841  0 +  0000038D  83 C4 48                                 add     esp,048h
     842     842  0 +  00000390  64:8F 05 [00000000]                      pop     fs:[0h]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   21
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(842:6): Warning ALP4511: Assuming segment width for operand size
     843     843  0 +  00000397  C9                                       leave
     844     844  0 +  00000398  C3                                       ret
     845     845  0 +  00000399                                   @BLBL425:
     846     846  0 +
     847     847  0 +                                             ; 1957  break;
     848     848  0 +  00000399  E9 00000880:R                            jmp     @BLBL478
     849     849  0 +  0000039E                                   @BLBL480:
     850     850  0 +
     851     851  0 +                                             ; 1964  Verbose(3, "DrvScan", "WM_CLOSE");
     852     852  0 +  0000039E  83 EC 0C                                 sub     esp,0ch
     853     853  0 +  000003A1  B9 00000688:R                            mov     ecx,offset FLAT:@CBE52
     854     854  0 +  000003A6  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
     855     855  0 +  000003AB  B8 00000003                              mov     eax,03h
     856     856  0 +  000003B0  E8 00000000:E                            call    Verbose
     857     857  0 +  000003B5  83 C4 0C                                 add     esp,0ch
     858     858  0 +
     859     859  0 +                                             ; 1965  break;
     860     860  0 +  000003B8  E9 00000880:R                            jmp     @BLBL478
     861     861  0 +  000003BD                                   @BLBL481:
     862     862  0 +
     863     863  0 +                                             ; 1972  Verbose(3, "DrvScan", "WUM_START");
     864     864  0 +  000003BD  83 EC 0C                                 sub     esp,0ch
     865     865  0 +  000003C0  B9 00000694:R                            mov     ecx,offset FLAT:@CBE53
     866     866  0 +  000003C5  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
     867     867  0 +  000003CA  B8 00000003                              mov     eax,03h
     868     868  0 +  000003CF  E8 00000000:E                            call    Verbose
     869     869  0 +  000003D4  83 C4 0C                                 add     esp,0ch
     870     870  0 +
     871     871  0 +                                             ; 1974      if( (fSetupMode & SM_FLTAVAIL) )
     872     872  0 +  000003D7  F6 05 [00000000]:E                       test    byte ptr  fSetupMode,01h
                                 01
     873     873  0 +  000003DE  0F 84 000003F7:R                         je      @BLBL427
     874     874  0 +
     875     875  0 +                                             ; 1976          DriverStartSetup();             /* end [re]builds, etc. */
     876     876  0 +  000003E4  E8 00000000:E                            call    DriverStartSetup__Fv
     877     877  0 +
     878     878  0 +                                             ; 1978          AllocateFltDevices(work);
     879     879  0 +  000003E9  83 EC 04                                 sub     esp,04h
     880     880  0 +  000003EC  8B 45 [EC]                               mov     eax,[ebp-014h]; work
     881     881  0 +  000003EF  E8 00002DDD:R                            call    AllocateFltDevices__FCP5_WORK
     882     882  0 +  000003F4  83 C4 04                                 add     esp,04h
     883     883  0 +
     884     884  0 +                                             ; 1980      }
     885     885  0 +  000003F7                                   @BLBL427:
     886     886  0 +  000003F7  83 EC 04                                 sub     esp,04h
     887     887  0 +  000003FA  8B 5D [EC]                               mov     ebx,[ebp-014h]; work
     888     888  0 +  000003FD  8B C3                                    mov     eax,ebx
     889     889  0 +  000003FF  E8 00002BA7:R                            call    AllocateOs2Devices__FCP5_WORK
     890     890  0 +
     891     891  0 +                                             ; 1983      BuildDevTree(work);
     892     892  0 +  00000404  8B C3                                    mov     eax,ebx
     893     893  0 +  00000406  E8 00001B93:R                            call    BuildDevTree__FCP5_WORK
     894     894  0 +  0000040B  83 C4 04                                 add     esp,04h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   22
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     895     895  0 +
     896     896  0 +                                             ; 1986      for( i = 0; i < work->cEndPts; ++i )
     897     897  0 +  0000040E  83 7B [1C] 00                            cmp     dword ptr [ebx+01ch],0h
     898     898  0 +  00000412  0F 86 0000043C:R                         jbe     @BLBL428
     899     899  0 +  00000418  8B 75 [08]                               mov     esi,[ebp+08h];  hwnd
     900     900  0 +  0000041B  33 FF                                    xor     edi,edi
     901     901  0 +  0000041D                                   @BLBL429:
     902     902  0 +
     903     903  0 +                                             ; 1988          VRDev * const   dev = work->apEndPts[i];
     904     904  0 +  0000041D  8B 43 [18]                               mov     eax,[ebx+018h]
     905     905  0 +
     906     906  0 +                                             ; 1990          WinPostMsg(work->self->parent, WUM_DEVTREE, dev, MPFROMHWND(hwnd));
     907     907  0 +  00000420  56                                       push    esi
     908     908  0 +
     909     909  0 +                                             ; 1988          VRDev * const   dev = work->apEndPts[i];
     910     910  0 +  00000421  8B 04/B8                                 mov     eax,dword ptr [eax+edi*04h]
     911     911  0 +
     912     912  0 +                                             ; 1990          WinPostMsg(work->self->parent, WUM_DEVTREE, dev, MPFROMHWND(hwnd));
     913     913  0 +  00000424  50                                       push    eax
     914     914  0 +  00000425  8B 03                                    mov     eax,[ebx]
     915     915  0 +  00000427  68 0000100A                              push    0100ah
     916     916  0 +
     917     917  0 +                                             ; 1986      for( i = 0; i < work->cEndPts; ++i )
     918     918  0 +  0000042C  47                                       inc     edi
     919     919  0 +
     920     920  0 +                                             ; 1990          WinPostMsg(work->self->parent, WUM_DEVTREE, dev, MPFROMHWND(hwnd));
     921     921  0 +  0000042D  FF 30                                    push    dword ptr [eax]
     922     922  0 +  0000042F  E8 00000000:E                            call    WinPostMsg
     923     923  0 +  00000434  83 C4 10                                 add     esp,010h
     924     924  0 +
     925     925  0 +                                             ; 1986      for( i = 0; i < work->cEndPts; ++i )
     926     926  0 +  00000437  39 7B [1C]                               cmp     [ebx+01ch],edi
     927     927  0 +  0000043A  77 E1                                    ja      @BLBL429
     928     928  0 +  0000043C                                   @BLBL428:
     929     929  0 +
     930     930  0 +                                             ; 1993  return 0;
     931     931  0 +  0000043C  5E                                       pop     esi
     932     932  0 +  0000043D  33 C0                                    xor     eax,eax
     933     933  0 +  0000043F  5F                                       pop     edi
     934     934  0 +  00000440  5B                                       pop     ebx
     935     935  0 +  00000441  83 C4 48                                 add     esp,048h
     936     936  0 +  00000444  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(936:6): Warning ALP4511: Assuming segment width for operand size
     937     937  0 +  0000044B  C9                                       leave
     938     938  0 +  0000044C  C3                                       ret
     939     939  0 +  0000044D                                   @BLBL482:
     940     940  0 +
     941     941  0 +                                             ; 2002      VOS2Drive * drive = (VOS2Drive *)PVOIDFROMMP(mp1);
     942     942  0 +  0000044D  8B 75 [10]                               mov     esi,[ebp+010h]; mp1
     943     943  0 +
     944     944  0 +                                             ; 2000  Verbose(3, "DrvScan", "WUM_MKPDEV");
     945     945  0 +  00000450  83 EC 0C                                 sub     esp,0ch
     946     946  0 +  00000453  B9 000006A0:R                            mov     ecx,offset FLAT:@CBE54
     947     947  0 +  00000458  BA 00000000:R                            mov     edx,offset FLAT:@CBE1


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   23
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


     948     948  0 +  0000045D  B8 00000003                              mov     eax,03h
     949     949  0 +  00000462  E8 00000000:E                            call    Verbose
     950     950  0 +  00000467  83 C4 08                                 add     esp,08h
     951     951  0 +
     952     952  0 +                                             ; 2002      VOS2Drive * drive = (VOS2Drive *)PVOIDFROMMP(mp1);
     953     953  0 +  0000046A  89 75 [D8]                               mov     [ebp-028h],esi; drive
     954     954  0 +
     955     955  0 +                                             ; 2003      VOS2Disk *  disk = drive->queryWhere();
     956     956  0 +  0000046D  8B 0E                                    mov     ecx,[esi]
     957     957  0 +  0000046F  8B 41 [5C]                               mov     eax,[ecx+05ch]
     958     958  0 +  00000472  03 C6                                    add     eax,esi
     959     959  0 +  00000474  FF 51 [58]                               call    dword ptr [ecx+058h]
     960     960  0 +  00000477  83 EC 08                                 sub     esp,08h
     961     961  0 +
     962     962  0 +                                             ; 2006      rc = CreatePhysdev(hwnd, disk, &rdev);
     963     963  0 +  0000047A  8B D0                                    mov     edx,eax
     964     964  0 +  0000047C  8B 45 [08]                               mov     eax,[ebp+08h];  hwnd
     965     965  0 +  0000047F  8D 4D [E8]                               lea     ecx,[ebp-018h]; rdev
     966     966  0 +  00000482  E8 000008A3:R                            call    CreatePhysdev__FUlCP8VOS2DiskPP6VORDev
     967     967  0 +  00000487  83 C4 0C                                 add     esp,0ch
     968     968  0 +
     969     969  0 +                                             ; 2007      if( rc == 0 )
     970     970  0 +  0000048A  85 C0                                    test    eax,eax
     971     971  0 +  0000048C  0F 85 000004F6:R                         jne     @BLBL433
     972     972  0 +
     973     973  0 +                                             ; 2014                 drive->ioDeleteYourself();
     974     974  0 +  00000492  8B 0E                                    mov     ecx,[esi]
     975     975  0 +  00000494  83 EC 04                                 sub     esp,04h
     976     976  0 +  00000497  8B 41 [3C]                               mov     eax,[ecx+03ch]
     977     977  0 +  0000049A  03 C6                                    add     eax,esi
     978     978  0 +  0000049C  FF 51 [38]                               call    dword ptr [ecx+038h]
     979     979  0 +  0000049F  8B C6                                    mov     eax,esi
     980     980  0 +  000004A1  83 C4 04                                 add     esp,04h
     981     981  0 +
     982     982  0 +                                             ; 2015                 delete drive;
     983     983  0 +  000004A4  85 C0                                    test    eax,eax
     984     984  0 +  000004A6  0F 84 000004C3:R                         je      @BLBL435
     985     985  0 +  000004AC  8B 38                                    mov     edi,[eax]
     986     986  0 +  000004AE  83 EC 0C                                 sub     esp,0ch
     987     987  0 +  000004B1  8B 77 [2C]                               mov     esi,[edi+02ch]
     988     988  0 +  000004B4  33 C9                                    xor     ecx,ecx
     989     989  0 +  000004B6  BA 00000003                              mov     edx,03h
     990     990  0 +  000004BB  03 C6                                    add     eax,esi
     991     991  0 +  000004BD  FF 57 [28]                               call    dword ptr [edi+028h]
     992     992  0 +  000004C0  83 C4 0C                                 add     esp,0ch
     993     993  0 +  000004C3                                   @BLBL435:
     994     994  0 +
     995     995  0 +                                             ; 2017          rdev->ioSync();
     996     996  0 +  000004C3  83 EC 04                                 sub     esp,04h
     997     997  0 +  000004C6  8B 45 [E8]                               mov     eax,[ebp-018h]; rdev
     998     998  0 +  000004C9  8B 18                                    mov     ebx,[eax]
     999     999  0 +  000004CB  8B 4B [54]                               mov     ecx,[ebx+054h]
    1000    1000  0 +  000004CE  03 C1                                    add     eax,ecx
    1001    1001  0 +  000004D0  FF 53 [50]                               call    dword ptr [ebx+050h]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   24
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1002    1002  0 +  000004D3  83 C4 04                                 add     esp,04h
    1003    1003  0 +
    1004    1004  0 +                                             ; 2018          WinPostMsg(work->self->parent, WUM_DEVTREE, rdev, MPFROMHWND(hwnd));
    1005    1005  0 +  000004D6  8B 5D [08]                               mov     ebx,[ebp+08h];  hwnd
    1006    1006  0 +  000004D9  53                                       push    ebx
    1007    1007  0 +  000004DA  8B 5D [EC]                               mov     ebx,[ebp-014h]; work
    1008    1008  0 +  000004DD  FF 75 [E8]                               push    dword ptr [ebp-018h];   rdev
    1009    1009  0 +  000004E0  8B 1B                                    mov     ebx,[ebx]
    1010    1010  0 +  000004E2  68 0000100A                              push    0100ah
    1011    1011  0 +  000004E7  FF 33                                    push    dword ptr [ebx]
    1012    1012  0 +  000004E9  E8 00000000:E                            call    WinPostMsg
    1013    1013  0 +  000004EE  83 C4 10                                 add     esp,010h
    1014    1014  0 +
    1015    1015  0 +                                             ; 2019      }
    1016    1016  0 +  000004F1  EB 1E 90 90 90                           jmp     @BLBL436
    1017    1017  0 +  000004F6                                   @BLBL433:
    1018    1018  0 +
    1019    1019  0 +                                             ; 2021          WinPostMsg(work->self->parent, WUM_DEVTREE, drive, MPFROMHWND(hwnd));
    1020    1020  0 +  000004F6  8B 5D [08]                               mov     ebx,[ebp+08h];  hwnd
    1021    1021  0 +  000004F9  53                                       push    ebx
    1022    1022  0 +  000004FA  8B 5D [EC]                               mov     ebx,[ebp-014h]; work
    1023    1023  0 +  000004FD  FF 75 [D8]                               push    dword ptr [ebp-028h];   drive
    1024    1024  0 +  00000500  8B 1B                                    mov     ebx,[ebx]
    1025    1025  0 +  00000502  68 0000100A                              push    0100ah
    1026    1026  0 +  00000507  FF 33                                    push    dword ptr [ebx]
    1027    1027  0 +  00000509  E8 00000000:E                            call    WinPostMsg
    1028    1028  0 +  0000050E  83 C4 10                                 add     esp,010h
    1029    1029  0 +  00000511                                   @BLBL436:
    1030    1030  0 +
    1031    1031  0 +                                             ; 2023  return 0;
    1032    1032  0 +  00000511  5E                                       pop     esi
    1033    1033  0 +  00000512  33 C0                                    xor     eax,eax
    1034    1034  0 +  00000514  5F                                       pop     edi
    1035    1035  0 +  00000515  5B                                       pop     ebx
    1036    1036  0 +  00000516  83 C4 48                                 add     esp,048h
    1037    1037  0 +  00000519  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1037:6): Warning ALP4511: Assuming segment width for operand size
    1038    1038  0 +  00000520  C9                                       leave
    1039    1039  0 +  00000521  C3                                       ret
    1040    1040  0 +  00000522                                   @BLBL483:
    1041    1041  0 +
    1042    1042  0 +                                             ; 2037      VRDev *     dev = (VRDev *)PVOIDFROMMP(mp1);
    1043    1043  0 +  00000522  8B 75 [10]                               mov     esi,[ebp+010h]; mp1
    1044    1044  0 +
    1045    1045  0 +                                             ; 2035  Verbose(3, "DrvScan", "WUM_DELPDEV");
    1046    1046  0 +  00000525  83 EC 0C                                 sub     esp,0ch
    1047    1047  0 +  00000528  B9 000006AC:R                            mov     ecx,offset FLAT:@CBE55
    1048    1048  0 +  0000052D  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1049    1049  0 +  00000532  B8 00000003                              mov     eax,03h
    1050    1050  0 +  00000537  E8 00000000:E                            call    Verbose
    1051    1051  0 +  0000053C  83 C4 08                                 add     esp,08h
    1052    1052  0 +
    1053    1053  0 +                                             ; 2037      VRDev *     dev = (VRDev *)PVOIDFROMMP(mp1);
    1054    1054  0 +  0000053F  89 75 [E4]                               mov     [ebp-01ch],esi; dev


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   25
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1055    1055  0 +
    1056    1056  0 +                                             ; 2038      VOS2Disk *  disk = dev->queryWhere();
    1057    1057  0 +  00000542  8B 0E                                    mov     ecx,[esi]
    1058    1058  0 +  00000544  8B 41 [5C]                               mov     eax,[ecx+05ch]
    1059    1059  0 +  00000547  03 C6                                    add     eax,esi
    1060    1060  0 +  00000549  FF 51 [58]                               call    dword ptr [ecx+058h]
    1061    1061  0 +  0000054C  8B F8                                    mov     edi,eax
    1062    1062  0 +  0000054E  89 7D [D4]                               mov     [ebp-02ch],edi; disk
    1063    1063  0 +
    1064    1064  0 +                                             ; 2041      dev->ioDeleteYourself();            /* removes SEC_PHYSDEV [+partition]*/
    1065    1065  0 +  00000551  8B 0E                                    mov     ecx,[esi]
    1066    1066  0 +  00000553  8B 41 [3C]                               mov     eax,[ecx+03ch]
    1067    1067  0 +  00000556  03 C6                                    add     eax,esi
    1068    1068  0 +  00000558  FF 51 [38]                               call    dword ptr [ecx+038h]
    1069    1069  0 +  0000055B  83 C4 04                                 add     esp,04h
    1070    1070  0 +  0000055E  8B C6                                    mov     eax,esi
    1071    1071  0 +
    1072    1072  0 +                                             ; 2043      if( disk = NULL )
    1073    1073  0 +  00000560  85 FF                                    test    edi,edi
    1074    1074  0 +  00000562  0F 84 000005E5:R                         je      @BLBL437
    1075    1075  0 +
    1076    1076  0 +                                             ; 2045          delete dev,     dev = NULL;
    1077    1077  0 +  00000568  85 C0                                    test    eax,eax
    1078    1078  0 +  0000056A  0F 84 00000587:R                         je      @BLBL439
    1079    1079  0 +  00000570  8B 38                                    mov     edi,[eax]
    1080    1080  0 +  00000572  83 EC 0C                                 sub     esp,0ch
    1081    1081  0 +  00000575  8B 77 [2C]                               mov     esi,[edi+02ch]
    1082    1082  0 +  00000578  33 C9                                    xor     ecx,ecx
    1083    1083  0 +  0000057A  BA 00000003                              mov     edx,03h
    1084    1084  0 +  0000057F  03 C6                                    add     eax,esi
    1085    1085  0 +  00000581  FF 57 [28]                               call    dword ptr [edi+028h]
    1086    1086  0 +  00000584  83 C4 0C                                 add     esp,0ch
    1087    1087  0 +  00000587                                   @BLBL439:
    1088    1088  0 +
    1089    1089  0 +                                             ; 2047          VOS2Drive *     drive = new VOS2Drive(disk);
    1090    1090  0 +  00000587  83 EC 04                                 sub     esp,04h
    1091    1091  0 +  0000058A  B8 00000020                              mov     eax,020h
    1092    1092  0 +  0000058F  E8 00000000:E                            call    __nw__FUi
    1093    1093  0 +
    1094    1094  0 +                                             ; 2045          delete dev,     dev = NULL;
    1095    1095  0 +  00000594  C7 45 [E4] 00000000                      mov     dword ptr [ebp-01ch],0h;        dev
    1096    1096  0 +
    1097    1097  0 +                                             ; 2047          VOS2Drive *     drive = new VOS2Drive(disk);
    1098    1098  0 +  0000059B  83 C4 04                                 add     esp,04h
    1099    1099  0 +  0000059E  89 45 [F0]                               mov     [ebp-010h],eax; __107
    1100    1100  0 +  000005A1  85 C0                                    test    eax,eax
    1101    1101  0 +  000005A3  0F 84 000005C5:R                         je      @BLBL441
    1102    1102  0 +  000005A9  83 EC 08                                 sub     esp,08h
    1103    1103  0 +  000005AC  8B 55 [D4]                               mov     edx,[ebp-02ch]; disk
    1104    1104  0 +  000005AF  C7 45 [B4] 00000001                      mov     dword ptr [ebp-04ch],01h;       __es
    1105    1105  0 +  000005B6  E8 00000000:E                            call    __ct__9VOS2DriveFP8VOS2Disk
    1106    1106  0 +  000005BB  83 C4 08                                 add     esp,08h
    1107    1107  0 +  000005BE  C7 45 [B4] 00000000                      mov     dword ptr [ebp-04ch],0h;        __es
    1108    1108  0 +  000005C5                                   @BLBL441:


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   26
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1109    1109  0 +
    1110    1110  0 +                                             ; 2048          WinPostMsg(work->self->parent, WUM_DEVTREE, drive, MPFROMHWND(hwnd));
    1111    1111  0 +  000005C5  8B 5D [08]                               mov     ebx,[ebp+08h];  hwnd
    1112    1112  0 +  000005C8  53                                       push    ebx
    1113    1113  0 +  000005C9  8B 5D [EC]                               mov     ebx,[ebp-014h]; work
    1114    1114  0 +  000005CC  FF 75 [F0]                               push    dword ptr [ebp-010h];   __107
    1115    1115  0 +  000005CF  8B 1B                                    mov     ebx,[ebx]
    1116    1116  0 +  000005D1  68 0000100A                              push    0100ah
    1117    1117  0 +  000005D6  FF 33                                    push    dword ptr [ebx]
    1118    1118  0 +  000005D8  E8 00000000:E                            call    WinPostMsg
    1119    1119  0 +  000005DD  83 C4 10                                 add     esp,010h
    1120    1120  0 +
    1121    1121  0 +                                             ; 2049      }
    1122    1122  0 +  000005E0  EB 38 90 90 90                           jmp     @BLBL442
    1123    1123  0 +  000005E5                                   @BLBL437:
    1124    1124  0 +
    1125    1125  0 +                                             ; 2056          WinPostMsg(work->self->parent, WUM_DEVTREE, dev, MPFROMHWND(hwnd));
    1126    1126  0 +  000005E5  8B 5D [08]                               mov     ebx,[ebp+08h];  hwnd
    1127    1127  0 +
    1128    1128  0 +                                             ; 2052          MyMessageBox(3, HWND_DESKTOP,
    1129    1129  0 +  000005E8  83 EC 0C                                 sub     esp,0ch
    1130    1130  0 +  000005EB  B9 000006B8:R                            mov     ecx,offset FLAT:@CBE56
    1131    1131  0 +  000005F0  BA 00000001                              mov     edx,01h
    1132    1132  0 +  000005F5  B8 00000003                              mov     eax,03h
    1133    1133  0 +  000005FA  E8 00000000:E                            call    MyMessageBox__FCiCUlPce
    1134    1134  0 +  000005FF  83 C4 0C                                 add     esp,0ch
    1135    1135  0 +
    1136    1136  0 +                                             ; 2056          WinPostMsg(work->self->parent, WUM_DEVTREE, dev, MPFROMHWND(hwnd));
    1137    1137  0 +  00000602  53                                       push    ebx
    1138    1138  0 +  00000603  8B 5D [EC]                               mov     ebx,[ebp-014h]; work
    1139    1139  0 +  00000606  FF 75 [E4]                               push    dword ptr [ebp-01ch];   dev
    1140    1140  0 +  00000609  8B 1B                                    mov     ebx,[ebx]
    1141    1141  0 +  0000060B  68 0000100A                              push    0100ah
    1142    1142  0 +  00000610  FF 33                                    push    dword ptr [ebx]
    1143    1143  0 +  00000612  E8 00000000:E                            call    WinPostMsg
    1144    1144  0 +  00000617  83 C4 10                                 add     esp,010h
    1145    1145  0 +
    1146    1146  0 +                                             ; 2057      }
    1147    1147  0 +  0000061A                                   @BLBL442:
    1148    1148  0 +
    1149    1149  0 +                                             ; 2059  return 0;
    1150    1150  0 +  0000061A  5E                                       pop     esi
    1151    1151  0 +  0000061B  33 C0                                    xor     eax,eax
    1152    1152  0 +  0000061D  5F                                       pop     edi
    1153    1153  0 +  0000061E  5B                                       pop     ebx
    1154    1154  0 +  0000061F  83 C4 48                                 add     esp,048h
    1155    1155  0 +  00000622  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1155:6): Warning ALP4511: Assuming segment width for operand size
    1156    1156  0 +  00000629  C9                                       leave
    1157    1157  0 +  0000062A  C3                                       ret
    1158    1158  0 +  0000062B                                   @BLBL484:
    1159    1159  0 +
    1160    1160  0 +                                             ; 2075      dev->ioSync();                      /* write to disk[s] */
    1161    1161  0 +  0000062B  8B 5D [10]                               mov     ebx,[ebp+010h]; mp1


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   27
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1162    1162  0 +
    1163    1163  0 +                                             ; 2071  Verbose(3, "DrvScan", "WUM_DEVTREE");
    1164    1164  0 +  0000062E  83 EC 0C                                 sub     esp,0ch
    1165    1165  0 +  00000631  B9 00000734:R                            mov     ecx,offset FLAT:@CBE57
    1166    1166  0 +  00000636  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1167    1167  0 +  0000063B  B8 00000003                              mov     eax,03h
    1168    1168  0 +  00000640  E8 00000000:E                            call    Verbose
    1169    1169  0 +
    1170    1170  0 +                                             ; 2075      dev->ioSync();                      /* write to disk[s] */
    1171    1171  0 +  00000645  8B 0B                                    mov     ecx,[ebx]
    1172    1172  0 +
    1173    1173  0 +                                             ; 2071  Verbose(3, "DrvScan", "WUM_DEVTREE");
    1174    1174  0 +  00000647  83 C4 08                                 add     esp,08h
    1175    1175  0 +
    1176    1176  0 +                                             ; 2075      dev->ioSync();                      /* write to disk[s] */
    1177    1177  0 +  0000064A  8B 41 [54]                               mov     eax,[ecx+054h]
    1178    1178  0 +  0000064D  03 C3                                    add     eax,ebx
    1179    1179  0 +  0000064F  FF 51 [50]                               call    dword ptr [ecx+050h]
    1180    1180  0 +  00000652  83 C4 04                                 add     esp,04h
    1181    1181  0 +
    1182    1182  0 +                                             ; 2076      WinPostMsg(work->self->parent, WUM_DEVTREE, dev, MPFROMHWND(hwnd));
    1183    1183  0 +  00000655  8B 4D [08]                               mov     ecx,[ebp+08h];  hwnd
    1184    1184  0 +  00000658  51                                       push    ecx
    1185    1185  0 +  00000659  8B 4D [EC]                               mov     ecx,[ebp-014h]; work
    1186    1186  0 +  0000065C  53                                       push    ebx
    1187    1187  0 +  0000065D  8B 09                                    mov     ecx,[ecx]
    1188    1188  0 +  0000065F  68 0000100A                              push    0100ah
    1189    1189  0 +  00000664  FF 31                                    push    dword ptr [ecx]
    1190    1190  0 +  00000666  E8 00000000:E                            call    WinPostMsg
    1191    1191  0 +  0000066B  83 C4 10                                 add     esp,010h
    1192    1192  0 +
    1193    1193  0 +                                             ; 2078  return 0;
    1194    1194  0 +  0000066E  33 C0                                    xor     eax,eax
    1195    1195  0 +  00000670  5E                                       pop     esi
    1196    1196  0 +  00000671  5F                                       pop     edi
    1197    1197  0 +  00000672  5B                                       pop     ebx
    1198    1198  0 +  00000673  83 C4 48                                 add     esp,048h
    1199    1199  0 +  00000676  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1199:6): Warning ALP4511: Assuming segment width for operand size
    1200    1200  0 +  0000067D  C9                                       leave
    1201    1201  0 +  0000067E  C3                                       ret
    1202    1202  0 +  0000067F                                   @BLBL485:
    1203    1203  0 +
    1204    1204  0 +                                             ; 2088      VRDrive * const     drv = (VRDrive *)PVOIDFROMMP(mp1);
    1205    1205  0 +  0000067F  8B 5D [10]                               mov     ebx,[ebp+010h]; mp1
    1206    1206  0 +
    1207    1207  0 +                                             ; 2086  Verbose(3, "DrvScan", "WUM_DELDRV");
    1208    1208  0 +  00000682  83 EC 0C                                 sub     esp,0ch
    1209    1209  0 +  00000685  B9 00000740:R                            mov     ecx,offset FLAT:@CBE58
    1210    1210  0 +  0000068A  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1211    1211  0 +  0000068F  B8 00000003                              mov     eax,03h
    1212    1212  0 +  00000694  E8 00000000:E                            call    Verbose
    1213    1213  0 +  00000699  83 C4 08                                 add     esp,08h
    1214    1214  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   28
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1215    1215  0 +                                             ; 2088      VRDrive * const     drv = (VRDrive *)PVOIDFROMMP(mp1);
    1216    1216  0 +  0000069C  89 5D [D0]                               mov     [ebp-030h],ebx; drv
    1217    1217  0 +
    1218    1218  0 +                                             ; 2092      for( int i = 0; i < drv->queryChildren(); ++i )
    1219    1219  0 +  0000069F  8B 0B                                    mov     ecx,[ebx]
    1220    1220  0 +  000006A1  8B 81 [00000094]                         mov     eax,[ecx+094h]
    1221    1221  0 +  000006A7  03 C3                                    add     eax,ebx
    1222    1222  0 +  000006A9  FF 91 [00000090]                         call    dword ptr [ecx+090h]
    1223    1223  0 +  000006AF  83 C4 04                                 add     esp,04h
    1224    1224  0 +  000006B2  8B CB                                    mov     ecx,ebx
    1225    1225  0 +  000006B4  85 C0                                    test    eax,eax
    1226    1226  0 +  000006B6  0F 8E 00000729:R                         jle     @BLBL443
    1227    1227  0 +  000006BC  8B 5D [EC]                               mov     ebx,[ebp-014h]; work
    1228    1228  0 +  000006BF  8B F1                                    mov     esi,ecx
    1229    1229  0 +  000006C1  33 FF                                    xor     edi,edi
    1230    1230  0 +  000006C3                                   @BLBL444:
    1231    1231  0 +
    1232    1232  0 +                                             ; 2094          VRDev * const   child = drv->getChild(i);
    1233    1233  0 +  000006C3  8B 0E                                    mov     ecx,[esi]
    1234    1234  0 +  000006C5  83 EC 08                                 sub     esp,08h
    1235    1235  0 +  000006C8  8B 81 [0000009C]                         mov     eax,[ecx+09ch]
    1236    1236  0 +  000006CE  8B D7                                    mov     edx,edi
    1237    1237  0 +  000006D0  03 C6                                    add     eax,esi
    1238    1238  0 +  000006D2  FF 91 [00000098]                         call    dword ptr [ecx+098h]
    1239    1239  0 +  000006D8  8B D0                                    mov     edx,eax
    1240    1240  0 +  000006DA  83 C4 04                                 add     esp,04h
    1241    1241  0 +
    1242    1242  0 +                                             ; 2096          if( child->isArray() = 0xFF )
    1243    1243  0 +  000006DD  8B 0A                                    mov     ecx,[edx]
    1244    1244  0 +  000006DF  8B 41 [64]                               mov     eax,[ecx+064h]
    1245    1245  0 +  000006E2  03 C2                                    add     eax,edx
    1246    1246  0 +  000006E4  89 55 [B0]                               mov     [ebp-050h],edx; @CBE115
    1247    1247  0 +  000006E7  FF 51 [60]                               call    dword ptr [ecx+060h]
    1248    1248  0 +  000006EA  8B 55 [B0]                               mov     edx,[ebp-050h]; @CBE115
    1249    1249  0 +  000006ED  83 C4 04                                 add     esp,04h
    1250    1250  0 +  000006F0  3C FF                                    cmp     al,0ffh
    1251    1251  0 +  000006F2  0F 84 0000070E:R                         je      @BLBL446
    1252    1252  0 +
    1253    1253  0 +                                             ; 2097              WinPostMsg(work->self->parent, WUM_DEVTREE, child, MPFROMHWND(hwnd));
    1254    1254  0 +  000006F8  8B 4D [08]                               mov     ecx,[ebp+08h];  hwnd
    1255    1255  0 +  000006FB  51                                       push    ecx
    1256    1256  0 +  000006FC  8B 0B                                    mov     ecx,[ebx]
    1257    1257  0 +  000006FE  52                                       push    edx
    1258    1258  0 +  000006FF  68 0000100A                              push    0100ah
    1259    1259  0 +  00000704  FF 31                                    push    dword ptr [ecx]
    1260    1260  0 +  00000706  E8 00000000:E                            call    WinPostMsg
    1261    1261  0 +  0000070B  83 C4 10                                 add     esp,010h
    1262    1262  0 +
    1263    1263  0 +                                             ; 2098      }
    1264    1264  0 +  0000070E                                   @BLBL446:
    1265    1265  0 +
    1266    1266  0 +                                             ; 2092      for( int i = 0; i < drv->queryChildren(); ++i )
    1267    1267  0 +  0000070E  8B 0E                                    mov     ecx,[esi]
    1268    1268  0 +  00000710  83 EC 04                                 sub     esp,04h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   29
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1269    1269  0 +  00000713  8B 81 [00000094]                         mov     eax,[ecx+094h]
    1270    1270  0 +  00000719  03 C6                                    add     eax,esi
    1271    1271  0 +  0000071B  FF 91 [00000090]                         call    dword ptr [ecx+090h]
    1272    1272  0 +  00000721  47                                       inc     edi
    1273    1273  0 +  00000722  83 C4 04                                 add     esp,04h
    1274    1274  0 +  00000725  3B C7                                    cmp     eax,edi
    1275    1275  0 +  00000727  7F 9A                                    jg      @BLBL444
    1276    1276  0 +  00000729                                   @BLBL443:
    1277    1277  0 +
    1278    1278  0 +                                             ; 2100      drv->ioDeleteYourself();
    1279    1279  0 +  00000729  83 EC 04                                 sub     esp,04h
    1280    1280  0 +  0000072C  8B 75 [D0]                               mov     esi,[ebp-030h]; drv
    1281    1281  0 +  0000072F  8B 0E                                    mov     ecx,[esi]
    1282    1282  0 +  00000731  8B 41 [3C]                               mov     eax,[ecx+03ch]
    1283    1283  0 +  00000734  03 C6                                    add     eax,esi
    1284    1284  0 +  00000736  FF 51 [38]                               call    dword ptr [ecx+038h]
    1285    1285  0 +  00000739  8B C6                                    mov     eax,esi
    1286    1286  0 +  0000073B  83 C4 04                                 add     esp,04h
    1287    1287  0 +
    1288    1288  0 +                                             ; 2101      delete drv;
    1289    1289  0 +  0000073E  85 C0                                    test    eax,eax
    1290    1290  0 +  00000740  0F 84 0000075D:R                         je      @BLBL450
    1291    1291  0 +  00000746  8B 38                                    mov     edi,[eax]
    1292    1292  0 +  00000748  83 EC 0C                                 sub     esp,0ch
    1293    1293  0 +  0000074B  8B 77 [2C]                               mov     esi,[edi+02ch]
    1294    1294  0 +  0000074E  33 C9                                    xor     ecx,ecx
    1295    1295  0 +  00000750  BA 00000003                              mov     edx,03h
    1296    1296  0 +  00000755  03 C6                                    add     eax,esi
    1297    1297  0 +  00000757  FF 57 [28]                               call    dword ptr [edi+028h]
    1298    1298  0 +  0000075A  83 C4 0C                                 add     esp,0ch
    1299    1299  0 +  0000075D                                   @BLBL450:
    1300    1300  0 +
    1301    1301  0 +                                             ; 2103  return 0;
    1302    1302  0 +  0000075D  5E                                       pop     esi
    1303    1303  0 +  0000075E  33 C0                                    xor     eax,eax
    1304    1304  0 +  00000760  5F                                       pop     edi
    1305    1305  0 +  00000761  5B                                       pop     ebx
    1306    1306  0 +  00000762  83 C4 48                                 add     esp,048h
    1307    1307  0 +  00000765  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1307:6): Warning ALP4511: Assuming segment width for operand size
    1308    1308  0 +  0000076C  C9                                       leave
    1309    1309  0 +  0000076D  C3                                       ret
    1310    1310  0 +  0000076E                                   @BLBL486:
    1311    1311  0 +
    1312    1312  0 +                                             ; 2111  Verbose(3, "DrvScan", "WUM_CLOSEDEV");
    1313    1313  0 +  0000076E  83 EC 0C                                 sub     esp,0ch
    1314    1314  0 +  00000771  B9 0000074C:R                            mov     ecx,offset FLAT:@CBE59
    1315    1315  0 +  00000776  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1316    1316  0 +  0000077B  B8 00000003                              mov     eax,03h
    1317    1317  0 +  00000780  E8 00000000:E                            call    Verbose
    1318    1318  0 +
    1319    1319  0 +                                             ; 2114      delete dev;
    1320    1320  0 +  00000785  8B 45 [10]                               mov     eax,[ebp+010h]; mp1
    1321    1321  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   30
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1322    1322  0 +                                             ; 2111  Verbose(3, "DrvScan", "WUM_CLOSEDEV");
    1323    1323  0 +  00000788  83 C4 0C                                 add     esp,0ch
    1324    1324  0 +
    1325    1325  0 +                                             ; 2114      delete dev;
    1326    1326  0 +  0000078B  85 C0                                    test    eax,eax
    1327    1327  0 +  0000078D  0F 84 000007AA:R                         je      @BLBL452
    1328    1328  0 +  00000793  8B 18                                    mov     ebx,[eax]
    1329    1329  0 +  00000795  83 EC 0C                                 sub     esp,0ch
    1330    1330  0 +  00000798  8B 7B [2C]                               mov     edi,[ebx+02ch]
    1331    1331  0 +  0000079B  33 C9                                    xor     ecx,ecx
    1332    1332  0 +  0000079D  BA 00000003                              mov     edx,03h
    1333    1333  0 +  000007A2  03 C7                                    add     eax,edi
    1334    1334  0 +  000007A4  FF 53 [28]                               call    dword ptr [ebx+028h]
    1335    1335  0 +  000007A7  83 C4 0C                                 add     esp,0ch
    1336    1336  0 +  000007AA                                   @BLBL452:
    1337    1337  0 +
    1338    1338  0 +                                             ; 2116  return 0;
    1339    1339  0 +  000007AA  5E                                       pop     esi
    1340    1340  0 +  000007AB  33 C0                                    xor     eax,eax
    1341    1341  0 +  000007AD  5F                                       pop     edi
    1342    1342  0 +  000007AE  5B                                       pop     ebx
    1343    1343  0 +  000007AF  83 C4 48                                 add     esp,048h
    1344    1344  0 +  000007B2  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1344:6): Warning ALP4511: Assuming segment width for operand size
    1345    1345  0 +  000007B9  C9                                       leave
    1346    1346  0 +  000007BA  C3                                       ret
    1347    1347  0 +  000007BB                                   @BLBL487:
    1348    1348  0 +
    1349    1349  0 +                                             ; 2127      VDriveWithRedundancy * parent = (VDriveWithRedundancy *)PVOIDFROMMP(mp2);
    1350    1350  0 +  000007BB  8B 5D [14]                               mov     ebx,[ebp+014h]; mp2
    1351    1351  0 +
    1352    1352  0 +                                             ; 2123  Verbose(3, "DrvScan", "WUM_REMCHILD");
    1353    1353  0 +  000007BE  83 EC 0C                                 sub     esp,0ch
    1354    1354  0 +  000007C1  B9 0000075C:R                            mov     ecx,offset FLAT:@CBE60
    1355    1355  0 +  000007C6  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1356    1356  0 +  000007CB  B8 00000003                              mov     eax,03h
    1357    1357  0 +  000007D0  E8 00000000:E                            call    Verbose
    1358    1358  0 +
    1359    1359  0 +                                             ; 2126      VRDev *     child = (VRDev *)PVOIDFROMMP(mp1);
    1360    1360  0 +  000007D5  8B 45 [10]                               mov     eax,[ebp+010h]; mp1
    1361    1361  0 +
    1362    1362  0 +                                             ; 2125      Boolean     postchild = True;
    1363    1363  0 +  000007D8  C6 45 [CB] 01                            mov     byte ptr [ebp-035h],01h;        postchild
    1364    1364  0 +
    1365    1365  0 +                                             ; 2123  Verbose(3, "DrvScan", "WUM_REMCHILD");
    1366    1366  0 +  000007DC  83 C4 08                                 add     esp,08h
    1367    1367  0 +
    1368    1368  0 +                                             ; 2126      VRDev *     child = (VRDev *)PVOIDFROMMP(mp1);
    1369    1369  0 +  000007DF  89 45 [E0]                               mov     [ebp-020h],eax; child
    1370    1370  0 +
    1371    1371  0 +                                             ; 2127      VDriveWithRedundancy * parent = (VDriveWithRedundancy *)PVOIDFROMMP(mp2);
    1372    1372  0 +  000007E2  89 5D [CC]                               mov     [ebp-034h],ebx; parent
    1373    1373  0 +
    1374    1374  0 +                                             ; 2129      if( child->isArray() == 0xFF )      /* VMissing  Don't post. */


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   31
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1375    1375  0 +  000007E5  8B 18                                    mov     ebx,[eax]
    1376    1376  0 +  000007E7  8B 4B [64]                               mov     ecx,[ebx+064h]
    1377    1377  0 +  000007EA  03 C1                                    add     eax,ecx
    1378    1378  0 +  000007EC  FF 53 [60]                               call    dword ptr [ebx+060h]
    1379    1379  0 +  000007EF  83 C4 04                                 add     esp,04h
    1380    1380  0 +  000007F2  3C FF                                    cmp     al,0ffh
    1381    1381  0 +  000007F4  0F 85 000007FE:R                         jne     @BLBL453
    1382    1382  0 +
    1383    1383  0 +                                             ; 2130          postchild = False;
    1384    1384  0 +  000007FA  C6 45 [CB] 00                            mov     byte ptr [ebp-035h],0h; postchild
    1385    1385  0 +  000007FE                                   @BLBL453:
    1386    1386  0 +
    1387    1387  0 +                                             ; 2132      parent->ioRemoveChild(child);
    1388    1388  0 +  000007FE  83 EC 08                                 sub     esp,08h
    1389    1389  0 +  00000801  8B 5D [CC]                               mov     ebx,[ebp-034h]; parent
    1390    1390  0 +  00000804  8B 55 [E0]                               mov     edx,[ebp-020h]; child
    1391    1391  0 +  00000807  8B 0B                                    mov     ecx,[ebx]
    1392    1392  0 +  00000809  8B 81 [000000BC]                         mov     eax,[ecx+0bch]
    1393    1393  0 +  0000080F  03 C3                                    add     eax,ebx
    1394    1394  0 +  00000811  FF 91 [000000B8]                         call    dword ptr [ecx+0b8h]
    1395    1395  0 +  00000817  8B CB                                    mov     ecx,ebx
    1396    1396  0 +  00000819  83 C4 08                                 add     esp,08h
    1397    1397  0 +
    1398    1398  0 +                                             ; 2134      VRDev * higher = parent;
    1399    1399  0 +  0000081C  89 4D [DC]                               mov     [ebp-024h],ecx; higher
    1400    1400  0 +
    1401    1401  0 +                                             ; 2135      while( higher->getParent() = 0  )
    1402    1402  0 +  0000081F  83 79 [04] 00                            cmp     dword ptr [ecx+04h],0h
    1403    1403  0 +  00000823  0F 84 00000835:R                         je      @BLBL454
    1404    1404  0 +  00000829                                   @BLBL455:
    1405    1405  0 +
    1406    1406  0 +                                             ; 2136          higher = higher->getParent();
    1407    1407  0 +  00000829  8B 49 [04]                               mov     ecx,[ecx+04h]
    1408    1408  0 +
    1409    1409  0 +                                             ; 2135      while( higher->getParent() = 0  )
    1410    1410  0 +  0000082C  83 79 [04] 00                            cmp     dword ptr [ecx+04h],0h
    1411    1411  0 +  00000830  75 F7                                    jne     @BLBL455
    1412    1412  0 +  00000832  89 4D [DC]                               mov     [ebp-024h],ecx; higher
    1413    1413  0 +  00000835                                   @BLBL454:
    1414    1414  0 +
    1415    1415  0 +                                             ; 2137      WinPostMsg(work->self->parent, WUM_DEVTREE, higher, MPFROMHWND(hwnd));
    1416    1416  0 +  00000835  8B 5D [08]                               mov     ebx,[ebp+08h];  hwnd
    1417    1417  0 +  00000838  53                                       push    ebx
    1418    1418  0 +  00000839  8B 7D [EC]                               mov     edi,[ebp-014h]; work
    1419    1419  0 +  0000083C  FF 75 [DC]                               push    dword ptr [ebp-024h];   higher
    1420    1420  0 +  0000083F  8B 0F                                    mov     ecx,[edi]
    1421    1421  0 +  00000841  68 0000100A                              push    0100ah
    1422    1422  0 +  00000846  FF 31                                    push    dword ptr [ecx]
    1423    1423  0 +  00000848  E8 00000000:E                            call    WinPostMsg
    1424    1424  0 +  0000084D  83 C4 10                                 add     esp,010h
    1425    1425  0 +
    1426    1426  0 +                                             ; 2139      if( postchild == True )
    1427    1427  0 +  00000850  80 7D [CB] 01                            cmp     byte ptr [ebp-035h],01h;        postchild
    1428    1428  0 +  00000854  0F 85 0000086F:R                         jne     @BLBL459


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   32
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1429    1429  0 +
    1430    1430  0 +                                             ; 2140          WinPostMsg(work->self->parent, WUM_DEVTREE, child, MPFROMHWND(hwnd));
    1431    1431  0 +  0000085A  53                                       push    ebx
    1432    1432  0 +  0000085B  FF 75 [E0]                               push    dword ptr [ebp-020h];   child
    1433    1433  0 +  0000085E  8B 0F                                    mov     ecx,[edi]
    1434    1434  0 +  00000860  68 0000100A                              push    0100ah
    1435    1435  0 +  00000865  FF 31                                    push    dword ptr [ecx]
    1436    1436  0 +  00000867  E8 00000000:E                            call    WinPostMsg
    1437    1437  0 +  0000086C  83 C4 10                                 add     esp,010h
    1438    1438  0 +  0000086F                                   @BLBL459:
    1439    1439  0 +
    1440    1440  0 +                                             ; 2142  return 0;
    1441    1441  0 +  0000086F  5E                                       pop     esi
    1442    1442  0 +  00000870  33 C0                                    xor     eax,eax
    1443    1443  0 +  00000872  5F                                       pop     edi
    1444    1444  0 +  00000873  5B                                       pop     ebx
    1445    1445  0 +  00000874  83 C4 48                                 add     esp,048h
    1446    1446  0 +  00000877  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1446:6): Warning ALP4511: Assuming segment width for operand size
    1447    1447  0 +  0000087E  C9                                       leave
    1448    1448  0 +  0000087F  C3                                       ret
    1449    1449  0 +
    1450    1450  0 +                                             ; 2145  break;
    1451    1451  0 +  00000880                                   @BLBL478:
    1452    1452  0 +
    1453    1453  0 +                                             ; 2148     return WinDefWindowProc(hwnd, msg, mp1, mp2);
    1454    1454  0 +  00000880  FF 75 [14]                               push    dword ptr [ebp+014h];   mp2
    1455    1455  0 +  00000883  FF 75 [10]                               push    dword ptr [ebp+010h];   mp1
    1456    1456  0 +  00000886  FF 75 [0C]                               push    dword ptr [ebp+0ch];    msg
    1457    1457  0 +  00000889  FF 75 [08]                               push    dword ptr [ebp+08h];    hwnd
    1458    1458  0 +  0000088C  E8 00000000:E                            call    WinDefWindowProc
    1459    1459  0 +  00000891  83 C4 10                                 add     esp,010h
    1460    1460  0 +  00000894  5E                                       pop     esi
    1461    1461  0 +  00000895  5F                                       pop     edi
    1462    1462  0 +  00000896  5B                                       pop     ebx
    1463    1463  0 +  00000897  83 C4 48                                 add     esp,048h
    1464    1464  0 +  0000089A  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1464:6): Warning ALP4511: Assuming segment width for operand size
    1465    1465  0 +  000008A1  C9                                       leave
    1466    1466  0 +  000008A2  C3                                       ret
    1467    1467  0 +  000008A3                                   DrvscanWindowProc       endp
    1468    1468  0 +
    1469    1469  0 +                                             ; 1842 CreatePhysdev(HWND hwnd,VOS2Disk * const disk,VORDev ** dev)
    1470    1470  0 +
    1471    1471  0 +  000008A3                                   CreatePhysdev__FUlCP8VOS2DiskPP6VORDev  proc
    1472    1472  0 +  000008A3  55                                       push    ebp
    1473    1473  0 +  000008A4  8B EC                                    mov     ebp,esp
    1474    1474  0 +  000008A6  68 00000000:E                            push    offset FLAT: _Exception_CPP
    1475    1475  0 +  000008AB  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1475:7): Warning ALP4511: Assuming segment width for operand size
    1476    1476  0 +  000008B2  64:89 25 [00000000]                      mov     fs:[0h],esp
    1477    1477  0 +  000008B9  68 FFFFFEF4                              push    0fffffef4h
    1478    1478  0 +  000008BE  89 45 [08]                               mov     [ebp+08h],eax;  hwnd
    1479    1479  0 +  000008C1  81 EC 00000100                           sub     esp,0100h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   33
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1480    1480  0 +
    1481    1481  0 +                                             ; 1845     DSKAREA      info = {0};
    1482    1482  0 +  000008C7  33 C0                                    xor     eax,eax
    1483    1483  0 +
    1484    1484  0 +                                             ; 1842 CreatePhysdev(HWND hwnd,VOS2Disk * const disk,VORDev ** dev)
    1485    1485  0 +  000008C9  53                                       push    ebx
    1486    1486  0 +  000008CA  8B DA                                    mov     ebx,edx
    1487    1487  0 +  000008CC  57                                       push    edi
    1488    1488  0 +  000008CD  8B D1                                    mov     edx,ecx
    1489    1489  0 +  000008CF  56                                       push    esi
    1490    1490  0 +
    1491    1491  0 +                                             ; 1845     DSKAREA      info = {0};
    1492    1492  0 +  000008D0  8D BD [FFFFFF0C]                         lea     edi,[ebp-0f4h]; info
    1493    1493  0 +  000008D6  B9 00000032                              mov     ecx,032h
    1494    1494  0 +
    1495    1495  0 +                                             ; 1852  rc = FindFreeSpace(disk, 0, disk->querySize(), &info, &found);
    1496    1496  0 +  000008DB  83 EC 04                                 sub     esp,04h
    1497    1497  0 +
    1498    1498  0 +                                             ; 1842 CreatePhysdev(HWND hwnd,VOS2Disk * const disk,VORDev ** dev)
    1499    1499  0 +  000008DE  89 55 [10]                               mov     [ebp+010h],edx; dev
    1500    1500  0 +  000008E1  89 5D [0C]                               mov     [ebp+0ch],ebx;  disk
    1501    1501  0 +
    1502    1502  0 +                                             ; 1843 {
    1503    1503  0 +  000008E4  C7 85 [FFFFFEF4]                         mov     dword ptr [ebp-010ch],0h;       __es
                                 00000000
    1504    1504  0 +  000008EE  C7 85 [FFFFFEFC]                         mov     dword ptr [ebp-0104h],offset FLAT:@1ef__fsm_tab;        __es
                                 000001C0:R
    1505    1505  0 +
    1506    1506  0 +                                             ; 1844     int          found = -1;                     /* indices */
    1507    1507  0 +  000008F8  C7 45 [E4] FFFFFFFF                      mov     dword ptr [ebp-01ch],0ffffffffh;        found
    1508    1508  0 +
    1509    1509  0 +                                             ; 1845     DSKAREA      info = {0};
    1510    1510  0 +  000008FF  C7 85 [FFFFFF08]                         mov     dword ptr [ebp-0f8h],0h;        info
                                 00000000
    1511    1511  0 +  00000909  F3:AB                                    rep stosd
    1512    1512  0 +
    1513    1513  0 +                                             ; 1852  rc = FindFreeSpace(disk, 0, disk->querySize(), &info, &found);
    1514    1514  0 +  0000090B  8B 0B                                    mov     ecx,[ebx]
    1515    1515  0 +
    1516    1516  0 +                                             ; 1845     DSKAREA      info = {0};
    1517    1517  0 +  0000090D  8B FA                                    mov     edi,edx
    1518    1518  0 +
    1519    1519  0 +                                             ; 1852  rc = FindFreeSpace(disk, 0, disk->querySize(), &info, &found);
    1520    1520  0 +  0000090F  8B 41 [14]                               mov     eax,[ecx+014h]
    1521    1521  0 +  00000912  03 C3                                    add     eax,ebx
    1522    1522  0 +  00000914  FF 51 [10]                               call    dword ptr [ecx+010h]
    1523    1523  0 +  00000917  8D 4D [E4]                               lea     ecx,[ebp-01ch]; found
    1524    1524  0 +  0000091A  83 C4 04                                 add     esp,04h
    1525    1525  0 +  0000091D  8D B5 [FFFFFF08]                         lea     esi,[ebp-0f8h]; info
    1526    1526  0 +  00000923  51                                       push    ecx
    1527    1527  0 +  00000924  8B C8                                    mov     ecx,eax
    1528    1528  0 +  00000926  56                                       push    esi
    1529    1529  0 +  00000927  33 D2                                    xor     edx,edx
    1530    1530  0 +  00000929  83 EC 0C                                 sub     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   34
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1531    1531  0 +  0000092C  8B C3                                    mov     eax,ebx
    1532    1532  0 +  0000092E  E8 0000107F:R                            call    FindFreeSpace__FCP8VOS2DiskCUlT2CP8_DSKAREACPi
    1533    1533  0 +  00000933  83 C4 14                                 add     esp,014h
    1534    1534  0 +  00000936  8B CF                                    mov     ecx,edi
    1535    1535  0 +  00000938  89 45 [E8]                               mov     [ebp-018h],eax; rc
    1536    1536  0 +
    1537    1537  0 +                                             ; 1853  if( rc = 0 )
    1538    1538  0 +  0000093B  85 C0                                    test    eax,eax
    1539    1539  0 +  0000093D  0F 85 00000B8A:R                         jne     @BLBL409
    1540    1540  0 +
    1541    1541  0 +                                             ; 1856  if( found = -1 )
    1542    1542  0 +  00000943  83 7D [E4] FF                            cmp     dword ptr [ebp-01ch],0ffffffffh;        found
    1543    1543  0 +  00000947  0F 84 000009BB:R                         je      @BLBL410
    1544    1544  0 +
    1545    1545  0 +                                             ; 1858      Verbose(0, "DrvScan", "VRAID partition already there, stopping");
    1546    1546  0 +  0000094D  33 C0                                    xor     eax,eax
    1547    1547  0 +  0000094F  83 EC 0C                                 sub     esp,0ch
    1548    1548  0 +
    1549    1549  0 +                                             ; 1859      *dev = new VORDev(disk, info.area[found].start, info.area[found].size);
    1550    1550  0 +  00000952  89 4D [D8]                               mov     [ebp-028h],ecx; @CBE112
    1551    1551  0 +
    1552    1552  0 +                                             ; 1858      Verbose(0, "DrvScan", "VRAID partition already there, stopping");
    1553    1553  0 +  00000955  B9 0000057C:R                            mov     ecx,offset FLAT:@CBE44
    1554    1554  0 +  0000095A  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1555    1555  0 +  0000095F  E8 00000000:E                            call    Verbose
    1556    1556  0 +  00000964  83 C4 08                                 add     esp,08h
    1557    1557  0 +
    1558    1558  0 +                                             ; 1859      *dev = new VORDev(disk, info.area[found].start, info.area[found].size);
    1559    1559  0 +  00000967  B8 00000030                              mov     eax,030h
    1560    1560  0 +  0000096C  E8 00000000:E                            call    __nw__FUi
    1561    1561  0 +  00000971  83 C4 04                                 add     esp,04h
    1562    1562  0 +  00000974  8B D3                                    mov     edx,ebx
    1563    1563  0 +  00000976  89 45 [F0]                               mov     [ebp-010h],eax; __97
    1564    1564  0 +  00000979  85 C0                                    test    eax,eax
    1565    1565  0 +  0000097B  0F 84 000009AE:R                         je      @BLBL412
    1566    1566  0 +  00000981  8B 4D [E4]                               mov     ecx,[ebp-01ch]; found
    1567    1567  0 +  00000984  6B C9 14                                 imul    ecx,014h
    1568    1568  0 +  00000987  03 CE                                    add     ecx,esi
    1569    1569  0 +  00000989  C7 85 [FFFFFEF4]                         mov     dword ptr [ebp-010ch],01h;      __es
                                 00000001
    1570    1570  0 +  00000993  FF 71 [08]                               push    dword ptr [ecx+08h]
    1571    1571  0 +  00000996  8B 49 [04]                               mov     ecx,[ecx+04h]
    1572    1572  0 +  00000999  83 EC 0C                                 sub     esp,0ch
    1573    1573  0 +  0000099C  E8 00000000:E                            call    __ct__6VORDevFP8VOS2DiskUlT2
    1574    1574  0 +  000009A1  83 C4 10                                 add     esp,010h
    1575    1575  0 +  000009A4  C7 85 [FFFFFEF4]                         mov     dword ptr [ebp-010ch],0h;       __es
                                 00000000
    1576    1576  0 +  000009AE                                   @BLBL412:
    1577    1577  0 +  000009AE  8B 45 [D8]                               mov     eax,[ebp-028h]; @CBE112
    1578    1578  0 +  000009B1  8B 5D [F0]                               mov     ebx,[ebp-010h]; __97
    1579    1579  0 +  000009B4  89 18                                    mov     [eax],ebx
    1580    1580  0 +
    1581    1581  0 +                                             ; 1860      break;                              /* rc still 0 */
    1582    1582  0 +  000009B6  E9 00000B8A:R                            jmp     @BLBL409


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   35
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1583    1583  0 +  000009BB                                   @BLBL410:
    1584    1584  0 +
    1585    1585  0 +                                             ; 1863  if( info.cnt == 0 )
    1586    1586  0 +  000009BB  83 BD [FFFFFF08] 00                      cmp     dword ptr [ebp-0f8h],0h;        info
    1587    1587  0 +  000009C2  0F 85 00000A02:R                         jne     @BLBL413
    1588    1588  0 +
    1589    1589  0 +                                             ; 1865      Verbose(1, "DrvScan", "No room on disk, aborting");
    1590    1590  0 +  000009C8  83 EC 0C                                 sub     esp,0ch
    1591    1591  0 +  000009CB  B9 000005A4:R                            mov     ecx,offset FLAT:@CBE45
    1592    1592  0 +  000009D0  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1593    1593  0 +  000009D5  B8 00000001                              mov     eax,01h
    1594    1594  0 +  000009DA  E8 00000000:E                            call    Verbose
    1595    1595  0 +
    1596    1596  0 +                                             ; 1866      MyMessageBox(3, HWND_DESKTOP,
    1597    1597  0 +  000009DF  B9 000005C0:R                            mov     ecx,offset FLAT:@CBE46
    1598    1598  0 +  000009E4  BA 00000001                              mov     edx,01h
    1599    1599  0 +  000009E9  B8 00000003                              mov     eax,03h
    1600    1600  0 +  000009EE  E8 00000000:E                            call    MyMessageBox__FCiCUlPce
    1601    1601  0 +
    1602    1602  0 +                                             ; 1869      rc = ERROR_HANDLE_DISK_FULL;
    1603    1603  0 +  000009F3  C7 45 [E8] 00000027                      mov     dword ptr [ebp-018h],027h;      rc
    1604    1604  0 +
    1605    1605  0 +                                             ; 1866      MyMessageBox(3, HWND_DESKTOP,
    1606    1606  0 +  000009FA  83 C4 0C                                 add     esp,0ch
    1607    1607  0 +
    1608    1608  0 +                                             ; 1870      break;
    1609    1609  0 +  000009FD  E9 00000B8A:R                            jmp     @BLBL409
    1610    1610  0 +  00000A02                                   @BLBL413:
    1611    1611  0 +
    1612    1612  0 +                                             ; 1874  ul = WinDlgBox(HWND_DESKTOP, hwnd, AreaDlgProc,
    1613    1613  0 +  00000A02  8D 9D [FFFFFF08]                         lea     ebx,[ebp-0f8h]; info
    1614    1614  0 +  00000A08  53                                       push    ebx
    1615    1615  0 +  00000A09  68 000002D0                              push    02d0h
    1616    1616  0 +  00000A0E  6A 00                                    push    0h
    1617    1617  0 +  00000A10  68 00000000:E                            push    offset FLAT: AreaDlgProc
    1618    1618  0 +  00000A15  FF 75 [08]                               push    dword ptr [ebp+08h];    hwnd
    1619    1619  0 +  00000A18  6A 01                                    push    01h
    1620    1620  0 +  00000A1A  E8 00000000:E                            call    WinDlgBox
    1621    1621  0 +  00000A1F  83 C4 18                                 add     esp,018h
    1622    1622  0 +
    1623    1623  0 +                                             ; 1876  if( DID_OK = ul )
    1624    1624  0 +  00000A22  83 F8 01                                 cmp     eax,01h
    1625    1625  0 +  00000A25  0F 84 00000A51:R                         je      @BLBL414
    1626    1626  0 +
    1627    1627  0 +                                             ; 1878      Verbose(3, "DrvScan", "CreatePhysdev: user aborted");
    1628    1628  0 +  00000A2B  83 EC 0C                                 sub     esp,0ch
    1629    1629  0 +  00000A2E  B9 00000600:R                            mov     ecx,offset FLAT:@CBE47
    1630    1630  0 +  00000A33  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    1631    1631  0 +  00000A38  B8 00000003                              mov     eax,03h
    1632    1632  0 +  00000A3D  E8 00000000:E                            call    Verbose
    1633    1633  0 +
    1634    1634  0 +                                             ; 1879      rc = ERROR_HANDLE_DISK_FULL;
    1635    1635  0 +  00000A42  C7 45 [E8] 00000027                      mov     dword ptr [ebp-018h],027h;      rc
    1636    1636  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   36
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1637    1637  0 +                                             ; 1878      Verbose(3, "DrvScan", "CreatePhysdev: user aborted");
    1638    1638  0 +  00000A49  83 C4 0C                                 add     esp,0ch
    1639    1639  0 +
    1640    1640  0 +                                             ; 1880      break;
    1641    1641  0 +  00000A4C  E9 00000B8A:R                            jmp     @BLBL409
    1642    1642  0 +  00000A51                                   @BLBL414:
    1643    1643  0 +
    1644    1644  0 +                                             ; 1883  struct _DSKAREA_ENTRY * vpart = &info.area[info.cnt];
    1645    1645  0 +  00000A51  8B 9D [FFFFFF08]                         mov     ebx,[ebp-0f8h]; info
    1646    1646  0 +  00000A57  6B DB 14                                 imul    ebx,014h
    1647    1647  0 +  00000A5A  8D 9C/1D [FFFFFF0C]                      lea     ebx,dword ptr [ebp+ebx-0f4h]
    1648    1648  0 +  00000A61  89 5D [E0]                               mov     [ebp-020h],ebx; vpart
    1649    1649  0 +
    1650    1650  0 +                                             ; 1884  vpart->type = VRAID_PARTTYPE;
    1651    1651  0 +  00000A64  C6 43 [08] 7C                            mov     byte ptr [ebx+08h],07ch
    1652    1652  0 +
    1653    1653  0 +                                             ; 1885  vpart->bootable = 0;
    1654    1654  0 +  00000A68  8B 4D [E0]                               mov     ecx,[ebp-020h]; vpart
    1655    1655  0 +
    1656    1656  0 +                                             ; 1886  if( vpart->ptsec == 0 )
    1657    1657  0 +  00000A6B  8B 51 [0C]                               mov     edx,[ecx+0ch]
    1658    1658  0 +
    1659    1659  0 +                                             ; 1885  vpart->bootable = 0;
    1660    1660  0 +  00000A6E  C6 41 [09] 00                            mov     byte ptr [ecx+09h],0h
    1661    1661  0 +
    1662    1662  0 +                                             ; 1886  if( vpart->ptsec == 0 )
    1663    1663  0 +  00000A72  85 D2                                    test    edx,edx
    1664    1664  0 +  00000A74  0F 85 00000A8D:R                         jne     @BLBL415
    1665    1665  0 +
    1666    1666  0 +                                             ; 1887      rc = CreatePriPartition(disk, vpart->ptsec, vpart);
    1667    1667  0 +  00000A7A  8B 45 [0C]                               mov     eax,[ebp+0ch];  disk
    1668    1668  0 +  00000A7D  83 EC 0C                                 sub     esp,0ch
    1669    1669  0 +  00000A80  E8 00000B9F:R                            call    CreatePriPartition__FCP8VOS2DiskCUlCP14_DSKAREA_ENTRY
    1670    1670  0 +  00000A85  83 C4 0C                                 add     esp,0ch
    1671    1671  0 +  00000A88  EB 1D 90 90 90                           jmp     @BLBL416
    1672    1672  0 +  00000A8D                                   @BLBL415:
    1673    1673  0 +
    1674    1674  0 +                                             ; 1891      rc = CreateLogPartition(disk, vpart->ptsec, vpart);
    1675    1675  0 +  00000A8D  83 EC 0C                                 sub     esp,0ch
    1676    1676  0 +
    1677    1677  0 +                                             ; 1890      vpart->bootable = 0x80;
    1678    1678  0 +  00000A90  8B 55 [E0]                               mov     edx,[ebp-020h]; vpart
    1679    1679  0 +
    1680    1680  0 +                                             ; 1891      rc = CreateLogPartition(disk, vpart->ptsec, vpart);
    1681    1681  0 +  00000A93  8B CA                                    mov     ecx,edx
    1682    1682  0 +
    1683    1683  0 +                                             ; 1890      vpart->bootable = 0x80;
    1684    1684  0 +  00000A95  C6 42 [09] 80                            mov     byte ptr [edx+09h],080h
    1685    1685  0 +
    1686    1686  0 +                                             ; 1891      rc = CreateLogPartition(disk, vpart->ptsec, vpart);
    1687    1687  0 +  00000A99  8B 52 [0C]                               mov     edx,[edx+0ch]
    1688    1688  0 +  00000A9C  8B 45 [0C]                               mov     eax,[ebp+0ch];  disk
    1689    1689  0 +  00000A9F  E8 00000C89:R                            call    CreateLogPartition__FCP8VOS2DiskCUlCP14_DSKAREA_ENTRY
    1690    1690  0 +  00000AA4  83 C4 0C                                 add     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   37
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1691    1691  0 +
    1692    1692  0 +                                             ; 1892  }
    1693    1693  0 +  00000AA7                                   @BLBL416:
    1694    1694  0 +
    1695    1695  0 +                                             ; 1893  if( rc = 0 )
    1696    1696  0 +  00000AA7  89 45 [E8]                               mov     [ebp-018h],eax; rc
    1697    1697  0 +  00000AAA  85 C0                                    test    eax,eax
    1698    1698  0 +  00000AAC  0F 85 00000B8A:R                         jne     @BLBL409
    1699    1699  0 +
    1700    1700  0 +                                             ; 1901  PUCHAR  p = new UCHAR[2*SECTOR_SIZE];
    1701    1701  0 +  00000AB2  83 EC 04                                 sub     esp,04h
    1702    1702  0 +  00000AB5  B8 00000400                              mov     eax,0400h
    1703    1703  0 +  00000ABA  E8 00000000:E                            call    __vn__FUi
    1704    1704  0 +  00000ABF  83 EC 08                                 sub     esp,08h
    1705    1705  0 +  00000AC2  8B D8                                    mov     ebx,eax
    1706    1706  0 +
    1707    1707  0 +                                             ; 1902  memset(p, 0, 2*SECTOR_SIZE);
    1708    1708  0 +  00000AC4  B9 00000400                              mov     ecx,0400h
    1709    1709  0 +  00000AC9  33 D2                                    xor     edx,edx
    1710    1710  0 +  00000ACB  E8 00000000:E                            call    memset
    1711    1711  0 +
    1712    1712  0 +                                             ; 1901  PUCHAR  p = new UCHAR[2*SECTOR_SIZE];
    1713    1713  0 +  00000AD0  89 5D [DC]                               mov     [ebp-024h],ebx; p
    1714    1714  0 +
    1715    1715  0 +                                             ; 1902  memset(p, 0, 2*SECTOR_SIZE);
    1716    1716  0 +  00000AD3  83 C4 0C                                 add     esp,0ch
    1717    1717  0 +
    1718    1718  0 +                                             ; 1903  rc = disk->write(vpart->start, 2, p);
    1719    1719  0 +  00000AD6  8B 45 [0C]                               mov     eax,[ebp+0ch];  disk
    1720    1720  0 +  00000AD9  53                                       push    ebx
    1721    1721  0 +  00000ADA  8B 18                                    mov     ebx,[eax]
    1722    1722  0 +  00000ADC  8B 55 [E0]                               mov     edx,[ebp-020h]; vpart
    1723    1723  0 +  00000ADF  83 EC 0C                                 sub     esp,0ch
    1724    1724  0 +  00000AE2  8B 7B [24]                               mov     edi,[ebx+024h]
    1725    1725  0 +  00000AE5  8B 12                                    mov     edx,[edx]
    1726    1726  0 +  00000AE7  B9 00000002                              mov     ecx,02h
    1727    1727  0 +  00000AEC  03 C7                                    add     eax,edi
    1728    1728  0 +  00000AEE  FF 53 [20]                               call    dword ptr [ebx+020h]
    1729    1729  0 +  00000AF1  83 C4 10                                 add     esp,010h
    1730    1730  0 +  00000AF4  89 45 [E8]                               mov     [ebp-018h],eax; rc
    1731    1731  0 +
    1732    1732  0 +                                             ; 1904  if( rc = 0 )
    1733    1733  0 +  00000AF7  85 C0                                    test    eax,eax
    1734    1734  0 +  00000AF9  0F 84 00000B1A:R                         je      @BLBL418
    1735    1735  0 +
    1736    1736  0 +                                             ; 1905      Verbose(1,"DevScan","CreatePhysdev: can't clear SEC_PHYSDEV- rc %lu",rc);
    1737    1737  0 +  00000AFF  50                                       push    eax
    1738    1738  0 +  00000B00  B9 00000624:R                            mov     ecx,offset FLAT:@CBE49
    1739    1739  0 +  00000B05  83 EC 0C                                 sub     esp,0ch
    1740    1740  0 +  00000B08  BA 0000061C:R                            mov     edx,offset FLAT:@CBE48
    1741    1741  0 +  00000B0D  B8 00000001                              mov     eax,01h
    1742    1742  0 +  00000B12  E8 00000000:E                            call    Verbose
    1743    1743  0 +  00000B17  83 C4 10                                 add     esp,010h
    1744    1744  0 +  00000B1A                                   @BLBL418:


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   38
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1745    1745  0 +
    1746    1746  0 +                                             ; 1908  *dev = new VORDev(disk, vpart->start, vpart->size);
    1747    1747  0 +  00000B1A  8B 5D [10]                               mov     ebx,[ebp+010h]; dev
    1748    1748  0 +
    1749    1749  0 +                                             ; 1906  delete[] p;
    1750    1750  0 +  00000B1D  83 EC 04                                 sub     esp,04h
    1751    1751  0 +  00000B20  8B 45 [DC]                               mov     eax,[ebp-024h]; p
    1752    1752  0 +  00000B23  E8 00000000:E                            call    __vd__FPv
    1753    1753  0 +
    1754    1754  0 +                                             ; 1908  *dev = new VORDev(disk, vpart->start, vpart->size);
    1755    1755  0 +  00000B28  B8 00000030                              mov     eax,030h
    1756    1756  0 +  00000B2D  E8 00000000:E                            call    __nw__FUi
    1757    1757  0 +  00000B32  89 5D [D4]                               mov     [ebp-02ch],ebx; @CBE113
    1758    1758  0 +  00000B35  83 C4 04                                 add     esp,04h
    1759    1759  0 +  00000B38  89 45 [EC]                               mov     [ebp-014h],eax; __99
    1760    1760  0 +  00000B3B  85 C0                                    test    eax,eax
    1761    1761  0 +  00000B3D  0F 84 00000B6D:R                         je      @BLBL420
    1762    1762  0 +  00000B43  8B 4D [E0]                               mov     ecx,[ebp-020h]; vpart
    1763    1763  0 +  00000B46  C7 85 [FFFFFEF4]                         mov     dword ptr [ebp-010ch],02h;      __es
                                 00000002
    1764    1764  0 +  00000B50  FF 71 [04]                               push    dword ptr [ecx+04h]
    1765    1765  0 +  00000B53  8B 09                                    mov     ecx,[ecx]
    1766    1766  0 +  00000B55  83 EC 0C                                 sub     esp,0ch
    1767    1767  0 +  00000B58  8B 55 [0C]                               mov     edx,[ebp+0ch];  disk
    1768    1768  0 +  00000B5B  E8 00000000:E                            call    __ct__6VORDevFP8VOS2DiskUlT2
    1769    1769  0 +  00000B60  83 C4 10                                 add     esp,010h
    1770    1770  0 +  00000B63  C7 85 [FFFFFEF4]                         mov     dword ptr [ebp-010ch],0h;       __es
                                 00000000
    1771    1771  0 +  00000B6D                                   @BLBL420:
    1772    1772  0 +
    1773    1773  0 +                                             ; 1909  (*dev)->ioSync();
    1774    1774  0 +  00000B6D  83 EC 04                                 sub     esp,04h
    1775    1775  0 +
    1776    1776  0 +                                             ; 1908  *dev = new VORDev(disk, vpart->start, vpart->size);
    1777    1777  0 +  00000B70  8B 5D [D4]                               mov     ebx,[ebp-02ch]; @CBE113
    1778    1778  0 +  00000B73  8B 4D [EC]                               mov     ecx,[ebp-014h]; __99
    1779    1779  0 +  00000B76  89 0B                                    mov     [ebx],ecx
    1780    1780  0 +
    1781    1781  0 +                                             ; 1909  (*dev)->ioSync();
    1782    1782  0 +  00000B78  8B 45 [10]                               mov     eax,[ebp+010h]; dev
    1783    1783  0 +  00000B7B  8B 00                                    mov     eax,[eax]
    1784    1784  0 +  00000B7D  8B 18                                    mov     ebx,[eax]
    1785    1785  0 +  00000B7F  8B 4B [54]                               mov     ecx,[ebx+054h]
    1786    1786  0 +  00000B82  03 C1                                    add     eax,ecx
    1787    1787  0 +  00000B84  FF 53 [50]                               call    dword ptr [ebx+050h]
    1788    1788  0 +  00000B87  83 C4 04                                 add     esp,04h
    1789    1789  0 +
    1790    1790  0 +                                             ; 1911     while(0);
    1791    1791  0 +  00000B8A                                   @BLBL409:
    1792    1792  0 +
    1793    1793  0 +                                             ; 1913     return rc;
    1794    1794  0 +  00000B8A  5E                                       pop     esi
    1795    1795  0 +  00000B8B  8B 45 [E8]                               mov     eax,[ebp-018h]; rc
    1796    1796  0 +  00000B8E  5F                                       pop     edi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   39
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1797    1797  0 +  00000B8F  5B                                       pop     ebx
    1798    1798  0 +  00000B90  81 C4 00000104                           add     esp,0104h
    1799    1799  0 +  00000B96  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1799:6): Warning ALP4511: Assuming segment width for operand size
    1800    1800  0 +  00000B9D  C9                                       leave
    1801    1801  0 +  00000B9E  C3                                       ret
    1802    1802  0 +  00000B9F                                   CreatePhysdev__FUlCP8VOS2DiskPP6VORDev  endp
    1803    1803  0 +
    1804    1804  0 +                                             ; 1804 CreatePriPartition(VOS2Disk * const disk,ULONG const ptsec,
    1805    1805  0 +
    1806    1806  0 +  00000B9F                                   CreatePriPartition__FCP8VOS2DiskCUlCP14_DSKAREA_ENTRY   proc
    1807    1807  0 +  00000B9F  55                                       push    ebp
    1808    1808  0 +  00000BA0  8B EC                                    mov     ebp,esp
    1809    1809  0 +  00000BA2  68 00000000:E                            push    offset FLAT: _Exception_CPP
    1810    1810  0 +  00000BA7  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1810:7): Warning ALP4511: Assuming segment width for operand size
    1811    1811  0 +  00000BAE  64:89 25 [00000000]                      mov     fs:[0h],esp
    1812    1812  0 +  00000BB5  68 FFFFFDC4                              push    0fffffdc4h
    1813    1813  0 +  00000BBA  81 EC 00000230                           sub     esp,0230h
    1814    1814  0 +
    1815    1815  0 +                                             ; 1806 {
    1816    1816  0 +  00000BC0  C7 85 [FFFFFDC4]                         mov     dword ptr [ebp-023ch],0h;       __es
                                 00000000
    1817    1817  0 +
    1818    1818  0 +                                             ; 1804 CreatePriPartition(VOS2Disk * const disk,ULONG const ptsec,
    1819    1819  0 +  00000BCA  53                                       push    ebx
    1820    1820  0 +
    1821    1821  0 +                                             ; 1806 {
    1822    1822  0 +  00000BCB  C7 85 [FFFFFDCC]                         mov     dword ptr [ebp-0234h],offset FLAT:@1cb__fsm_tab;        __es
                                 000001A4:R
    1823    1823  0 +
    1824    1824  0 +                                             ; 1804 CreatePriPartition(VOS2Disk * const disk,ULONG const ptsec,
    1825    1825  0 +  00000BD5  57                                       push    edi
    1826    1826  0 +  00000BD6  8B F9                                    mov     edi,ecx
    1827    1827  0 +  00000BD8  56                                       push    esi
    1828    1828  0 +  00000BD9  8B F0                                    mov     esi,eax
    1829    1829  0 +
    1830    1830  0 +                                             ; 1808     Verbose(2,"CreatePriPartition","start %lu, size %lu",vpart->start,vpart->size);
    1831    1831  0 +  00000BDB  FF 77 [04]                               push    dword ptr [edi+04h]
    1832    1832  0 +
    1833    1833  0 +                                             ; 1804 CreatePriPartition(VOS2Disk * const disk,ULONG const ptsec,
    1834    1834  0 +  00000BDE  8B DA                                    mov     ebx,edx
    1835    1835  0 +
    1836    1836  0 +                                             ; 1808     Verbose(2,"CreatePriPartition","start %lu, size %lu",vpart->start,vpart->size);
    1837    1837  0 +  00000BE0  FF 37                                    push    dword ptr [edi]
    1838    1838  0 +  00000BE2  B8 00000568:R                            mov     eax,offset FLAT:@CBE43
    1839    1839  0 +  00000BE7  83 EC 0C                                 sub     esp,0ch
    1840    1840  0 +  00000BEA  8B D0                                    mov     edx,eax
    1841    1841  0 +  00000BEC  B9 0000051C:R                            mov     ecx,offset FLAT:@CBE40
    1842    1842  0 +  00000BF1  B8 00000002                              mov     eax,02h
    1843    1843  0 +  00000BF6  E8 00000000:E                            call    Verbose
    1844    1844  0 +  00000BFB  83 C4 14                                 add     esp,014h
    1845    1845  0 +  00000BFE  BA 00000568:R                            mov     edx,offset FLAT:@CBE43
    1846    1846  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   40
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1847    1847  0 +                                             ; 1809     Verbose(2,"CreatePriPartition","table %lu", ptsec);
    1848    1848  0 +  00000C03  53                                       push    ebx
    1849    1849  0 +  00000C04  B9 00000530:R                            mov     ecx,offset FLAT:@CBE41
    1850    1850  0 +  00000C09  83 EC 0C                                 sub     esp,0ch
    1851    1851  0 +  00000C0C  B8 00000002                              mov     eax,02h
    1852    1852  0 +  00000C11  E8 00000000:E                            call    Verbose
    1853    1853  0 +  00000C16  8B D3                                    mov     edx,ebx
    1854    1854  0 +  00000C18  83 C4 10                                 add     esp,010h
    1855    1855  0 +  00000C1B  8B C6                                    mov     eax,esi
    1856    1856  0 +
    1857    1857  0 +                                             ; 1811     PartTable    pt(disk, ptsec);
    1858    1858  0 +  00000C1D  6A 00                                    push    0h
    1859    1859  0 +  00000C1F  8B CA                                    mov     ecx,edx
    1860    1860  0 +  00000C21  83 EC 0C                                 sub     esp,0ch
    1861    1861  0 +  00000C24  8B D0                                    mov     edx,eax
    1862    1862  0 +  00000C26  8D 9D [FFFFFDD8]                         lea     ebx,[ebp-0228h];        pt
    1863    1863  0 +  00000C2C  8B C3                                    mov     eax,ebx
    1864    1864  0 +  00000C2E  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUl7Boolean
    1865    1865  0 +  00000C33  83 C4 10                                 add     esp,010h
    1866    1866  0 +  00000C36  8B D7                                    mov     edx,edi
    1867    1867  0 +  00000C38  C7 85 [FFFFFDC4]                         mov     dword ptr [ebp-023ch],01h;      __es
                                 00000001
    1868    1868  0 +
    1869    1869  0 +                                             ; 1812     pt.addOwn(vpart->type, vpart->bootable, vpart->start, vpart->size);
    1870    1870  0 +  00000C42  FF 72 [04]                               push    dword ptr [edx+04h]
    1871    1871  0 +  00000C45  8A 4A [09]                               mov     cl,[edx+09h]
    1872    1872  0 +  00000C48  FF 32                                    push    dword ptr [edx]
    1873    1873  0 +  00000C4A  8A 52 [08]                               mov     dl,[edx+08h]
    1874    1874  0 +  00000C4D  83 EC 0C                                 sub     esp,0ch
    1875    1875  0 +  00000C50  8B C3                                    mov     eax,ebx
    1876    1876  0 +  00000C52  E8 00000000:E                            call    addOwn__9PartTableFUcT1UlT3
    1877    1877  0 +  00000C57  83 C4 0C                                 add     esp,0ch
    1878    1878  0 +  00000C5A  8B C3                                    mov     eax,ebx
    1879    1879  0 +
    1880    1880  0 +                                             ; 1814     return 0;
    1881    1881  0 +  00000C5C  C7 85 [FFFFFDC4]                         mov     dword ptr [ebp-023ch],0h;       __es
                                 00000000
    1882    1882  0 +  00000C66  BA 00000002                              mov     edx,02h
    1883    1883  0 +  00000C6B  E8 00000000:E                            call    __dt__9PartTableFv
    1884    1884  0 +  00000C70  83 C4 08                                 add     esp,08h
    1885    1885  0 +  00000C73  33 DB                                    xor     ebx,ebx
    1886    1886  0 +  00000C75  5E                                       pop     esi
    1887    1887  0 +  00000C76  8B C3                                    mov     eax,ebx
    1888    1888  0 +  00000C78  5F                                       pop     edi
    1889    1889  0 +  00000C79  5B                                       pop     ebx
    1890    1890  0 +  00000C7A  81 C4 00000234                           add     esp,0234h
    1891    1891  0 +  00000C80  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1891:6): Warning ALP4511: Assuming segment width for operand size
    1892    1892  0 +  00000C87  C9                                       leave
    1893    1893  0 +  00000C88  C3                                       ret
    1894    1894  0 +  00000C89                                   CreatePriPartition__FCP8VOS2DiskCUlCP14_DSKAREA_ENTRY   endp
    1895    1895  0 +
    1896    1896  0 +                                             ; 1658 CreateLogPartition(VOS2Disk * const disk,ULONG const ptsec,
    1897    1897  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   41
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1898    1898  0 +  00000C89                                   CreateLogPartition__FCP8VOS2DiskCUlCP14_DSKAREA_ENTRY   proc
    1899    1899  0 +  00000C89  55                                       push    ebp
    1900    1900  0 +  00000C8A  8B EC                                    mov     ebp,esp
    1901    1901  0 +  00000C8C  68 00000000:E                            push    offset FLAT: _Exception_CPP
    1902    1902  0 +  00000C91  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(1902:7): Warning ALP4511: Assuming segment width for operand size
    1903    1903  0 +  00000C98  64:89 25 [00000000]                      mov     fs:[0h],esp
    1904    1904  0 +  00000C9F  68 FFFFF970                              push    0fffff970h
    1905    1905  0 +  00000CA4  81 EC 00000684                           sub     esp,0684h
    1906    1906  0 +
    1907    1907  0 +                                             ; 1660 {
    1908    1908  0 +  00000CAA  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],0h;       __es
                                 00000000
    1909    1909  0 +
    1910    1910  0 +                                             ; 1658 CreateLogPartition(VOS2Disk * const disk,ULONG const ptsec,
    1911    1911  0 +  00000CB4  53                                       push    ebx
    1912    1912  0 +  00000CB5  8B DA                                    mov     ebx,edx
    1913    1913  0 +  00000CB7  57                                       push    edi
    1914    1914  0 +  00000CB8  8B F9                                    mov     edi,ecx
    1915    1915  0 +  00000CBA  56                                       push    esi
    1916    1916  0 +  00000CBB  8B F0                                    mov     esi,eax
    1917    1917  0 +  00000CBD  89 7D [10]                               mov     [ebp+010h],edi; vpart
    1918    1918  0 +  00000CC0  89 5D [0C]                               mov     [ebp+0ch],ebx;  ptsec
    1919    1919  0 +
    1920    1920  0 +                                             ; 1662     Verbose(2,"CreateLogPartition","start %lu, size %lu",vpart->start,vpart->size);
    1921    1921  0 +  00000CC3  B8 00000508:R                            mov     eax,offset FLAT:@CBE39
    1922    1922  0 +
    1923    1923  0 +                                             ; 1658 CreateLogPartition(VOS2Disk * const disk,ULONG const ptsec,
    1924    1924  0 +  00000CC8  89 75 [08]                               mov     [ebp+08h],esi;  disk
    1925    1925  0 +
    1926    1926  0 +                                             ; 1660 {
    1927    1927  0 +  00000CCB  C7 85 [FFFFF978]                         mov     dword ptr [ebp-0688h],offset FLAT:@1b8__fsm_tab;        __es
                                 00000160:R
    1928    1928  0 +
    1929    1929  0 +                                             ; 1662     Verbose(2,"CreateLogPartition","start %lu, size %lu",vpart->start,vpart->size);
    1930    1930  0 +  00000CD5  FF 77 [04]                               push    dword ptr [edi+04h]
    1931    1931  0 +  00000CD8  8B D0                                    mov     edx,eax
    1932    1932  0 +  00000CDA  FF 37                                    push    dword ptr [edi]
    1933    1933  0 +  00000CDC  B9 0000051C:R                            mov     ecx,offset FLAT:@CBE40
    1934    1934  0 +  00000CE1  83 EC 0C                                 sub     esp,0ch
    1935    1935  0 +  00000CE4  B8 00000002                              mov     eax,02h
    1936    1936  0 +  00000CE9  E8 00000000:E                            call    Verbose
    1937    1937  0 +  00000CEE  83 C4 14                                 add     esp,014h
    1938    1938  0 +  00000CF1  BA 00000508:R                            mov     edx,offset FLAT:@CBE39
    1939    1939  0 +
    1940    1940  0 +                                             ; 1663     Verbose(2,"CreateLogPartition","table %lu", ptsec);
    1941    1941  0 +  00000CF6  B9 00000530:R                            mov     ecx,offset FLAT:@CBE41
    1942    1942  0 +  00000CFB  53                                       push    ebx
    1943    1943  0 +  00000CFC  83 EC 0C                                 sub     esp,0ch
    1944    1944  0 +  00000CFF  B8 00000002                              mov     eax,02h
    1945    1945  0 +  00000D04  E8 00000000:E                            call    Verbose
    1946    1946  0 +  00000D09  8B D7                                    mov     edx,edi
    1947    1947  0 +  00000D0B  83 C4 10                                 add     esp,010h
    1948    1948  0 +  00000D0E  8B C6                                    mov     eax,esi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   42
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    1949    1949  0 +
    1950    1950  0 +                                             ; 1665     PartTable    pt(disk, ptsec, vpart->extstart);
    1951    1951  0 +  00000D10  FF 72 [10]                               push    dword ptr [edx+010h]
    1952    1952  0 +
    1953    1953  0 +                                             ; 1671  int             log_idx = -1;
    1954    1954  0 +  00000D13  C7 85 [FFFFF994]                         mov     dword ptr [ebp-066ch],0ffffffffh;       log_idx
                                 FFFFFFFF
    1955    1955  0 +
    1956    1956  0 +                                             ; 1665     PartTable    pt(disk, ptsec, vpart->extstart);
    1957    1957  0 +  00000D1D  83 EC 0C                                 sub     esp,0ch
    1958    1958  0 +  00000D20  8B D0                                    mov     edx,eax
    1959    1959  0 +
    1960    1960  0 +                                             ; 1663     Verbose(2,"CreateLogPartition","table %lu", ptsec);
    1961    1961  0 +  00000D22  8B CB                                    mov     ecx,ebx
    1962    1962  0 +
    1963    1963  0 +                                             ; 1665     PartTable    pt(disk, ptsec, vpart->extstart);
    1964    1964  0 +  00000D24  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    1965    1965  0 +  00000D2A  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUlT2
    1966    1966  0 +
    1967    1967  0 +                                             ; 1672  int             ext_idx = -1;
    1968    1968  0 +  00000D2F  C7 85 [FFFFF99C]                         mov     dword ptr [ebp-0664h],0ffffffffh;       ext_idx
                                 FFFFFFFF
    1969    1969  0 +
    1970    1970  0 +                                             ; 1665     PartTable    pt(disk, ptsec, vpart->extstart);
    1971    1971  0 +  00000D39  83 C4 10                                 add     esp,010h
    1972    1972  0 +
    1973    1973  0 +                                             ; 1673  for( int i = 0; i < 4; ++i )
    1974    1974  0 +  00000D3C  8B 5D [F0]                               mov     ebx,[ebp-010h]; pt
    1975    1975  0 +
    1976    1976  0 +                                             ; 1665     PartTable    pt(disk, ptsec, vpart->extstart);
    1977    1977  0 +  00000D3F  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],01h;      __es
                                 00000001
    1978    1978  0 +
    1979    1979  0 +                                             ; 1673  for( int i = 0; i < 4; ++i )
    1980    1980  0 +  00000D49  33 F6                                    xor     esi,esi
    1981    1981  0 +  00000D4B  33 FF                                    xor     edi,edi
    1982    1982  0 +  00000D4D                                   @BLBL389:
    1983    1983  0 +
    1984    1984  0 +                                             ; 1675      switch( pt.entry[i].SysIndicator )
    1985    1985  0 +  00000D4D  0F B6 44/33 [04]                         movzx   eax,byte ptr [ebx+esi+04h]
    1986    1986  0 +  00000D52  85 C0                                    test    eax,eax
    1987    1987  0 +  00000D54  0F 84 00000D74:R                         je      @BLBL491
    1988    1988  0 +  00000D5A  83 F8 05                                 cmp     eax,05h
    1989    1989  0 +  00000D5D  0F 85 00000D6E:R                         jne     @BLBL493
    1990    1990  0 +  00000D63                                   @BLBL492:
    1991    1991  0 +
    1992    1992  0 +                                             ; 1678          ext_idx = i;
    1993    1993  0 +  00000D63  89 BD [FFFFF99C]                         mov     [ebp-0664h],edi;        ext_idx
    1994    1994  0 +
    1995    1995  0 +                                             ; 1679          break;
    1996    1996  0 +  00000D69  EB 09 90 90 90                           jmp     @BLBL491
    1997    1997  0 +  00000D6E                                   @BLBL493:
    1998    1998  0 +
    1999    1999  0 +                                             ; 1682          log_idx = i;


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   43
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2000    2000  0 +  00000D6E  89 BD [FFFFF994]                         mov     [ebp-066ch],edi;        log_idx
    2001    2001  0 +
    2002    2002  0 +                                             ; 1686          break;                          /* nothing */
    2003    2003  0 +  00000D74                                   @BLBL491:
    2004    2004  0 +
    2005    2005  0 +                                             ; 1673  for( int i = 0; i < 4; ++i )
    2006    2006  0 +  00000D74  47                                       inc     edi
    2007    2007  0 +  00000D75  83 C6 10                                 add     esi,010h
    2008    2008  0 +  00000D78  83 FF 04                                 cmp     edi,04h
    2009    2009  0 +  00000D7B  7C D0                                    jl      @BLBL389
    2010    2010  0 +
    2011    2011  0 +                                             ; 1690  if( log_idx = -1 )
    2012    2012  0 +  00000D7D  8B 85 [FFFFF994]                         mov     eax,[ebp-066ch];        log_idx
    2013    2013  0 +  00000D83  83 F8 FF                                 cmp     eax,0ffffffffh
    2014    2014  0 +  00000D86  0F 84 0000102E:R                         je      @BLBL393
    2015    2015  0 +
    2016    2016  0 +                                             ; 1692      PPARTITIONENTRY const le = &pt.entry[log_idx];
    2017    2017  0 +  00000D8C  8B C8                                    mov     ecx,eax
    2018    2018  0 +  00000D8E  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2019    2019  0 +  00000D91  C1 E1 04                                 sal     ecx,04h
    2020    2020  0 +  00000D94  03 D1                                    add     edx,ecx
    2021    2021  0 +
    2022    2022  0 +                                             ; 1697      if( ptsec + le->RelativeSectors > vpart->start )
    2023    2023  0 +  00000D96  8B 5D [10]                               mov     ebx,[ebp+010h]; vpart
    2024    2024  0 +
    2025    2025  0 +                                             ; 1692      PPARTITIONENTRY const le = &pt.entry[log_idx];
    2026    2026  0 +  00000D99  89 95 [FFFFF998]                         mov     [ebp-0668h],edx;        le
    2027    2027  0 +
    2028    2028  0 +                                             ; 1697      if( ptsec + le->RelativeSectors > vpart->start )
    2029    2029  0 +  00000D9F  8B 4D [0C]                               mov     ecx,[ebp+0ch];  ptsec
    2030    2030  0 +  00000DA2  8B 7A [08]                               mov     edi,[edx+08h]
    2031    2031  0 +  00000DA5  03 F9                                    add     edi,ecx
    2032    2032  0 +  00000DA7  39 3B                                    cmp     [ebx],edi
    2033    2033  0 +  00000DA9  0F 83 00000F1F:R                         jae     @BLBL394
    2034    2034  0 +
    2035    2035  0 +                                             ; 1708          if( le->BegHead = 1 )
    2036    2036  0 +  00000DAF  80 7A [01] 01                            cmp     byte ptr [edx+01h],01h
    2037    2037  0 +  00000DB3  0F 84 00000E09:R                         je      @BLBL395
    2038    2038  0 +
    2039    2039  0 +                                             ; 1710              Verbose(1, "CreateLogPartition",
    2040    2040  0 +  00000DB9  51                                       push    ecx
    2041    2041  0 +  00000DBA  B9 0000053C:R                            mov     ecx,offset FLAT:@CBE42
    2042    2042  0 +  00000DBF  50                                       push    eax
    2043    2043  0 +  00000DC0  BA 00000508:R                            mov     edx,offset FLAT:@CBE39
    2044    2044  0 +  00000DC5  83 EC 0C                                 sub     esp,0ch
    2045    2045  0 +  00000DC8  B8 00000001                              mov     eax,01h
    2046    2046  0 +  00000DCD  E8 00000000:E                            call    Verbose
    2047    2047  0 +  00000DD2  83 C4 0C                                 add     esp,0ch
    2048    2048  0 +
    2049    2049  0 +                                             ; 1713              return (APIRET)-1;
    2050    2050  0 +  00000DD5  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],0h;       __es
                                 00000000
    2051    2051  0 +  00000DDF  BA 00000002                              mov     edx,02h
    2052    2052  0 +  00000DE4  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   44
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2053    2053  0 +  00000DEA  E8 00000000:E                            call    __dt__9PartTableFv
    2054    2054  0 +  00000DEF  83 C4 08                                 add     esp,08h
    2055    2055  0 +  00000DF2  83 CE FF                                 or      esi,0ffffffffh
    2056    2056  0 +  00000DF5  8B C6                                    mov     eax,esi
    2057    2057  0 +  00000DF7  5E                                       pop     esi
    2058    2058  0 +  00000DF8  5F                                       pop     edi
    2059    2059  0 +  00000DF9  5B                                       pop     ebx
    2060    2060  0 +  00000DFA  81 C4 00000688                           add     esp,0688h
    2061    2061  0 +  00000E00  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(2061:6): Warning ALP4511: Assuming segment width for operand size
    2062    2062  0 +  00000E07  C9                                       leave
    2063    2063  0 +  00000E08  C3                                       ret
    2064    2064  0 +  00000E09                                   @BLBL395:
    2065    2065  0 +
    2066    2066  0 +                                             ; 1716          ULONG const     spt = disk->queryDPB().cSectorsPerTrack;
    2067    2067  0 +  00000E09  8B 5D [08]                               mov     ebx,[ebp+08h];  disk
    2068    2068  0 +  00000E0C  83 EC 04                                 sub     esp,04h
    2069    2069  0 +  00000E0F  8B C3                                    mov     eax,ebx
    2070    2070  0 +  00000E11  E8 00000000:E                            call    queryDPB__8VOS2DiskFv
    2071    2071  0 +
    2072    2072  0 +                                             ; 1717          PartTable       newpt(disk, ptsec + le->RelativeSectors - spt,
    2073    2073  0 +  00000E16  8B 4D [10]                               mov     ecx,[ebp+010h]; vpart
    2074    2074  0 +
    2075    2075  0 +                                             ; 1716          ULONG const     spt = disk->queryDPB().cSectorsPerTrack;
    2076    2076  0 +  00000E19  83 C4 04                                 add     esp,04h
    2077    2077  0 +  00000E1C  0F B7 70 [06]                            movzx   esi,word ptr [eax+06h]
    2078    2078  0 +  00000E20  89 B5 [FFFFF98C]                         mov     [ebp-0674h],esi;        spt
    2079    2079  0 +
    2080    2080  0 +                                             ; 1717          PartTable       newpt(disk, ptsec + le->RelativeSectors - spt,
    2081    2081  0 +  00000E26  FF 71 [10]                               push    dword ptr [ecx+010h]
    2082    2082  0 +
    2083    2083  0 +                                             ; 1716          ULONG const     spt = disk->queryDPB().cSectorsPerTrack;
    2084    2084  0 +  00000E29  8B D3                                    mov     edx,ebx
    2085    2085  0 +
    2086    2086  0 +                                             ; 1717          PartTable       newpt(disk, ptsec + le->RelativeSectors - spt,
    2087    2087  0 +  00000E2B  83 EC 0C                                 sub     esp,0ch
    2088    2088  0 +  00000E2E  8B BD [FFFFF998]                         mov     edi,[ebp-0668h];        le
    2089    2089  0 +  00000E34  8D 9D [FFFFFBBC]                         lea     ebx,[ebp-0444h];        newpt
    2090    2090  0 +  00000E3A  8B 4F [08]                               mov     ecx,[edi+08h]
    2091    2091  0 +  00000E3D  03 4D [0C]                               add     ecx,[ebp+0ch];  ptsec
    2092    2092  0 +  00000E40  2B CE                                    sub     ecx,esi
    2093    2093  0 +  00000E42  8B C3                                    mov     eax,ebx
    2094    2094  0 +  00000E44  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUlT2
    2095    2095  0 +  00000E49  83 C4 0C                                 add     esp,0ch
    2096    2096  0 +  00000E4C  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],02h;      __es
                                 00000002
    2097    2097  0 +
    2098    2098  0 +                                             ; 1719          newpt.clear();                  /* completely new */
    2099    2099  0 +  00000E56  8B C3                                    mov     eax,ebx
    2100    2100  0 +  00000E58  E8 00000000:E                            call    clear__9PartTableFv
    2101    2101  0 +  00000E5D  83 EC 04                                 sub     esp,04h
    2102    2102  0 +  00000E60  8B C6                                    mov     eax,esi
    2103    2103  0 +
    2104    2104  0 +                                             ; 1721          le->RelativeSectors = spt;


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   45
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2105    2105  0 +  00000E62  89 47 [08]                               mov     [edi+08h],eax
    2106    2106  0 +
    2107    2107  0 +                                             ; 1722          newpt.addPE(*le);
    2108    2108  0 +  00000E65  8B D7                                    mov     edx,edi
    2109    2109  0 +  00000E67  8B C3                                    mov     eax,ebx
    2110    2110  0 +  00000E69  E8 00000000:E                            call    addPE__9PartTableFRC15_PARTITIONENTRY
    2111    2111  0 +
    2112    2112  0 +                                             ; 1723          pt.delPE(le);
    2113    2113  0 +  00000E6E  8D B5 [FFFFFDD8]                         lea     esi,[ebp-0228h];        pt
    2114    2114  0 +
    2115    2115  0 +                                             ; 1722          newpt.addPE(*le);
    2116    2116  0 +  00000E74  8B D7                                    mov     edx,edi
    2117    2117  0 +
    2118    2118  0 +                                             ; 1723          pt.delPE(le);
    2119    2119  0 +  00000E76  8B C6                                    mov     eax,esi
    2120    2120  0 +  00000E78  E8 00000000:E                            call    delPE__9PartTableFP15_PARTITIONENTRY
    2121    2121  0 +  00000E7D  8B C3                                    mov     eax,ebx
    2122    2122  0 +  00000E7F  83 C4 08                                 add     esp,08h
    2123    2123  0 +
    2124    2124  0 +                                             ; 1725          if( ext_idx = -1 )
    2125    2125  0 +  00000E82  8B 8D [FFFFF99C]                         mov     ecx,[ebp-0664h];        ext_idx
    2126    2126  0 +  00000E88  83 F9 FF                                 cmp     ecx,0ffffffffh
    2127    2127  0 +  00000E8B  0F 84 00000EB7:R                         je      @BLBL396
    2128    2128  0 +
    2129    2129  0 +                                             ; 1728              newpt.addPE(*ee);
    2130    2130  0 +  00000E91  83 EC 08                                 sub     esp,08h
    2131    2131  0 +
    2132    2132  0 +                                             ; 1727              PPARTITIONENTRY const ee = &pt.entry[ext_idx];
    2133    2133  0 +  00000E94  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2134    2134  0 +  00000E97  C1 E1 04                                 sal     ecx,04h
    2135    2135  0 +  00000E9A  03 D1                                    add     edx,ecx
    2136    2136  0 +  00000E9C  89 95 [FFFFF988]                         mov     [ebp-0678h],edx;        ee
    2137    2137  0 +
    2138    2138  0 +                                             ; 1728              newpt.addPE(*ee);
    2139    2139  0 +  00000EA2  E8 00000000:E                            call    addPE__9PartTableFRC15_PARTITIONENTRY
    2140    2140  0 +
    2141    2141  0 +                                             ; 1729              pt.delPE(ee);
    2142    2142  0 +  00000EA7  8B 95 [FFFFF988]                         mov     edx,[ebp-0678h];        ee
    2143    2143  0 +
    2144    2144  0 +                                             ; 1728              newpt.addPE(*ee);
    2145    2145  0 +  00000EAD  8B C6                                    mov     eax,esi
    2146    2146  0 +
    2147    2147  0 +                                             ; 1729              pt.delPE(ee);
    2148    2148  0 +  00000EAF  E8 00000000:E                            call    delPE__9PartTableFP15_PARTITIONENTRY
    2149    2149  0 +  00000EB4  83 C4 08                                 add     esp,08h
    2150    2150  0 +
    2151    2151  0 +                                             ; 1730          }
    2152    2152  0 +  00000EB7                                   @BLBL396:
    2153    2153  0 +
    2154    2154  0 +                                             ; 1732          pt.addForeign(EXTENDED_PARTTYPE, 0,
    2155    2155  0 +  00000EB7  8B 95 [FFFFF998]                         mov     edx,[ebp-0668h];        le
    2156    2156  0 +  00000EBD  8B 8D [FFFFF98C]                         mov     ecx,[ebp-0674h];        spt
    2157    2157  0 +  00000EC3  03 4A [0C]                               add     ecx,[edx+0ch]
    2158    2158  0 +  00000EC6  51                                       push    ecx


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   46
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2159    2159  0 +  00000EC7  8D B5 [FFFFFDD8]                         lea     esi,[ebp-0228h];        pt
    2160    2160  0 +  00000ECD  FF B5 [FFFFFBC0]                         push    dword ptr [ebp-0440h];  newpt
    2161    2161  0 +  00000ED3  33 C9                                    xor     ecx,ecx
    2162    2162  0 +  00000ED5  83 EC 0C                                 sub     esp,0ch
    2163    2163  0 +  00000ED8  B2 05                                    mov     dl,05h
    2164    2164  0 +  00000EDA  8B C6                                    mov     eax,esi
    2165    2165  0 +  00000EDC  E8 00000000:E                            call    addForeign__9PartTableFUcT1UlT3
    2166    2166  0 +
    2167    2167  0 +                                             ; 1734          pt.addOwn(VRAID_PARTTYPE, 0x80, vpart->start, vpart->size);
    2168    2168  0 +  00000EE1  8B 7D [10]                               mov     edi,[ebp+010h]; vpart
    2169    2169  0 +
    2170    2170  0 +                                             ; 1732          pt.addForeign(EXTENDED_PARTTYPE, 0,
    2171    2171  0 +  00000EE4  83 C4 14                                 add     esp,014h
    2172    2172  0 +  00000EE7  8B C6                                    mov     eax,esi
    2173    2173  0 +
    2174    2174  0 +                                             ; 1734          pt.addOwn(VRAID_PARTTYPE, 0x80, vpart->start, vpart->size);
    2175    2175  0 +  00000EE9  FF 77 [04]                               push    dword ptr [edi+04h]
    2176    2176  0 +  00000EEC  B1 80                                    mov     cl,080h
    2177    2177  0 +  00000EEE  FF 37                                    push    dword ptr [edi]
    2178    2178  0 +  00000EF0  B2 7C                                    mov     dl,07ch
    2179    2179  0 +  00000EF2  83 EC 0C                                 sub     esp,0ch
    2180    2180  0 +  00000EF5  E8 00000000:E                            call    addOwn__9PartTableFUcT1UlT3
    2181    2181  0 +  00000EFA  83 C4 0C                                 add     esp,0ch
    2182    2182  0 +
    2183    2183  0 +                                             ; 1735      }
    2184    2184  0 +  00000EFD  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],01h;      __es
                                 00000001
    2185    2185  0 +  00000F07  BA 00000002                              mov     edx,02h
    2186    2186  0 +  00000F0C  8D 85 [FFFFFBBC]                         lea     eax,[ebp-0444h];        newpt
    2187    2187  0 +  00000F12  E8 00000000:E                            call    __dt__9PartTableFv
    2188    2188  0 +  00000F17  83 C4 08                                 add     esp,08h
    2189    2189  0 +  00000F1A  E9 0000104B:R                            jmp     @BLBL400
    2190    2190  0 +  00000F1F                                   @BLBL394:
    2191    2191  0 +
    2192    2192  0 +                                             ; 1746          ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    2193    2193  0 +  00000F1F  8B 5D [08]                               mov     ebx,[ebp+08h];  disk
    2194    2194  0 +  00000F22  83 EC 04                                 sub     esp,04h
    2195    2195  0 +  00000F25  8B C3                                    mov     eax,ebx
    2196    2196  0 +  00000F27  E8 00000000:E                            call    queryDPB__8VOS2DiskFv
    2197    2197  0 +
    2198    2198  0 +                                             ; 1748          PartTable   newpt(disk, newpt_pos, vpart->extstart);
    2199    2199  0 +  00000F2C  8B 75 [10]                               mov     esi,[ebp+010h]; vpart
    2200    2200  0 +
    2201    2201  0 +                                             ; 1746          ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    2202    2202  0 +  00000F2F  83 C4 04                                 add     esp,04h
    2203    2203  0 +  00000F32  0F B7 78 [06]                            movzx   edi,word ptr [eax+06h]
    2204    2204  0 +
    2205    2205  0 +                                             ; 1748          PartTable   newpt(disk, newpt_pos, vpart->extstart);
    2206    2206  0 +  00000F36  FF 76 [10]                               push    dword ptr [esi+010h]
    2207    2207  0 +  00000F39  8B 85 [FFFFF998]                         mov     eax,[ebp-0668h];        le
    2208    2208  0 +  00000F3F  83 EC 0C                                 sub     esp,0ch
    2209    2209  0 +  00000F42  8B 48 [08]                               mov     ecx,[eax+08h]
    2210    2210  0 +  00000F45  03 4D [0C]                               add     ecx,[ebp+0ch];  ptsec
    2211    2211  0 +  00000F48  03 48 [0C]                               add     ecx,[eax+0ch]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   47
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2212    2212  0 +
    2213    2213  0 +                                             ; 1746          ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    2214    2214  0 +  00000F4B  8B D3                                    mov     edx,ebx
    2215    2215  0 +
    2216    2216  0 +                                             ; 1748          PartTable   newpt(disk, newpt_pos, vpart->extstart);
    2217    2217  0 +  00000F4D  8D 9D [FFFFF9A0]                         lea     ebx,[ebp-0660h];        newpt
    2218    2218  0 +  00000F53  8B C3                                    mov     eax,ebx
    2219    2219  0 +  00000F55  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUlT2
    2220    2220  0 +  00000F5A  83 C4 0C                                 add     esp,0ch
    2221    2221  0 +  00000F5D  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],03h;      __es
                                 00000003
    2222    2222  0 +
    2223    2223  0 +                                             ; 1749          newpt.clear();                  /* completely new */
    2224    2224  0 +  00000F67  8B C3                                    mov     eax,ebx
    2225    2225  0 +  00000F69  E8 00000000:E                            call    clear__9PartTableFv
    2226    2226  0 +
    2227    2227  0 +                                             ; 1752          vpart->size -= spt;
    2228    2228  0 +  00000F6E  8B 4E [04]                               mov     ecx,[esi+04h]
    2229    2229  0 +
    2230    2230  0 +                                             ; 1751          vpart->start += spt;
    2231    2231  0 +  00000F71  01 3E                                    add     [esi],edi
    2232    2232  0 +
    2233    2233  0 +                                             ; 1752          vpart->size -= spt;
    2234    2234  0 +  00000F73  2B CF                                    sub     ecx,edi
    2235    2235  0 +  00000F75  89 4E [04]                               mov     [esi+04h],ecx
    2236    2236  0 +
    2237    2237  0 +                                             ; 1749          newpt.clear();                  /* completely new */
    2238    2238  0 +  00000F78  83 C4 04                                 add     esp,04h
    2239    2239  0 +
    2240    2240  0 +                                             ; 1754          ULONG   vpart_ext_size = vpart->size + spt;
    2241    2241  0 +  00000F7B  03 CF                                    add     ecx,edi
    2242    2242  0 +  00000F7D  89 8D [FFFFF990]                         mov     [ebp-0670h],ecx;        vpart_ext_size
    2243    2243  0 +
    2244    2244  0 +                                             ; 1755          if( ext_idx = -1 )
    2245    2245  0 +  00000F83  8B 8D [FFFFF99C]                         mov     ecx,[ebp-0664h];        ext_idx
    2246    2246  0 +
    2247    2247  0 +                                             ; 1749          newpt.clear();                  /* completely new */
    2248    2248  0 +  00000F89  8B C3                                    mov     eax,ebx
    2249    2249  0 +
    2250    2250  0 +                                             ; 1755          if( ext_idx = -1 )
    2251    2251  0 +  00000F8B  83 F9 FF                                 cmp     ecx,0ffffffffh
    2252    2252  0 +  00000F8E  0F 84 00000FD0:R                         je      @BLBL398
    2253    2253  0 +
    2254    2254  0 +                                             ; 1761              newpt.addPE(*ee);
    2255    2255  0 +  00000F94  83 EC 08                                 sub     esp,08h
    2256    2256  0 +
    2257    2257  0 +                                             ; 1757              PPARTITIONENTRY const ee = &pt.entry[ext_idx];
    2258    2258  0 +  00000F97  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2259    2259  0 +  00000F9A  C1 E1 04                                 sal     ecx,04h
    2260    2260  0 +  00000F9D  03 D1                                    add     edx,ecx
    2261    2261  0 +  00000F9F  89 95 [FFFFF984]                         mov     [ebp-067ch],edx;        ee
    2262    2262  0 +
    2263    2263  0 +                                             ; 1758              vpart_ext_size
    2264    2264  0 +  00000FA5  8B 4E [10]                               mov     ecx,[esi+010h]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   48
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2265    2265  0 +  00000FA8  03 4A [08]                               add     ecx,[edx+08h]
    2266    2266  0 +  00000FAB  2B 8D [FFFFF9A4]                         sub     ecx,[ebp-065ch];        newpt
    2267    2267  0 +  00000FB1  89 8D [FFFFF990]                         mov     [ebp-0670h],ecx;        vpart_ext_size
    2268    2268  0 +
    2269    2269  0 +                                             ; 1761              newpt.addPE(*ee);
    2270    2270  0 +  00000FB7  E8 00000000:E                            call    addPE__9PartTableFRC15_PARTITIONENTRY
    2271    2271  0 +
    2272    2272  0 +                                             ; 1762              pt.delPE(ee);
    2273    2273  0 +  00000FBC  8B 95 [FFFFF984]                         mov     edx,[ebp-067ch];        ee
    2274    2274  0 +  00000FC2  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2275    2275  0 +  00000FC8  E8 00000000:E                            call    delPE__9PartTableFP15_PARTITIONENTRY
    2276    2276  0 +  00000FCD  83 C4 08                                 add     esp,08h
    2277    2277  0 +
    2278    2278  0 +                                             ; 1763          }
    2279    2279  0 +  00000FD0                                   @BLBL398:
    2280    2280  0 +
    2281    2281  0 +                                             ; 1765          pt.addOwn(EXTENDED_PARTTYPE,0, newpt.queryPos(), vpart_ext_size);
    2282    2282  0 +  00000FD0  FF B5 [FFFFF990]                         push    dword ptr [ebp-0670h];  vpart_ext_size
    2283    2283  0 +  00000FD6  33 C9                                    xor     ecx,ecx
    2284    2284  0 +  00000FD8  FF B5 [FFFFF9A4]                         push    dword ptr [ebp-065ch];  newpt
    2285    2285  0 +  00000FDE  B2 05                                    mov     dl,05h
    2286    2286  0 +  00000FE0  83 EC 0C                                 sub     esp,0ch
    2287    2287  0 +  00000FE3  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2288    2288  0 +  00000FE9  E8 00000000:E                            call    addOwn__9PartTableFUcT1UlT3
    2289    2289  0 +
    2290    2290  0 +                                             ; 1766          newpt.addOwn(VRAID_PARTTYPE, 0x80, vpart->start, vpart->size);
    2291    2291  0 +  00000FEE  8B 5D [10]                               mov     ebx,[ebp+010h]; vpart
    2292    2292  0 +
    2293    2293  0 +                                             ; 1765          pt.addOwn(EXTENDED_PARTTYPE,0, newpt.queryPos(), vpart_ext_size);
    2294    2294  0 +  00000FF1  83 C4 14                                 add     esp,014h
    2295    2295  0 +
    2296    2296  0 +                                             ; 1766          newpt.addOwn(VRAID_PARTTYPE, 0x80, vpart->start, vpart->size);
    2297    2297  0 +  00000FF4  8D B5 [FFFFF9A0]                         lea     esi,[ebp-0660h];        newpt
    2298    2298  0 +  00000FFA  FF 73 [04]                               push    dword ptr [ebx+04h]
    2299    2299  0 +  00000FFD  B1 80                                    mov     cl,080h
    2300    2300  0 +  00000FFF  FF 33                                    push    dword ptr [ebx]
    2301    2301  0 +  00001001  B2 7C                                    mov     dl,07ch
    2302    2302  0 +  00001003  83 EC 0C                                 sub     esp,0ch
    2303    2303  0 +  00001006  8B C6                                    mov     eax,esi
    2304    2304  0 +  00001008  E8 00000000:E                            call    addOwn__9PartTableFUcT1UlT3
    2305    2305  0 +  0000100D  83 C4 0C                                 add     esp,0ch
    2306    2306  0 +  00001010  8B C6                                    mov     eax,esi
    2307    2307  0 +
    2308    2308  0 +                                             ; 1767      }
    2309    2309  0 +  00001012  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],01h;      __es
                                 00000001
    2310    2310  0 +  0000101C  BA 00000002                              mov     edx,02h
    2311    2311  0 +  00001021  E8 00000000:E                            call    __dt__9PartTableFv
    2312    2312  0 +  00001026  83 C4 08                                 add     esp,08h
    2313    2313  0 +
    2314    2314  0 +                                             ; 1768  }
    2315    2315  0 +  00001029  EB 20 90 90 90                           jmp     @BLBL400
    2316    2316  0 +  0000102E                                   @BLBL393:
    2317    2317  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   49
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2318    2318  0 +                                             ; 1774      pt.addOwn(VRAID_PARTTYPE, 0x80, vpart->start, vpart->size);
    2319    2319  0 +  0000102E  8B 5D [10]                               mov     ebx,[ebp+010h]; vpart
    2320    2320  0 +  00001031  B1 80                                    mov     cl,080h
    2321    2321  0 +  00001033  FF 73 [04]                               push    dword ptr [ebx+04h]
    2322    2322  0 +  00001036  B2 7C                                    mov     dl,07ch
    2323    2323  0 +  00001038  FF 33                                    push    dword ptr [ebx]
    2324    2324  0 +  0000103A  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2325    2325  0 +  00001040  83 EC 0C                                 sub     esp,0ch
    2326    2326  0 +  00001043  E8 00000000:E                            call    addOwn__9PartTableFUcT1UlT3
    2327    2327  0 +  00001048  83 C4 14                                 add     esp,014h
    2328    2328  0 +
    2329    2329  0 +                                             ; 1776     }
    2330    2330  0 +  0000104B                                   @BLBL400:
    2331    2331  0 +
    2332    2332  0 +                                             ; 1779     return 0;
    2333    2333  0 +  0000104B  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2334    2334  0 +  00001051  83 EC 08                                 sub     esp,08h
    2335    2335  0 +  00001054  C7 85 [FFFFF970]                         mov     dword ptr [ebp-0690h],0h;       __es
                                 00000000
    2336    2336  0 +  0000105E  BA 00000002                              mov     edx,02h
    2337    2337  0 +  00001063  E8 00000000:E                            call    __dt__9PartTableFv
    2338    2338  0 +  00001068  83 C4 08                                 add     esp,08h
    2339    2339  0 +  0000106B  33 C0                                    xor     eax,eax
    2340    2340  0 +  0000106D  5E                                       pop     esi
    2341    2341  0 +  0000106E  5F                                       pop     edi
    2342    2342  0 +  0000106F  5B                                       pop     ebx
    2343    2343  0 +  00001070  81 C4 00000688                           add     esp,0688h
    2344    2344  0 +  00001076  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(2344:6): Warning ALP4511: Assuming segment width for operand size
    2345    2345  0 +  0000107D  C9                                       leave
    2346    2346  0 +  0000107E  C3                                       ret
    2347    2347  0 +  0000107F                                   CreateLogPartition__FCP8VOS2DiskCUlCP14_DSKAREA_ENTRY   endp
    2348    2348  0 +
    2349    2349  0 +                                             ; 1496 FindFreeSpace(VOS2Disk * const disk, ULONG const secno, ULONG const seccnt,
    2350    2350  0 +
    2351    2351  0 +  0000107F                                   FindFreeSpace__FCP8VOS2DiskCUlT2CP8_DSKAREACPi  proc
    2352    2352  0 +  0000107F  55                                       push    ebp
    2353    2353  0 +  00001080  8B EC                                    mov     ebp,esp
    2354    2354  0 +  00001082  68 00000000:E                            push    offset FLAT: _Exception_CPP
    2355    2355  0 +  00001087  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(2355:7): Warning ALP4511: Assuming segment width for operand size
    2356    2356  0 +  0000108E  64:89 25 [00000000]                      mov     fs:[0h],esp
    2357    2357  0 +  00001095  68 FFFFFDA8                              push    0fffffda8h
    2358    2358  0 +  0000109A  89 4D [10]                               mov     [ebp+010h],ecx; seccnt
    2359    2359  0 +  0000109D  81 EC 00000254                           sub     esp,0254h
    2360    2360  0 +
    2361    2361  0 +                                             ; 1498 {
    2362    2362  0 +  000010A3  C7 85 [FFFFFDA8]                         mov     dword ptr [ebp-0258h],0h;       __es
                                 00000000
    2363    2363  0 +
    2364    2364  0 +                                             ; 1496 FindFreeSpace(VOS2Disk * const disk, ULONG const secno, ULONG const seccnt,
    2365    2365  0 +  000010AD  53                                       push    ebx
    2366    2366  0 +  000010AE  8B DA                                    mov     ebx,edx
    2367    2367  0 +  000010B0  57                                       push    edi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   50
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2368    2368  0 +
    2369    2369  0 +                                             ; 1498 {
    2370    2370  0 +  000010B1  C7 85 [FFFFFDB0]                         mov     dword ptr [ebp-0250h],offset FLAT:@190__fsm_tab;        __es
                                 00000144:R
    2371    2371  0 +
    2372    2372  0 +                                             ; 1496 FindFreeSpace(VOS2Disk * const disk, ULONG const secno, ULONG const seccnt,
    2373    2373  0 +  000010BB  56                                       push    esi
    2374    2374  0 +  000010BC  8B F8                                    mov     edi,eax
    2375    2375  0 +
    2376    2376  0 +                                             ; 1502     Verbose(2, "DrvScan", "FindFreeSpace(%lu, %lu)", secno, seccnt);
    2377    2377  0 +  000010BE  51                                       push    ecx
    2378    2378  0 +  000010BF  B9 000004F0:R                            mov     ecx,offset FLAT:@CBE38
    2379    2379  0 +  000010C4  53                                       push    ebx
    2380    2380  0 +  000010C5  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    2381    2381  0 +  000010CA  83 EC 0C                                 sub     esp,0ch
    2382    2382  0 +  000010CD  B8 00000002                              mov     eax,02h
    2383    2383  0 +  000010D2  E8 00000000:E                            call    Verbose
    2384    2384  0 +
    2385    2385  0 +                                             ; 1499     APIRET       rc = 0;
    2386    2386  0 +  000010D7  C7 85 [FFFFFDD0]                         mov     dword ptr [ebp-0230h],0h;       rc
                                 00000000
    2387    2387  0 +
    2388    2388  0 +                                             ; 1515  int             free = -1;
    2389    2389  0 +  000010E1  C7 85 [FFFFFDCC]                         mov     dword ptr [ebp-0234h],0ffffffffh;       free
                                 FFFFFFFF
    2390    2390  0 +
    2391    2391  0 +                                             ; 1502     Verbose(2, "DrvScan", "FindFreeSpace(%lu, %lu)", secno, seccnt);
    2392    2392  0 +  000010EB  8B C7                                    mov     eax,edi
    2393    2393  0 +
    2394    2394  0 +                                             ; 1516  for( used = i = 0; i < 4; ++i )
    2395    2395  0 +  000010ED  C7 85 [FFFFFDC8]                         mov     dword ptr [ebp-0238h],0h;       used
                                 00000000
    2396    2396  0 +
    2397    2397  0 +                                             ; 1496 FindFreeSpace(VOS2Disk * const disk, ULONG const secno, ULONG const seccnt,
    2398    2398  0 +  000010F7  89 7D [08]                               mov     [ebp+08h],edi;  disk
    2399    2399  0 +
    2400    2400  0 +                                             ; 1502     Verbose(2, "DrvScan", "FindFreeSpace(%lu, %lu)", secno, seccnt);
    2401    2401  0 +  000010FA  83 C4 14                                 add     esp,014h
    2402    2402  0 +
    2403    2403  0 +                                             ; 1516  for( used = i = 0; i < 4; ++i )
    2404    2404  0 +  000010FD  89 5D [0C]                               mov     [ebp+0ch],ebx;  secno
    2405    2405  0 +
    2406    2406  0 +                                             ; 1506  PartTable       pt(disk, secno, true);
    2407    2407  0 +  00001100  8B CB                                    mov     ecx,ebx
    2408    2408  0 +  00001102  6A 01                                    push    01h
    2409    2409  0 +  00001104  8B D0                                    mov     edx,eax
    2410    2410  0 +  00001106  83 EC 0C                                 sub     esp,0ch
    2411    2411  0 +  00001109  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2412    2412  0 +  0000110F  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUl7Boolean
    2413    2413  0 +  00001114  8B D3                                    mov     edx,ebx
    2414    2414  0 +  00001116  83 C4 10                                 add     esp,010h
    2415    2415  0 +
    2416    2416  0 +                                             ; 1516  for( used = i = 0; i < 4; ++i )
    2417    2417  0 +  00001119  8B 4D [14]                               mov     ecx,[ebp+014h]; info


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   51
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2418    2418  0 +
    2419    2419  0 +                                             ; 1506  PartTable       pt(disk, secno, true);
    2420    2420  0 +  0000111C  C7 85 [FFFFFDA8]                         mov     dword ptr [ebp-0258h],01h;      __es
                                 00000001
    2421    2421  0 +
    2422    2422  0 +                                             ; 1516  for( used = i = 0; i < 4; ++i )
    2423    2423  0 +  00001126  33 DB                                    xor     ebx,ebx
    2424    2424  0 +  00001128  33 F6                                    xor     esi,esi
    2425    2425  0 +  0000112A  33 FF                                    xor     edi,edi
    2426    2426  0 +  0000112C                                   @BLBL356:
    2427    2427  0 +
    2428    2428  0 +                                             ; 1518      switch( pt.entry[i].SysIndicator )
    2429    2429  0 +  0000112C  8B 45 [F0]                               mov     eax,[ebp-010h]; pt
    2430    2430  0 +  0000112F  0F B6 44/30 [04]                         movzx   eax,byte ptr [eax+esi+04h]
    2431    2431  0 +  00001134  85 C0                                    test    eax,eax
    2432    2432  0 +  00001136  0F 84 00001153:R                         je      @BLBL495
    2433    2433  0 +  0000113C  83 F8 05                                 cmp     eax,05h
    2434    2434  0 +  0000113F  0F 84 0000115E:R                         je      @BLBL496
    2435    2435  0 +  00001145  83 F8 7C                                 cmp     eax,07ch
    2436    2436  0 +  00001148  0F 84 00001191:R                         je      @BLBL497
    2437    2437  0 +  0000114E  E9 000011D2:R                            jmp     @BLBL498
    2438    2438  0 +  00001153                                   @BLBL495:
    2439    2439  0 +
    2440    2440  0 +                                             ; 1521          free = i;
    2441    2441  0 +  00001153  89 9D [FFFFFDCC]                         mov     [ebp-0234h],ebx;        free
    2442    2442  0 +
    2443    2443  0 +                                             ; 1522          break;
    2444    2444  0 +  00001159  EB 78 90 90 90                           jmp     @BLBL494
    2445    2445  0 +  0000115E                                   @BLBL496:
    2446    2446  0 +
    2447    2447  0 +                                             ; 1526          rc = FindFreeExtSpace(disk,
    2448    2448  0 +  0000115E  FF 75 [18]                               push    dword ptr [ebp+018h];   found
    2449    2449  0 +
    2450    2450  0 +                                             ; 1522          break;
    2451    2451  0 +  00001161  8B C2                                    mov     eax,edx
    2452    2452  0 +
    2453    2453  0 +                                             ; 1526          rc = FindFreeExtSpace(disk,
    2454    2454  0 +  00001163  51                                       push    ecx
    2455    2455  0 +  00001164  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2456    2456  0 +  00001167  03 D6                                    add     edx,esi
    2457    2457  0 +  00001169  83 EC 0C                                 sub     esp,0ch
    2458    2458  0 +  0000116C  8B 4A [0C]                               mov     ecx,[edx+0ch]
    2459    2459  0 +  0000116F  8B 52 [08]                               mov     edx,[edx+08h]
    2460    2460  0 +  00001172  03 D0                                    add     edx,eax
    2461    2461  0 +  00001174  8B 45 [08]                               mov     eax,[ebp+08h];  disk
    2462    2462  0 +  00001177  E8 00001501:R                            call    FindFreeExtSpace__FCP8VOS2DiskCUlT2CP8_DSKAREACPi
    2463    2463  0 +  0000117C  83 C4 14                                 add     esp,014h
    2464    2464  0 +  0000117F  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    2465    2465  0 +  00001182  8B 4D [14]                               mov     ecx,[ebp+014h]; info
    2466    2466  0 +
    2467    2467  0 +                                             ; 1525          ++used;
    2468    2468  0 +  00001185  47                                       inc     edi
    2469    2469  0 +
    2470    2470  0 +                                             ; 1526          rc = FindFreeExtSpace(disk,


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   52
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2471    2471  0 +  00001186  89 85 [FFFFFDD0]                         mov     [ebp-0230h],eax;        rc
    2472    2472  0 +
    2473    2473  0 +                                             ; 1529          break;
    2474    2474  0 +  0000118C  EB 45 90 90 90                           jmp     @BLBL494
    2475    2475  0 +  00001191                                   @BLBL497:
    2476    2476  0 +  00001191  8B C2                                    mov     eax,edx
    2477    2477  0 +  00001193  8B D1                                    mov     edx,ecx
    2478    2478  0 +
    2479    2479  0 +                                             ; 1532          ++used;
    2480    2480  0 +  00001195  47                                       inc     edi
    2481    2481  0 +
    2482    2482  0 +                                             ; 1533          info->area[info->cnt].start = secno + pt.entry[i].RelativeSectors;
    2483    2483  0 +  00001196  8B 0A                                    mov     ecx,[edx]
    2484    2484  0 +  00001198  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2485    2485  0 +  0000119B  6B C9 14                                 imul    ecx,014h
    2486    2486  0 +  0000119E  8B 54/32 [08]                            mov     edx,dword ptr [edx+esi+08h]
    2487    2487  0 +  000011A2  03 D0                                    add     edx,eax
    2488    2488  0 +  000011A4  8B 45 [14]                               mov     eax,[ebp+014h]; info
    2489    2489  0 +  000011A7  89 54/08 [04]                            mov     dword ptr [eax+ecx+04h],edx
    2490    2490  0 +
    2491    2491  0 +                                             ; 1534          info->area[info->cnt].size = pt.entry[i].NumSectors;
    2492    2492  0 +  000011AB  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2493    2493  0 +  000011AE  8B 08                                    mov     ecx,[eax]
    2494    2494  0 +  000011B0  6B C9 14                                 imul    ecx,014h
    2495    2495  0 +  000011B3  8B 54/32 [0C]                            mov     edx,dword ptr [edx+esi+0ch]
    2496    2496  0 +  000011B7  89 54/08 [08]                            mov     dword ptr [eax+ecx+08h],edx
    2497    2497  0 +
    2498    2498  0 +                                             ; 1535          *found = info->cnt++;
    2499    2499  0 +  000011BB  8B 08                                    mov     ecx,[eax]
    2500    2500  0 +  000011BD  8D 51 [01]                               lea     edx,[ecx+01h]
    2501    2501  0 +  000011C0  89 10                                    mov     [eax],edx
    2502    2502  0 +  000011C2  8B 45 [18]                               mov     eax,[ebp+018h]; found
    2503    2503  0 +  000011C5  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    2504    2504  0 +  000011C8  89 08                                    mov     [eax],ecx
    2505    2505  0 +  000011CA  8B 4D [14]                               mov     ecx,[ebp+014h]; info
    2506    2506  0 +
    2507    2507  0 +                                             ; 1536          break;
    2508    2508  0 +  000011CD  EB 04 90 90 90                           jmp     @BLBL494
    2509    2509  0 +  000011D2                                   @BLBL498:
    2510    2510  0 +
    2511    2511  0 +                                             ; 1539          ++used;
    2512    2512  0 +  000011D2  47                                       inc     edi
    2513    2513  0 +
    2514    2514  0 +                                             ; 1540          break;
    2515    2515  0 +  000011D3                                   @BLBL494:
    2516    2516  0 +
    2517    2517  0 +                                             ; 1516  for( used = i = 0; i < 4; ++i )
    2518    2518  0 +  000011D3  43                                       inc     ebx
    2519    2519  0 +  000011D4  83 C6 10                                 add     esi,010h
    2520    2520  0 +  000011D7  83 FB 04                                 cmp     ebx,04h
    2521    2521  0 +  000011DA  0F 82 0000112C:R                         jb      @BLBL356
    2522    2522  0 +  000011E0  89 BD [FFFFFDC8]                         mov     [ebp-0238h],edi;        used
    2523    2523  0 +
    2524    2524  0 +                                             ; 1544  if( free == -1 )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   53
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2525    2525  0 +  000011E6  83 BD [FFFFFDCC] FF                      cmp     dword ptr [ebp-0234h],0ffffffffh;       free
    2526    2526  0 +  000011ED  0F 85 00001215:R                         jne     @BLBL360
    2527    2527  0 +
    2528    2528  0 +                                             ; 1546      Verbose(1, "DrvScan", "FindFreeSpace(%lu): no partition entry available",
    2529    2529  0 +  000011F3  FF 75 [0C]                               push    dword ptr [ebp+0ch];    secno
    2530    2530  0 +  000011F6  B9 00000470:R                            mov     ecx,offset FLAT:@CBE34
    2531    2531  0 +  000011FB  83 EC 0C                                 sub     esp,0ch
    2532    2532  0 +  000011FE  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    2533    2533  0 +  00001203  B8 00000001                              mov     eax,01h
    2534    2534  0 +  00001208  E8 00000000:E                            call    Verbose
    2535    2535  0 +  0000120D  83 C4 10                                 add     esp,010h
    2536    2536  0 +
    2537    2537  0 +                                             ; 1548      break;                              /* no error */
    2538    2538  0 +  00001210  E9 000014AC:R                            jmp     @BLBL361
    2539    2539  0 +  00001215                                   @BLBL360:
    2540    2540  0 +
    2541    2541  0 +                                             ; 1550  if( *found = -1 )
    2542    2542  0 +  00001215  8B 4D [18]                               mov     ecx,[ebp+018h]; found
    2543    2543  0 +  00001218  83 39 FF                                 cmp     dword ptr [ecx],0ffffffffh
    2544    2544  0 +  0000121B  0F 85 000014AC:R                         jne     @BLBL361
    2545    2545  0 +
    2546    2546  0 +                                             ; 1559  if( used == 0 )
    2547    2547  0 +  00001221  83 BD [FFFFFDC8] 00                      cmp     dword ptr [ebp-0238h],0h;       used
    2548    2548  0 +  00001228  0F 85 000012D3:R                         jne     @BLBL363
    2549    2549  0 +
    2550    2550  0 +                                             ; 1564      if( secno == 0 )
    2551    2551  0 +  0000122E  8B 75 [14]                               mov     esi,[ebp+014h]; info
    2552    2552  0 +  00001231  83 EC 04                                 sub     esp,04h
    2553    2553  0 +  00001234  8B 0E                                    mov     ecx,[esi]
    2554    2554  0 +  00001236  6B C9 14                                 imul    ecx,014h
    2555    2555  0 +  00001239  8B 7D [08]                               mov     edi,[ebp+08h];  disk
    2556    2556  0 +  0000123C  03 F1                                    add     esi,ecx
    2557    2557  0 +  0000123E  8B C7                                    mov     eax,edi
    2558    2558  0 +  00001240  E8 00000000:E                            call    queryDPB__8VOS2DiskFv
    2559    2559  0 +  00001245  83 C4 04                                 add     esp,04h
    2560    2560  0 +  00001248  66:8B 48 [06]                            mov     cx,[eax+06h]
    2561    2561  0 +  0000124C  83 7D [0C] 00                            cmp     dword ptr [ebp+0ch],0h; secno
    2562    2562  0 +  00001250  8B C6                                    mov     eax,esi
    2563    2563  0 +  00001252  0F 85 00001278:R                         jne     @BLBL364
    2564    2564  0 +  00001258  97                                       xchg    edi,eax
    2565    2565  0 +
    2566    2566  0 +                                             ; 1565          info->area[info->cnt].start
    2567    2567  0 +  00001259  83 EC 04                                 sub     esp,04h
    2568    2568  0 +  0000125C  0F B7 F1                                 movzx   esi,cx
    2569    2569  0 +  0000125F  E8 00000000:E                            call    queryDPB__8VOS2DiskFv
    2570    2570  0 +  00001264  83 C4 04                                 add     esp,04h
    2571    2571  0 +  00001267  0F B7 48 [04]                            movzx   ecx,word ptr [eax+04h]
    2572    2572  0 +  0000126B  8B C7                                    mov     eax,edi
    2573    2573  0 +  0000126D  0F AF CE                                 imul    ecx,esi
    2574    2574  0 +  00001270  89 48 [04]                               mov     [eax+04h],ecx
    2575    2575  0 +
    2576    2576  0 +                                             ; 1566              = disk->queryDPB().cHeads * disk->queryDPB().cSectorsPerTrack;
    2577    2577  0 +  00001273  EB 0C 90 90 90                           jmp     @BLBL365
    2578    2578  0 +  00001278                                   @BLBL364:


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   54
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2579    2579  0 +
    2580    2580  0 +                                             ; 1568          info->area[info->cnt].start
    2581    2581  0 +  00001278  0F B7 C9                                 movzx   ecx,cx
    2582    2582  0 +  0000127B  03 4D [0C]                               add     ecx,[ebp+0ch];  secno
    2583    2583  0 +  0000127E  89 48 [04]                               mov     [eax+04h],ecx
    2584    2584  0 +
    2585    2585  0 +                                             ; 1569              = secno + disk->queryDPB().cSectorsPerTrack;
    2586    2586  0 +  00001281                                   @BLBL365:
    2587    2587  0 +
    2588    2588  0 +                                             ; 1570      info->area[info->cnt].size = seccnt - info->area[info->cnt].start;
    2589    2589  0 +  00001281  8B 5D [14]                               mov     ebx,[ebp+014h]; info
    2590    2590  0 +
    2591    2591  0 +                                             ; 1573      SayArea(2, "FindFreeSpace - found", &info->area[info->cnt]);
    2592    2592  0 +  00001284  83 EC 0C                                 sub     esp,0ch
    2593    2593  0 +
    2594    2594  0 +                                             ; 1570      info->area[info->cnt].size = seccnt - info->area[info->cnt].start;
    2595    2595  0 +  00001287  8B 03                                    mov     eax,[ebx]
    2596    2596  0 +  00001289  6B C0 14                                 imul    eax,014h
    2597    2597  0 +  0000128C  03 C3                                    add     eax,ebx
    2598    2598  0 +  0000128E  8B 4D [10]                               mov     ecx,[ebp+010h]; seccnt
    2599    2599  0 +  00001291  2B 48 [04]                               sub     ecx,[eax+04h]
    2600    2600  0 +  00001294  89 48 [08]                               mov     [eax+08h],ecx
    2601    2601  0 +
    2602    2602  0 +                                             ; 1571      info->area[info->cnt].ptsec = secno;
    2603    2603  0 +  00001297  8B 03                                    mov     eax,[ebx]
    2604    2604  0 +  00001299  6B C0 14                                 imul    eax,014h
    2605    2605  0 +  0000129C  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    2606    2606  0 +  0000129F  89 4C/03 [10]                            mov     dword ptr [ebx+eax+010h],ecx
    2607    2607  0 +
    2608    2608  0 +                                             ; 1572      info->area[info->cnt].extstart = 0;
    2609    2609  0 +  000012A3  8B 03                                    mov     eax,[ebx]
    2610    2610  0 +  000012A5  6B C0 14                                 imul    eax,014h
    2611    2611  0 +  000012A8  C7 44/03 [14]                            mov     dword ptr [ebx+eax+014h],0h
                                 00000000
    2612    2612  0 +
    2613    2613  0 +                                             ; 1573      SayArea(2, "FindFreeSpace - found", &info->area[info->cnt]);
    2614    2614  0 +  000012B0  8B 0B                                    mov     ecx,[ebx]
    2615    2615  0 +  000012B2  6B C9 14                                 imul    ecx,014h
    2616    2616  0 +  000012B5  03 CB                                    add     ecx,ebx
    2617    2617  0 +  000012B7  83 C1 04                                 add     ecx,04h
    2618    2618  0 +  000012BA  BA 000004C0:R                            mov     edx,offset FLAT:@CBE36
    2619    2619  0 +  000012BF  B8 00000002                              mov     eax,02h
    2620    2620  0 +  000012C4  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    2621    2621  0 +
    2622    2622  0 +                                             ; 1574      ++info->cnt;
    2623    2623  0 +  000012C9  FF 03                                    inc     dword ptr [ebx]
    2624    2624  0 +
    2625    2625  0 +                                             ; 1573      SayArea(2, "FindFreeSpace - found", &info->area[info->cnt]);
    2626    2626  0 +  000012CB  83 C4 0C                                 add     esp,0ch
    2627    2627  0 +
    2628    2628  0 +                                             ; 1575  }
    2629    2629  0 +  000012CE  E9 000014AC:R                            jmp     @BLBL361
    2630    2630  0 +  000012D3                                   @BLBL363:
    2631    2631  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   55
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2632    2632  0 +                                             ; 1578      ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    2633    2633  0 +  000012D3  8B 45 [08]                               mov     eax,[ebp+08h];  disk
    2634    2634  0 +  000012D6  83 EC 04                                 sub     esp,04h
    2635    2635  0 +
    2636    2636  0 +                                             ; 1582      info->area[info->cnt].start = secno + spt;
    2637    2637  0 +  000012D9  8B 5D [0C]                               mov     ebx,[ebp+0ch];  secno
    2638    2638  0 +
    2639    2639  0 +                                             ; 1578      ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    2640    2640  0 +  000012DC  E8 00000000:E                            call    queryDPB__8VOS2DiskFv
    2641    2641  0 +
    2642    2642  0 +                                             ; 1582      info->area[info->cnt].start = secno + spt;
    2643    2643  0 +  000012E1  8B 55 [14]                               mov     edx,[ebp+014h]; info
    2644    2644  0 +
    2645    2645  0 +                                             ; 1578      ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    2646    2646  0 +  000012E4  0F B7 48 [06]                            movzx   ecx,word ptr [eax+06h]
    2647    2647  0 +  000012E8  83 C4 04                                 add     esp,04h
    2648    2648  0 +  000012EB  89 8D [FFFFFDC0]                         mov     [ebp-0240h],ecx;        spt
    2649    2649  0 +
    2650    2650  0 +                                             ; 1580      BOOL        inside = FALSE;
    2651    2651  0 +  000012F1  C7 85 [FFFFFDD4]                         mov     dword ptr [ebp-022ch],0h;       inside
                                 00000000
    2652    2652  0 +
    2653    2653  0 +                                             ; 1582      info->area[info->cnt].start = secno + spt;
    2654    2654  0 +  000012FB  8B 3A                                    mov     edi,[edx]
    2655    2655  0 +  000012FD  6B FF 14                                 imul    edi,014h
    2656    2656  0 +  00001300  03 CB                                    add     ecx,ebx
    2657    2657  0 +  00001302  89 4C/3A [04]                            mov     dword ptr [edx+edi+04h],ecx
    2658    2658  0 +
    2659    2659  0 +                                             ; 1583      for( ul = secno + spt; ul < secno + seccnt; ++ul )
    2660    2660  0 +  00001306  03 5D [10]                               add     ebx,[ebp+010h]; seccnt
    2661    2661  0 +  00001309  89 8D [FFFFFDC4]                         mov     [ebp-023ch],ecx;        ul
    2662    2662  0 +  0000130F  3B CB                                    cmp     ecx,ebx
    2663    2663  0 +  00001311  0F 83 0000144F:R                         jae     @BLBL367
    2664    2664  0 +  00001317  89 9D [FFFFFDBC]                         mov     [ebp-0244h],ebx;        @CBE121
    2665    2665  0 +  0000131D                                   @BLBL368:
    2666    2666  0 +
    2667    2667  0 +                                             ; 1585          for( i = 0; i < 4; ++i )
    2668    2668  0 +  0000131D  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    2669    2669  0 +  00001320  8B B5 [FFFFFDD4]                         mov     esi,[ebp-022ch];        inside
    2670    2670  0 +  00001326  33 DB                                    xor     ebx,ebx
    2671    2671  0 +  00001328  33 FF                                    xor     edi,edi
    2672    2672  0 +  0000132A                                   @BLBL370:
    2673    2673  0 +
    2674    2674  0 +                                             ; 1587              if( ul == secno + pt.entry[i].RelativeSectors )
    2675    2675  0 +  0000132A  8B 45 [F0]                               mov     eax,[ebp-010h]; pt
    2676    2676  0 +  0000132D  8B 44/38 [08]                            mov     eax,dword ptr [eax+edi+08h]
    2677    2677  0 +  00001331  03 C2                                    add     eax,edx
    2678    2678  0 +  00001333  3B C1                                    cmp     eax,ecx
    2679    2679  0 +  00001335  0F 85 00001406:R                         jne     @BLBL371
    2680    2680  0 +
    2681    2681  0 +                                             ; 1589                  if( inside )
    2682    2682  0 +  0000133B  85 F6                                    test    esi,esi
    2683    2683  0 +  0000133D  0F 85 000013D7:R                         jne     @BLBL372
    2684    2684  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   56
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2685    2685  0 +                                             ; 1591                      info->area[info->cnt].size
    2686    2686  0 +  00001343  8B 45 [14]                               mov     eax,[ebp+014h]; info
    2687    2687  0 +
    2688    2688  0 +                                             ; 1589                  if( inside )
    2689    2689  0 +  00001346  89 9D [FFFFFDA0]                         mov     [ebp-0260h],ebx;        @CBE123
    2690    2690  0 +
    2691    2691  0 +                                             ; 1591                      info->area[info->cnt].size
    2692    2692  0 +  0000134C  8B 18                                    mov     ebx,[eax]
    2693    2693  0 +  0000134E  6B DB 14                                 imul    ebx,014h
    2694    2694  0 +  00001351  03 D8                                    add     ebx,eax
    2695    2695  0 +  00001353  8B D1                                    mov     edx,ecx
    2696    2696  0 +  00001355  2B 53 [04]                               sub     edx,[ebx+04h]
    2697    2697  0 +  00001358  89 53 [08]                               mov     [ebx+08h],edx
    2698    2698  0 +
    2699    2699  0 +                                             ; 1593                      if( info->area[info->cnt].size >= MIN_VRAID_PART
    2700    2700  0 +  0000135B  8B 18                                    mov     ebx,[eax]
    2701    2701  0 +  0000135D  6B DB 14                                 imul    ebx,014h
    2702    2702  0 +  00001360  8D 14/18                                 lea     edx,dword ptr [eax+ebx]
    2703    2703  0 +  00001363  8B 9D [FFFFFDA0]                         mov     ebx,[ebp-0260h];        @CBE123
    2704    2704  0 +  00001369  8B 42 [08]                               mov     eax,[edx+08h]
    2705    2705  0 +  0000136C  89 95 [FFFFFDA4]                         mov     [ebp-025ch],edx;        @CBE122
    2706    2706  0 +  00001372  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    2707    2707  0 +  00001375  3D 00002800                              cmp     eax,02800h
    2708    2708  0 +  0000137A  0F 82 000013D2:R                         jb      @BLBL373
    2709    2709  0 +  00001380  39 85 [FFFFFDC0]                         cmp     [ebp-0240h],eax;        spt
    2710    2710  0 +  00001386  8B 45 [14]                               mov     eax,[ebp+014h]; info
    2711    2711  0 +  00001389  0F 83 000013D2:R                         jae     @BLBL373
    2712    2712  0 +  0000138F  87 8D [FFFFFDA4]                         xchg    [ebp-025ch],ecx;        @CBE122
    2713    2713  0 +
    2714    2714  0 +                                             ; 1598                          SayArea(2, "FindFreeSpace - found",
    2715    2715  0 +  00001395  83 EC 0C                                 sub     esp,0ch
    2716    2716  0 +
    2717    2717  0 +                                             ; 1596                          info->area[info->cnt].ptsec = secno;
    2718    2718  0 +  00001398  89 51 [10]                               mov     [ecx+010h],edx
    2719    2719  0 +
    2720    2720  0 +                                             ; 1597                          info->area[info->cnt].extstart = 0;
    2721    2721  0 +  0000139B  8B 08                                    mov     ecx,[eax]
    2722    2722  0 +  0000139D  6B C9 14                                 imul    ecx,014h
    2723    2723  0 +  000013A0  C7 44/08 [14]                            mov     dword ptr [eax+ecx+014h],0h
                                 00000000
    2724    2724  0 +
    2725    2725  0 +                                             ; 1598                          SayArea(2, "FindFreeSpace - found",
    2726    2726  0 +  000013A8  8B 08                                    mov     ecx,[eax]
    2727    2727  0 +  000013AA  6B C9 14                                 imul    ecx,014h
    2728    2728  0 +  000013AD  03 C8                                    add     ecx,eax
    2729    2729  0 +  000013AF  83 C1 04                                 add     ecx,04h
    2730    2730  0 +  000013B2  BA 000004C0:R                            mov     edx,offset FLAT:@CBE36
    2731    2731  0 +  000013B7  B8 00000002                              mov     eax,02h
    2732    2732  0 +  000013BC  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    2733    2733  0 +  000013C1  8B 45 [14]                               mov     eax,[ebp+014h]; info
    2734    2734  0 +  000013C4  8B 8D [FFFFFDA4]                         mov     ecx,[ebp-025ch];        @CBE122
    2735    2735  0 +  000013CA  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    2736    2736  0 +
    2737    2737  0 +                                             ; 1600                          ++info->cnt;


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   57
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2738    2738  0 +  000013CD  FF 00                                    inc     dword ptr [eax]
    2739    2739  0 +
    2740    2740  0 +                                             ; 1598                          SayArea(2, "FindFreeSpace - found",
    2741    2741  0 +  000013CF  83 C4 0C                                 add     esp,0ch
    2742    2742  0 +
    2743    2743  0 +                                             ; 1601                      }
    2744    2744  0 +  000013D2                                   @BLBL373:
    2745    2745  0 +
    2746    2746  0 +                                             ; 1602                      inside = TRUE;
    2747    2747  0 +  000013D2  BE 00000001                              mov     esi,01h
    2748    2748  0 +
    2749    2749  0 +                                             ; 1603                  }
    2750    2750  0 +  000013D7                                   @BLBL372:
    2751    2751  0 +  000013D7  8B C1                                    mov     eax,ecx
    2752    2752  0 +
    2753    2753  0 +                                             ; 1604                  ul += pt.entry[i].NumSectors - 1;
    2754    2754  0 +  000013D9  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    2755    2755  0 +
    2756    2756  0 +                                             ; 1603                  }
    2757    2757  0 +  000013DC  89 9D [FFFFFDA0]                         mov     [ebp-0260h],ebx;        @CBE123
    2758    2758  0 +
    2759    2759  0 +                                             ; 1604                  ul += pt.entry[i].NumSectors - 1;
    2760    2760  0 +  000013E2  8B 4C/39 [0C]                            mov     ecx,dword ptr [ecx+edi+0ch]
    2761    2761  0 +  000013E6  49                                       dec     ecx
    2762    2762  0 +  000013E7  03 C8                                    add     ecx,eax
    2763    2763  0 +
    2764    2764  0 +                                             ; 1605                  info->area[info->cnt].start = ul + 1;
    2765    2765  0 +  000013E9  8B 45 [14]                               mov     eax,[ebp+014h]; info
    2766    2766  0 +  000013EC  8D 59 [01]                               lea     ebx,[ecx+01h]
    2767    2767  0 +  000013EF  8B 10                                    mov     edx,[eax]
    2768    2768  0 +  000013F1  6B D2 14                                 imul    edx,014h
    2769    2769  0 +  000013F4  89 5C/10 [04]                            mov     dword ptr [eax+edx+04h],ebx
    2770    2770  0 +  000013F8  8B 9D [FFFFFDA0]                         mov     ebx,[ebp-0260h];        @CBE123
    2771    2771  0 +  000013FE  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    2772    2772  0 +
    2773    2773  0 +                                             ; 1606                  break;
    2774    2774  0 +  00001401  EB 33 90 90 90                           jmp     @BLBL379
    2775    2775  0 +  00001406                                   @BLBL371:
    2776    2776  0 +  00001406  89 8D [FFFFFDA0]                         mov     [ebp-0260h],ecx;        @CBE123
    2777    2777  0 +
    2778    2778  0 +                                             ; 1608              else if( ul == (secno + pt.entry[i].RelativeSectors
    2779    2779  0 +  0000140C  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    2780    2780  0 +  0000140F  03 CF                                    add     ecx,edi
    2781    2781  0 +  00001411  8B 41 [08]                               mov     eax,[ecx+08h]
    2782    2782  0 +  00001414  03 C2                                    add     eax,edx
    2783    2783  0 +  00001416  03 41 [0C]                               add     eax,[ecx+0ch]
    2784    2784  0 +  00001419  8B 8D [FFFFFDA0]                         mov     ecx,[ebp-0260h];        @CBE123
    2785    2785  0 +  0000141F  3B C1                                    cmp     eax,ecx
    2786    2786  0 +  00001421  0F 85 00001429:R                         jne     @BLBL377
    2787    2787  0 +
    2788    2788  0 +                                             ; 1611                  inside = FALSE;
    2789    2789  0 +  00001427  33 F6                                    xor     esi,esi
    2790    2790  0 +
    2791    2791  0 +                                             ; 1613          } /* end[for(every partition entry)] */


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   58
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2792    2792  0 +  00001429                                   @BLBL377:
    2793    2793  0 +
    2794    2794  0 +                                             ; 1585          for( i = 0; i < 4; ++i )
    2795    2795  0 +  00001429  43                                       inc     ebx
    2796    2796  0 +  0000142A  83 C7 10                                 add     edi,010h
    2797    2797  0 +  0000142D  83 FB 04                                 cmp     ebx,04h
    2798    2798  0 +  00001430  0F 82 0000132A:R                         jb      @BLBL370
    2799    2799  0 +  00001436                                   @BLBL379:
    2800    2800  0 +
    2801    2801  0 +                                             ; 1583      for( ul = secno + spt; ul < secno + seccnt; ++ul )
    2802    2802  0 +  00001436  41                                       inc     ecx
    2803    2803  0 +  00001437  39 8D [FFFFFDBC]                         cmp     [ebp-0244h],ecx;        @CBE121
    2804    2804  0 +
    2805    2805  0 +                                             ; 1585          for( i = 0; i < 4; ++i )
    2806    2806  0 +  0000143D  89 B5 [FFFFFDD4]                         mov     [ebp-022ch],esi;        inside
    2807    2807  0 +
    2808    2808  0 +                                             ; 1583      for( ul = secno + spt; ul < secno + seccnt; ++ul )
    2809    2809  0 +  00001443  0F 87 0000131D:R                         ja      @BLBL368
    2810    2810  0 +  00001449  89 8D [FFFFFDC4]                         mov     [ebp-023ch],ecx;        ul
    2811    2811  0 +  0000144F                                   @BLBL367:
    2812    2812  0 +
    2813    2813  0 +                                             ; 1615      if( inside )
    2814    2814  0 +  0000144F  83 BD [FFFFFDD4] 00                      cmp     dword ptr [ebp-022ch],0h;       inside
    2815    2815  0 +  00001456  0F 85 000014AC:R                         jne     @BLBL361
    2816    2816  0 +
    2817    2817  0 +                                             ; 1617          info->area[info->cnt].size = ul - info->area[info->cnt].start;
    2818    2818  0 +  0000145C  8B 5D [14]                               mov     ebx,[ebp+014h]; info
    2819    2819  0 +
    2820    2820  0 +                                             ; 1620          SayArea(2, "FindFreeSpace - found", &info->area[info->cnt]);
    2821    2821  0 +  0000145F  83 EC 0C                                 sub     esp,0ch
    2822    2822  0 +
    2823    2823  0 +                                             ; 1617          info->area[info->cnt].size = ul - info->area[info->cnt].start;
    2824    2824  0 +  00001462  8B 03                                    mov     eax,[ebx]
    2825    2825  0 +  00001464  6B C0 14                                 imul    eax,014h
    2826    2826  0 +  00001467  03 C3                                    add     eax,ebx
    2827    2827  0 +  00001469  8B 8D [FFFFFDC4]                         mov     ecx,[ebp-023ch];        ul
    2828    2828  0 +  0000146F  2B 48 [04]                               sub     ecx,[eax+04h]
    2829    2829  0 +  00001472  89 48 [08]                               mov     [eax+08h],ecx
    2830    2830  0 +
    2831    2831  0 +                                             ; 1618          info->area[info->cnt].ptsec = secno;
    2832    2832  0 +  00001475  8B 03                                    mov     eax,[ebx]
    2833    2833  0 +  00001477  6B C0 14                                 imul    eax,014h
    2834    2834  0 +  0000147A  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    2835    2835  0 +  0000147D  89 4C/03 [10]                            mov     dword ptr [ebx+eax+010h],ecx
    2836    2836  0 +
    2837    2837  0 +                                             ; 1619          info->area[info->cnt].extstart = 0;
    2838    2838  0 +  00001481  8B 03                                    mov     eax,[ebx]
    2839    2839  0 +  00001483  6B C0 14                                 imul    eax,014h
    2840    2840  0 +  00001486  C7 44/03 [14]                            mov     dword ptr [ebx+eax+014h],0h
                                 00000000
    2841    2841  0 +
    2842    2842  0 +                                             ; 1620          SayArea(2, "FindFreeSpace - found", &info->area[info->cnt]);
    2843    2843  0 +  0000148E  8B 0B                                    mov     ecx,[ebx]
    2844    2844  0 +  00001490  6B C9 14                                 imul    ecx,014h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   59
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2845    2845  0 +  00001493  03 CB                                    add     ecx,ebx
    2846    2846  0 +  00001495  83 C1 04                                 add     ecx,04h
    2847    2847  0 +  00001498  BA 000004C0:R                            mov     edx,offset FLAT:@CBE36
    2848    2848  0 +  0000149D  B8 00000002                              mov     eax,02h
    2849    2849  0 +  000014A2  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    2850    2850  0 +  000014A7  83 C4 0C                                 add     esp,0ch
    2851    2851  0 +
    2852    2852  0 +                                             ; 1621          ++info->cnt;
    2853    2853  0 +  000014AA  FF 03                                    inc     dword ptr [ebx]
    2854    2854  0 +
    2855    2855  0 +                                             ; 1625     while( 0 );
    2856    2856  0 +  000014AC                                   @BLBL361:
    2857    2857  0 +  000014AC  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2858    2858  0 +  000014B2  83 EC 08                                 sub     esp,08h
    2859    2859  0 +  000014B5  C7 85 [FFFFFDA8]                         mov     dword ptr [ebp-0258h],0h;       __es
                                 00000000
    2860    2860  0 +  000014BF  BA 00000002                              mov     edx,02h
    2861    2861  0 +  000014C4  E8 00000000:E                            call    __dt__9PartTableFv
    2862    2862  0 +  000014C9  83 C4 08                                 add     esp,08h
    2863    2863  0 +
    2864    2864  0 +                                             ; 1627     Verbose(3, "DrvScan", "FindFreeSpace - rc %lu", rc);
    2865    2865  0 +  000014CC  8B B5 [FFFFFDD0]                         mov     esi,[ebp-0230h];        rc
    2866    2866  0 +  000014D2  56                                       push    esi
    2867    2867  0 +  000014D3  B9 000004D8:R                            mov     ecx,offset FLAT:@CBE37
    2868    2868  0 +  000014D8  83 EC 0C                                 sub     esp,0ch
    2869    2869  0 +  000014DB  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    2870    2870  0 +  000014E0  B8 00000003                              mov     eax,03h
    2871    2871  0 +  000014E5  E8 00000000:E                            call    Verbose
    2872    2872  0 +  000014EA  83 C4 10                                 add     esp,010h
    2873    2873  0 +  000014ED  8B C6                                    mov     eax,esi
    2874    2874  0 +
    2875    2875  0 +                                             ; 1628     return rc;
    2876    2876  0 +  000014EF  5E                                       pop     esi
    2877    2877  0 +  000014F0  5F                                       pop     edi
    2878    2878  0 +  000014F1  5B                                       pop     ebx
    2879    2879  0 +  000014F2  81 C4 00000258                           add     esp,0258h
    2880    2880  0 +  000014F8  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(2880:6): Warning ALP4511: Assuming segment width for operand size
    2881    2881  0 +  000014FF  C9                                       leave
    2882    2882  0 +  00001500  C3                                       ret
    2883    2883  0 +  00001501                                   FindFreeSpace__FCP8VOS2DiskCUlT2CP8_DSKAREACPi  endp
    2884    2884  0 +
    2885    2885  0 +                                             ; 1334 FindFreeExtSpace(VOS2Disk * const disk,
    2886    2886  0 +
    2887    2887  0 +  00001501                                   FindFreeExtSpace__FCP8VOS2DiskCUlT2CP8_DSKAREACPi       proc
    2888    2888  0 +  00001501  55                                       push    ebp
    2889    2889  0 +  00001502  8B EC                                    mov     ebp,esp
    2890    2890  0 +  00001504  68 00000000:E                            push    offset FLAT: _Exception_CPP
    2891    2891  0 +  00001509  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(2891:7): Warning ALP4511: Assuming segment width for operand size
    2892    2892  0 +  00001510  64:89 25 [00000000]                      mov     fs:[0h],esp
    2893    2893  0 +  00001517  68 FFFFFCE0                              push    0fffffce0h
    2894    2894  0 +  0000151C  89 4D [10]                               mov     [ebp+010h],ecx; seccnt
    2895    2895  0 +  0000151F  81 EC 0000031C                           sub     esp,031ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   60
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2896    2896  0 +
    2897    2897  0 +                                             ; 1337 {
    2898    2898  0 +  00001525  C7 85 [FFFFFCE0]                         mov     dword ptr [ebp-0320h],0h;       __es
                                 00000000
    2899    2899  0 +
    2900    2900  0 +                                             ; 1334 FindFreeExtSpace(VOS2Disk * const disk,
    2901    2901  0 +  0000152F  53                                       push    ebx
    2902    2902  0 +  00001530  8B DA                                    mov     ebx,edx
    2903    2903  0 +  00001532  57                                       push    edi
    2904    2904  0 +
    2905    2905  0 +                                             ; 1337 {
    2906    2906  0 +  00001533  C7 85 [FFFFFCE8]                         mov     dword ptr [ebp-0318h],offset FLAT:@174__fsm_tab;        __es
                                 00000128:R
    2907    2907  0 +
    2908    2908  0 +                                             ; 1334 FindFreeExtSpace(VOS2Disk * const disk,
    2909    2909  0 +  0000153D  56                                       push    esi
    2910    2910  0 +  0000153E  8B F8                                    mov     edi,eax
    2911    2911  0 +
    2912    2912  0 +                                             ; 1342     Verbose(2, "DrvScan", "FindFreeExtSpace(%lu, %lu)", secno, seccnt);
    2913    2913  0 +  00001540  51                                       push    ecx
    2914    2914  0 +  00001541  B9 00000434:R                            mov     ecx,offset FLAT:@CBE32
    2915    2915  0 +  00001546  53                                       push    ebx
    2916    2916  0 +  00001547  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    2917    2917  0 +  0000154C  83 EC 0C                                 sub     esp,0ch
    2918    2918  0 +  0000154F  B8 00000002                              mov     eax,02h
    2919    2919  0 +  00001554  E8 00000000:E                            call    Verbose
    2920    2920  0 +
    2921    2921  0 +                                             ; 1338     APIRET       rc = 0;
    2922    2922  0 +  00001559  C7 85 [FFFFFDD4]                         mov     dword ptr [ebp-022ch],0h;       rc
                                 00000000
    2923    2923  0 +
    2924    2924  0 +                                             ; 1356  int             free = -1;
    2925    2925  0 +  00001563  C7 85 [FFFFFDD0]                         mov     dword ptr [ebp-0230h],0ffffffffh;       free
                                 FFFFFFFF
    2926    2926  0 +
    2927    2927  0 +                                             ; 1342     Verbose(2, "DrvScan", "FindFreeExtSpace(%lu, %lu)", secno, seccnt);
    2928    2928  0 +  0000156D  83 C4 14                                 add     esp,014h
    2929    2929  0 +
    2930    2930  0 +                                             ; 1334 FindFreeExtSpace(VOS2Disk * const disk,
    2931    2931  0 +  00001570  89 7D [08]                               mov     [ebp+08h],edi;  disk
    2932    2932  0 +
    2933    2933  0 +                                             ; 1357  for( used = i = 0; i < 4; ++i )
    2934    2934  0 +  00001573  89 5D [0C]                               mov     [ebp+0ch],ebx;  secno
    2935    2935  0 +
    2936    2936  0 +                                             ; 1342     Verbose(2, "DrvScan", "FindFreeExtSpace(%lu, %lu)", secno, seccnt);
    2937    2937  0 +  00001576  8B C7                                    mov     eax,edi
    2938    2938  0 +
    2939    2939  0 +                                             ; 1343     allocated.cnt = 0;
    2940    2940  0 +  00001578  C7 85 [FFFFFCF4]                         mov     dword ptr [ebp-030ch],0h;       allocated
                                 00000000
    2941    2941  0 +
    2942    2942  0 +                                             ; 1347  PartTable       pt(disk, secno, true);
    2943    2943  0 +  00001582  6A 01                                    push    01h
    2944    2944  0 +  00001584  8B D0                                    mov     edx,eax


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   61
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2945    2945  0 +  00001586  83 EC 0C                                 sub     esp,0ch
    2946    2946  0 +  00001589  8B CB                                    mov     ecx,ebx
    2947    2947  0 +  0000158B  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    2948    2948  0 +  00001591  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUl7Boolean
    2949    2949  0 +  00001596  8B D3                                    mov     edx,ebx
    2950    2950  0 +  00001598  83 C4 10                                 add     esp,010h
    2951    2951  0 +  0000159B  C7 85 [FFFFFCE0]                         mov     dword ptr [ebp-0320h],01h;      __es
                                 00000001
    2952    2952  0 +
    2953    2953  0 +                                             ; 1357  for( used = i = 0; i < 4; ++i )
    2954    2954  0 +  000015A5  8B CA                                    mov     ecx,edx
    2955    2955  0 +  000015A7  33 DB                                    xor     ebx,ebx
    2956    2956  0 +  000015A9  33 F6                                    xor     esi,esi
    2957    2957  0 +  000015AB  33 FF                                    xor     edi,edi
    2958    2958  0 +  000015AD                                   @BLBL326:
    2959    2959  0 +
    2960    2960  0 +                                             ; 1359      switch( pt.entry[i].SysIndicator )
    2961    2961  0 +  000015AD  8B 45 [F0]                               mov     eax,[ebp-010h]; pt
    2962    2962  0 +  000015B0  0F B6 44/38 [04]                         movzx   eax,byte ptr [eax+edi+04h]
    2963    2963  0 +  000015B5  85 C0                                    test    eax,eax
    2964    2964  0 +  000015B7  0F 84 000015D4:R                         je      @BLBL501
    2965    2965  0 +  000015BD  83 F8 05                                 cmp     eax,05h
    2966    2966  0 +  000015C0  0F 84 000015DF:R                         je      @BLBL502
    2967    2967  0 +  000015C6  83 F8 7C                                 cmp     eax,07ch
    2968    2968  0 +  000015C9  0F 84 00001668:R                         je      @BLBL503
    2969    2969  0 +  000015CF  E9 000016A7:R                            jmp     @BLBL504
    2970    2970  0 +  000015D4                                   @BLBL501:
    2971    2971  0 +
    2972    2972  0 +                                             ; 1362          free = i;
    2973    2973  0 +  000015D4  89 9D [FFFFFDD0]                         mov     [ebp-0230h],ebx;        free
    2974    2974  0 +
    2975    2975  0 +                                             ; 1363          break;
    2976    2976  0 +  000015DA  E9 00001728:R                            jmp     @BLBL500
    2977    2977  0 +  000015DF                                   @BLBL502:
    2978    2978  0 +
    2979    2979  0 +                                             ; 1367          rc = ScanExtAllocated(disk,
    2980    2980  0 +  000015DF  8B 55 [18]                               mov     edx,[ebp+018h]; found
    2981    2981  0 +  000015E2  52                                       push    edx
    2982    2982  0 +  000015E3  8D 95 [FFFFFCF4]                         lea     edx,[ebp-030ch];        allocated
    2983    2983  0 +  000015E9  52                                       push    edx
    2984    2984  0 +
    2985    2985  0 +                                             ; 1363          break;
    2986    2986  0 +  000015EA  8B C1                                    mov     eax,ecx
    2987    2987  0 +
    2988    2988  0 +                                             ; 1367          rc = ScanExtAllocated(disk,
    2989    2989  0 +  000015EC  50                                       push    eax
    2990    2990  0 +  000015ED  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    2991    2991  0 +  000015F0  03 D7                                    add     edx,edi
    2992    2992  0 +  000015F2  83 EC 0C                                 sub     esp,0ch
    2993    2993  0 +  000015F5  8B 4A [0C]                               mov     ecx,[edx+0ch]
    2994    2994  0 +  000015F8  8B 52 [08]                               mov     edx,[edx+08h]
    2995    2995  0 +  000015FB  03 D0                                    add     edx,eax
    2996    2996  0 +  000015FD  8B 45 [08]                               mov     eax,[ebp+08h];  disk
    2997    2997  0 +  00001600  E8 00001993:R                            call    ScanExtAllocated__FCP8VOS2DiskCUlN22CP8_DSKAREACPi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   62
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    2998    2998  0 +  00001605  8B D0                                    mov     edx,eax
    2999    2999  0 +  00001607  83 C4 18                                 add     esp,018h
    3000    3000  0 +
    3001    3001  0 +                                             ; 1366          ++used;
    3002    3002  0 +  0000160A  46                                       inc     esi
    3003    3003  0 +
    3004    3004  0 +                                             ; 1367          rc = ScanExtAllocated(disk,
    3005    3005  0 +  0000160B  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3006    3006  0 +  0000160E  8B 45 [18]                               mov     eax,[ebp+018h]; found
    3007    3007  0 +  00001611  89 95 [FFFFFDD4]                         mov     [ebp-022ch],edx;        rc
    3008    3008  0 +
    3009    3009  0 +                                             ; 1371          if( rc == 0  &&  *found = -1 )
    3010    3010  0 +  00001617  85 D2                                    test    edx,edx
    3011    3011  0 +  00001619  0F 85 00001663:R                         jne     @BLBL327
    3012    3012  0 +  0000161F  8B 10                                    mov     edx,[eax]
    3013    3013  0 +  00001621  83 FA FF                                 cmp     edx,0ffffffffh
    3014    3014  0 +  00001624  0F 84 00001663:R                         je      @BLBL327
    3015    3015  0 +
    3016    3016  0 +                                             ; 1378              memcpy(&freelist->area[freelist->cnt], &allocated.area[*found],
    3017    3017  0 +  0000162A  8B 4D [14]                               mov     ecx,[ebp+014h]; freelist
    3018    3018  0 +  0000162D  83 EC 0C                                 sub     esp,0ch
    3019    3019  0 +  00001630  8B 01                                    mov     eax,[ecx]
    3020    3020  0 +  00001632  6B C0 14                                 imul    eax,014h
    3021    3021  0 +  00001635  6B D2 14                                 imul    edx,014h
    3022    3022  0 +  00001638  03 C1                                    add     eax,ecx
    3023    3023  0 +  0000163A  8D 94/15 [FFFFFCF8]                      lea     edx,dword ptr [ebp+edx-0308h]
    3024    3024  0 +  00001641  B9 00000014                              mov     ecx,014h
    3025    3025  0 +  00001646  83 C0 04                                 add     eax,04h
    3026    3026  0 +  00001649  E8 00000000:E                            call    memcpy
    3027    3027  0 +  0000164E  8B 4D [14]                               mov     ecx,[ebp+014h]; freelist
    3028    3028  0 +  00001651  83 C4 0C                                 add     esp,0ch
    3029    3029  0 +
    3030    3030  0 +                                             ; 1380              *found = freelist->cnt++;
    3031    3031  0 +  00001654  8B 01                                    mov     eax,[ecx]
    3032    3032  0 +  00001656  8D 50 [01]                               lea     edx,[eax+01h]
    3033    3033  0 +  00001659  89 11                                    mov     [ecx],edx
    3034    3034  0 +  0000165B  8B 55 [18]                               mov     edx,[ebp+018h]; found
    3035    3035  0 +  0000165E  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3036    3036  0 +  00001661  89 02                                    mov     [edx],eax
    3037    3037  0 +
    3038    3038  0 +                                             ; 1381          }
    3039    3039  0 +  00001663                                   @BLBL327:
    3040    3040  0 +
    3041    3041  0 +                                             ; 1382          break;
    3042    3042  0 +  00001663  E9 00001728:R                            jmp     @BLBL500
    3043    3043  0 +  00001668                                   @BLBL503:
    3044    3044  0 +  00001668  8B C1                                    mov     eax,ecx
    3045    3045  0 +
    3046    3046  0 +                                             ; 1386          freelist->area[freelist->cnt].start
    3047    3047  0 +  0000166A  8B 4D [14]                               mov     ecx,[ebp+014h]; freelist
    3048    3048  0 +
    3049    3049  0 +                                             ; 1385          ++used;
    3050    3050  0 +  0000166D  46                                       inc     esi
    3051    3051  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   63
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3052    3052  0 +                                             ; 1386          freelist->area[freelist->cnt].start
    3053    3053  0 +  0000166E  8B 11                                    mov     edx,[ecx]
    3054    3054  0 +  00001670  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    3055    3055  0 +  00001673  6B D2 14                                 imul    edx,014h
    3056    3056  0 +  00001676  8B 4C/39 [08]                            mov     ecx,dword ptr [ecx+edi+08h]
    3057    3057  0 +  0000167A  03 C8                                    add     ecx,eax
    3058    3058  0 +  0000167C  8B 45 [14]                               mov     eax,[ebp+014h]; freelist
    3059    3059  0 +  0000167F  89 4C/10 [04]                            mov     dword ptr [eax+edx+04h],ecx
    3060    3060  0 +
    3061    3061  0 +                                             ; 1388          freelist->area[freelist->cnt].size = pt.entry[i].NumSectors;
    3062    3062  0 +  00001683  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    3063    3063  0 +  00001686  8B 10                                    mov     edx,[eax]
    3064    3064  0 +  00001688  6B D2 14                                 imul    edx,014h
    3065    3065  0 +  0000168B  8B 4C/39 [0C]                            mov     ecx,dword ptr [ecx+edi+0ch]
    3066    3066  0 +  0000168F  89 4C/10 [08]                            mov     dword ptr [eax+edx+08h],ecx
    3067    3067  0 +
    3068    3068  0 +                                             ; 1389          *found = freelist->cnt++;
    3069    3069  0 +  00001693  8B 10                                    mov     edx,[eax]
    3070    3070  0 +  00001695  8D 4A [01]                               lea     ecx,[edx+01h]
    3071    3071  0 +  00001698  89 08                                    mov     [eax],ecx
    3072    3072  0 +  0000169A  8B 45 [18]                               mov     eax,[ebp+018h]; found
    3073    3073  0 +  0000169D  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3074    3074  0 +  000016A0  89 10                                    mov     [eax],edx
    3075    3075  0 +
    3076    3076  0 +                                             ; 1390          break;
    3077    3077  0 +  000016A2  E9 00001728:R                            jmp     @BLBL500
    3078    3078  0 +  000016A7                                   @BLBL504:
    3079    3079  0 +  000016A7  8B C1                                    mov     eax,ecx
    3080    3080  0 +
    3081    3081  0 +                                             ; 1399          SayArea(2, "FindFreeExtSpace - found used",
    3082    3082  0 +  000016A9  83 EC 0C                                 sub     esp,0ch
    3083    3083  0 +
    3084    3084  0 +                                             ; 1394          allocated.area[allocated.cnt].start
    3085    3085  0 +  000016AC  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    3086    3086  0 +  000016AF  03 D7                                    add     edx,edi
    3087    3087  0 +
    3088    3088  0 +                                             ; 1393          ++used;
    3089    3089  0 +  000016B1  46                                       inc     esi
    3090    3090  0 +
    3091    3091  0 +                                             ; 1394          allocated.area[allocated.cnt].start
    3092    3092  0 +  000016B2  8B 4A [08]                               mov     ecx,[edx+08h]
    3093    3093  0 +  000016B5  03 C8                                    add     ecx,eax
    3094    3094  0 +  000016B7  8B 85 [FFFFFCF4]                         mov     eax,[ebp-030ch];        allocated
    3095    3095  0 +  000016BD  6B C0 14                                 imul    eax,014h
    3096    3096  0 +  000016C0  89 8C/05 [FFFFFCF8]                      mov     dword ptr [ebp+eax-0308h],ecx
    3097    3097  0 +
    3098    3098  0 +                                             ; 1396          allocated.area[allocated.cnt].size = pt.entry[i].NumSectors;
    3099    3099  0 +  000016C7  8B 85 [FFFFFCF4]                         mov     eax,[ebp-030ch];        allocated
    3100    3100  0 +  000016CD  6B C0 14                                 imul    eax,014h
    3101    3101  0 +  000016D0  8B 52 [0C]                               mov     edx,[edx+0ch]
    3102    3102  0 +  000016D3  89 94/05 [FFFFFCFC]                      mov     dword ptr [ebp+eax-0304h],edx
    3103    3103  0 +
    3104    3104  0 +                                             ; 1397          allocated.area[allocated.cnt].ptsec = secno;
    3105    3105  0 +  000016DA  8B 85 [FFFFFCF4]                         mov     eax,[ebp-030ch];        allocated


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   64
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3106    3106  0 +  000016E0  6B C0 14                                 imul    eax,014h
    3107    3107  0 +
    3108    3108  0 +                                             ; 1394          allocated.area[allocated.cnt].start
    3109    3109  0 +  000016E3  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3110    3110  0 +
    3111    3111  0 +                                             ; 1397          allocated.area[allocated.cnt].ptsec = secno;
    3112    3112  0 +  000016E6  89 8C/05 [FFFFFD04]                      mov     dword ptr [ebp+eax-02fch],ecx
    3113    3113  0 +
    3114    3114  0 +                                             ; 1398          allocated.area[allocated.cnt].extstart = secno;
    3115    3115  0 +  000016ED  8B 85 [FFFFFCF4]                         mov     eax,[ebp-030ch];        allocated
    3116    3116  0 +  000016F3  6B C0 14                                 imul    eax,014h
    3117    3117  0 +  000016F6  89 8C/05 [FFFFFD08]                      mov     dword ptr [ebp+eax-02f8h],ecx
    3118    3118  0 +
    3119    3119  0 +                                             ; 1399          SayArea(2, "FindFreeExtSpace - found used",
    3120    3120  0 +  000016FD  8B 85 [FFFFFCF4]                         mov     eax,[ebp-030ch];        allocated
    3121    3121  0 +  00001703  6B C0 14                                 imul    eax,014h
    3122    3122  0 +  00001706  8D 8C/05 [FFFFFCF8]                      lea     ecx,dword ptr [ebp+eax-0308h]
    3123    3123  0 +  0000170D  BA 00000450:R                            mov     edx,offset FLAT:@CBE33
    3124    3124  0 +  00001712  B8 00000002                              mov     eax,02h
    3125    3125  0 +  00001717  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    3126    3126  0 +
    3127    3127  0 +                                             ; 1401          ++allocated.cnt;
    3128    3128  0 +  0000171C  FF 85 [FFFFFCF4]                         inc     dword ptr [ebp-030ch];  allocated
    3129    3129  0 +
    3130    3130  0 +                                             ; 1399          SayArea(2, "FindFreeExtSpace - found used",
    3131    3131  0 +  00001722  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3132    3132  0 +  00001725  83 C4 0C                                 add     esp,0ch
    3133    3133  0 +
    3134    3134  0 +                                             ; 1402          break;
    3135    3135  0 +  00001728                                   @BLBL500:
    3136    3136  0 +
    3137    3137  0 +                                             ; 1357  for( used = i = 0; i < 4; ++i )
    3138    3138  0 +  00001728  43                                       inc     ebx
    3139    3139  0 +  00001729  83 C7 10                                 add     edi,010h
    3140    3140  0 +  0000172C  83 FB 04                                 cmp     ebx,04h
    3141    3141  0 +  0000172F  0F 82 000015AD:R                         jb      @BLBL326
    3142    3142  0 +
    3143    3143  0 +                                             ; 1406  if( free == -1 )
    3144    3144  0 +  00001735  83 BD [FFFFFDD0] FF                      cmp     dword ptr [ebp-0230h],0ffffffffh;       free
    3145    3145  0 +  0000173C  0F 85 00001764:R                         jne     @BLBL331
    3146    3146  0 +
    3147    3147  0 +                                             ; 1408      Verbose(1, "DrvScan", "FindFreeSpace(%lu): no partition entry available",
    3148    3148  0 +  00001742  FF 75 [0C]                               push    dword ptr [ebp+0ch];    secno
    3149    3149  0 +  00001745  B9 00000470:R                            mov     ecx,offset FLAT:@CBE34
    3150    3150  0 +  0000174A  83 EC 0C                                 sub     esp,0ch
    3151    3151  0 +  0000174D  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3152    3152  0 +  00001752  B8 00000001                              mov     eax,01h
    3153    3153  0 +  00001757  E8 00000000:E                            call    Verbose
    3154    3154  0 +  0000175C  83 C4 10                                 add     esp,010h
    3155    3155  0 +
    3156    3156  0 +                                             ; 1410      break;                              /* no error */
    3157    3157  0 +  0000175F  E9 0000193E:R                            jmp     @BLBL332
    3158    3158  0 +  00001764                                   @BLBL331:
    3159    3159  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   65
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3160    3160  0 +                                             ; 1412  if( *found = -1 )
    3161    3161  0 +  00001764  8B 5D [18]                               mov     ebx,[ebp+018h]; found
    3162    3162  0 +  00001767  83 3B FF                                 cmp     dword ptr [ebx],0ffffffffh
    3163    3163  0 +  0000176A  0F 85 0000193E:R                         jne     @BLBL332
    3164    3164  0 +
    3165    3165  0 +                                             ; 1421  ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    3166    3166  0 +  00001770  8B 45 [08]                               mov     eax,[ebp+08h];  disk
    3167    3167  0 +  00001773  83 EC 04                                 sub     esp,04h
    3168    3168  0 +
    3169    3169  0 +                                             ; 1425  freelist->area[freelist->cnt].start = secno + spt;
    3170    3170  0 +  00001776  8B 5D [0C]                               mov     ebx,[ebp+0ch];  secno
    3171    3171  0 +
    3172    3172  0 +                                             ; 1421  ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    3173    3173  0 +  00001779  E8 00000000:E                            call    queryDPB__8VOS2DiskFv
    3174    3174  0 +
    3175    3175  0 +                                             ; 1425  freelist->area[freelist->cnt].start = secno + spt;
    3176    3176  0 +  0000177E  8B 55 [14]                               mov     edx,[ebp+014h]; freelist
    3177    3177  0 +
    3178    3178  0 +                                             ; 1421  ULONG const spt = disk->queryDPB().cSectorsPerTrack;
    3179    3179  0 +  00001781  0F B7 48 [06]                            movzx   ecx,word ptr [eax+06h]
    3180    3180  0 +  00001785  83 C4 04                                 add     esp,04h
    3181    3181  0 +  00001788  89 8D [FFFFFDC8]                         mov     [ebp-0238h],ecx;        spt
    3182    3182  0 +
    3183    3183  0 +                                             ; 1423  Boolean inside = false;
    3184    3184  0 +  0000178E  C6 85 [FFFFFDC3] 00                      mov     byte ptr [ebp-023dh],0h;        inside
    3185    3185  0 +
    3186    3186  0 +                                             ; 1425  freelist->area[freelist->cnt].start = secno + spt;
    3187    3187  0 +  00001795  8B 3A                                    mov     edi,[edx]
    3188    3188  0 +  00001797  6B FF 14                                 imul    edi,014h
    3189    3189  0 +  0000179A  03 CB                                    add     ecx,ebx
    3190    3190  0 +  0000179C  89 4C/3A [04]                            mov     dword ptr [edx+edi+04h],ecx
    3191    3191  0 +
    3192    3192  0 +                                             ; 1426  for( ul = secno + spt; ul < secno + seccnt; ++ul )
    3193    3193  0 +  000017A0  03 5D [10]                               add     ebx,[ebp+010h]; seccnt
    3194    3194  0 +  000017A3  89 8D [FFFFFDCC]                         mov     [ebp-0234h],ecx;        ul
    3195    3195  0 +  000017A9  3B CB                                    cmp     ecx,ebx
    3196    3196  0 +  000017AB  0F 83 000018E5:R                         jae     @BLBL334
    3197    3197  0 +  000017B1  89 9D [FFFFFDC4]                         mov     [ebp-023ch],ebx;        @CBE126
    3198    3198  0 +  000017B7                                   @BLBL335:
    3199    3199  0 +
    3200    3200  0 +                                             ; 1428      for( i = 0; i < allocated.cnt; ++i )
    3201    3201  0 +  000017B7  83 BD [FFFFFCF4] 00                      cmp     dword ptr [ebp-030ch],0h;       allocated
    3202    3202  0 +  000017BE  0F 86 000018D2:R                         jbe     @BLBL346
    3203    3203  0 +  000017C4  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    3204    3204  0 +  000017C7  8A 9D [FFFFFDC3]                         mov     bl,[ebp-023dh]; inside
    3205    3205  0 +  000017CD  33 F6                                    xor     esi,esi
    3206    3206  0 +  000017CF  33 FF                                    xor     edi,edi
    3207    3207  0 +  000017D1                                   @BLBL337:
    3208    3208  0 +
    3209    3209  0 +                                             ; 1430          if( ul == allocated.area[i].start )
    3210    3210  0 +  000017D1  39 8C/3D [FFFFFCF8]                      cmp     dword ptr [ebp+edi-0308h],ecx
    3211    3211  0 +  000017D8  0F 85 000018A2:R                         jne     @BLBL338
    3212    3212  0 +
    3213    3213  0 +                                             ; 1432              if( inside )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   66
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3214    3214  0 +  000017DE  84 DB                                    test    bl,bl
    3215    3215  0 +  000017E0  0F 85 00001873:R                         jne     @BLBL339
    3216    3216  0 +
    3217    3217  0 +                                             ; 1434                  freelist->area[freelist->cnt].size
    3218    3218  0 +  000017E6  8B 45 [14]                               mov     eax,[ebp+014h]; freelist
    3219    3219  0 +
    3220    3220  0 +                                             ; 1432              if( inside )
    3221    3221  0 +  000017E9  89 9D [FFFFFCD8]                         mov     [ebp-0328h],ebx;        @CBE128
    3222    3222  0 +
    3223    3223  0 +                                             ; 1434                  freelist->area[freelist->cnt].size
    3224    3224  0 +  000017EF  8B 18                                    mov     ebx,[eax]
    3225    3225  0 +  000017F1  6B DB 14                                 imul    ebx,014h
    3226    3226  0 +  000017F4  03 D8                                    add     ebx,eax
    3227    3227  0 +  000017F6  8B D1                                    mov     edx,ecx
    3228    3228  0 +  000017F8  2B 53 [04]                               sub     edx,[ebx+04h]
    3229    3229  0 +  000017FB  89 53 [08]                               mov     [ebx+08h],edx
    3230    3230  0 +
    3231    3231  0 +                                             ; 1436                  if( freelist->area[freelist->cnt].size >= MIN_VRAID_PART
    3232    3232  0 +  000017FE  8B 18                                    mov     ebx,[eax]
    3233    3233  0 +  00001800  6B DB 14                                 imul    ebx,014h
    3234    3234  0 +  00001803  8D 14/18                                 lea     edx,dword ptr [eax+ebx]
    3235    3235  0 +  00001806  8B 9D [FFFFFCD8]                         mov     ebx,[ebp-0328h];        @CBE128
    3236    3236  0 +  0000180C  8B 42 [08]                               mov     eax,[edx+08h]
    3237    3237  0 +  0000180F  89 95 [FFFFFCDC]                         mov     [ebp-0324h],edx;        @CBE127
    3238    3238  0 +  00001815  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    3239    3239  0 +  00001818  3D 00002800                              cmp     eax,02800h
    3240    3240  0 +  0000181D  0F 82 00001871:R                         jb      @BLBL340
    3241    3241  0 +  00001823  39 85 [FFFFFDC8]                         cmp     [ebp-0238h],eax;        spt
    3242    3242  0 +  00001829  8B 45 [14]                               mov     eax,[ebp+014h]; freelist
    3243    3243  0 +  0000182C  0F 83 00001871:R                         jae     @BLBL340
    3244    3244  0 +  00001832  87 8D [FFFFFCDC]                         xchg    [ebp-0324h],ecx;        @CBE127
    3245    3245  0 +
    3246    3246  0 +                                             ; 1441                      SayArea(2, "FindFreeSpace - found free",
    3247    3247  0 +  00001838  83 EC 0C                                 sub     esp,0ch
    3248    3248  0 +
    3249    3249  0 +                                             ; 1439                      freelist->area[freelist->cnt].ptsec = secno;
    3250    3250  0 +  0000183B  89 51 [10]                               mov     [ecx+010h],edx
    3251    3251  0 +
    3252    3252  0 +                                             ; 1440                      freelist->area[freelist->cnt].extstart = secno;
    3253    3253  0 +  0000183E  8B 08                                    mov     ecx,[eax]
    3254    3254  0 +  00001840  6B C9 14                                 imul    ecx,014h
    3255    3255  0 +  00001843  89 54/08 [14]                            mov     dword ptr [eax+ecx+014h],edx
    3256    3256  0 +
    3257    3257  0 +                                             ; 1441                      SayArea(2, "FindFreeSpace - found free",
    3258    3258  0 +  00001847  8B 08                                    mov     ecx,[eax]
    3259    3259  0 +  00001849  6B C9 14                                 imul    ecx,014h
    3260    3260  0 +  0000184C  03 C8                                    add     ecx,eax
    3261    3261  0 +  0000184E  83 C1 04                                 add     ecx,04h
    3262    3262  0 +  00001851  BA 000004A4:R                            mov     edx,offset FLAT:@CBE35
    3263    3263  0 +  00001856  B8 00000002                              mov     eax,02h
    3264    3264  0 +  0000185B  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    3265    3265  0 +  00001860  8B 45 [14]                               mov     eax,[ebp+014h]; freelist
    3266    3266  0 +  00001863  8B 8D [FFFFFCDC]                         mov     ecx,[ebp-0324h];        @CBE127
    3267    3267  0 +  00001869  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   67
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3268    3268  0 +
    3269    3269  0 +                                             ; 1443                      ++freelist->cnt;
    3270    3270  0 +  0000186C  FF 00                                    inc     dword ptr [eax]
    3271    3271  0 +
    3272    3272  0 +                                             ; 1441                      SayArea(2, "FindFreeSpace - found free",
    3273    3273  0 +  0000186E  83 C4 0C                                 add     esp,0ch
    3274    3274  0 +
    3275    3275  0 +                                             ; 1444                  }
    3276    3276  0 +  00001871                                   @BLBL340:
    3277    3277  0 +
    3278    3278  0 +                                             ; 1445                  inside = true;
    3279    3279  0 +  00001871  B3 01                                    mov     bl,01h
    3280    3280  0 +
    3281    3281  0 +                                             ; 1446              }
    3282    3282  0 +  00001873                                   @BLBL339:
    3283    3283  0 +  00001873  8B C1                                    mov     eax,ecx
    3284    3284  0 +
    3285    3285  0 +                                             ; 1447              ul += allocated.area[i].size - 1;
    3286    3286  0 +  00001875  8B 8C/3D [FFFFFCFC]                      mov     ecx,dword ptr [ebp+edi-0304h]
    3287    3287  0 +  0000187C  49                                       dec     ecx
    3288    3288  0 +  0000187D  03 C8                                    add     ecx,eax
    3289    3289  0 +
    3290    3290  0 +                                             ; 1448              freelist->area[freelist->cnt].start = ul + 1;
    3291    3291  0 +  0000187F  8B 45 [14]                               mov     eax,[ebp+014h]; freelist
    3292    3292  0 +
    3293    3293  0 +                                             ; 1446              }
    3294    3294  0 +  00001882  89 9D [FFFFFCD8]                         mov     [ebp-0328h],ebx;        @CBE128
    3295    3295  0 +
    3296    3296  0 +                                             ; 1448              freelist->area[freelist->cnt].start = ul + 1;
    3297    3297  0 +  00001888  8B 10                                    mov     edx,[eax]
    3298    3298  0 +  0000188A  6B D2 14                                 imul    edx,014h
    3299    3299  0 +  0000188D  8D 59 [01]                               lea     ebx,[ecx+01h]
    3300    3300  0 +  00001890  89 5C/10 [04]                            mov     dword ptr [eax+edx+04h],ebx
    3301    3301  0 +  00001894  8B 9D [FFFFFCD8]                         mov     ebx,[ebp-0328h];        @CBE128
    3302    3302  0 +  0000189A  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    3303    3303  0 +
    3304    3304  0 +                                             ; 1449              break;
    3305    3305  0 +  0000189D  EB 2D 90 90 90                           jmp     @BLBL499
    3306    3306  0 +  000018A2                                   @BLBL338:
    3307    3307  0 +
    3308    3308  0 +                                             ; 1451          else if( ul == allocated.area[i].start + allocated.area[i].size )
    3309    3309  0 +  000018A2  8D 94/3D [FFFFFCF4]                      lea     edx,dword ptr [ebp+edi-030ch]
    3310    3310  0 +  000018A9  8B 42 [08]                               mov     eax,[edx+08h];  allocated
    3311    3311  0 +  000018AC  03 42 [04]                               add     eax,[edx+04h]
    3312    3312  0 +  000018AF  8B 55 [0C]                               mov     edx,[ebp+0ch];  secno
    3313    3313  0 +  000018B2  3B C1                                    cmp     eax,ecx
    3314    3314  0 +  000018B4  0F 85 000018BC:R                         jne     @BLBL344
    3315    3315  0 +
    3316    3316  0 +                                             ; 1453              inside = false;
    3317    3317  0 +  000018BA  33 DB                                    xor     ebx,ebx
    3318    3318  0 +
    3319    3319  0 +                                             ; 1455      } /* end[for(every partition entry)] */
    3320    3320  0 +  000018BC                                   @BLBL344:
    3321    3321  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   68
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3322    3322  0 +                                             ; 1428      for( i = 0; i < allocated.cnt; ++i )
    3323    3323  0 +  000018BC  46                                       inc     esi
    3324    3324  0 +  000018BD  83 C7 14                                 add     edi,014h
    3325    3325  0 +  000018C0  39 B5 [FFFFFCF4]                         cmp     [ebp-030ch],esi;        allocated
    3326    3326  0 +  000018C6  0F 87 000017D1:R                         ja      @BLBL337
    3327    3327  0 +  000018CC                                   @BLBL499:
    3328    3328  0 +  000018CC  88 9D [FFFFFDC3]                         mov     [ebp-023dh],bl; inside
    3329    3329  0 +  000018D2                                   @BLBL346:
    3330    3330  0 +
    3331    3331  0 +                                             ; 1426  for( ul = secno + spt; ul < secno + seccnt; ++ul )
    3332    3332  0 +  000018D2  41                                       inc     ecx
    3333    3333  0 +  000018D3  39 8D [FFFFFDC4]                         cmp     [ebp-023ch],ecx;        @CBE126
    3334    3334  0 +  000018D9  0F 87 000017B7:R                         ja      @BLBL335
    3335    3335  0 +  000018DF  89 8D [FFFFFDCC]                         mov     [ebp-0234h],ecx;        ul
    3336    3336  0 +  000018E5                                   @BLBL334:
    3337    3337  0 +
    3338    3338  0 +                                             ; 1457  if( inside )
    3339    3339  0 +  000018E5  80 BD [FFFFFDC3] 00                      cmp     byte ptr [ebp-023dh],0h;        inside
    3340    3340  0 +  000018EC  0F 85 0000193E:R                         jne     @BLBL332
    3341    3341  0 +
    3342    3342  0 +                                             ; 1459      freelist->area[freelist->cnt].size
    3343    3343  0 +  000018F2  8B 5D [14]                               mov     ebx,[ebp+014h]; freelist
    3344    3344  0 +
    3345    3345  0 +                                             ; 1463      SayArea(2, "FindFreeSpace - found", &freelist->area[freelist->cnt]);
    3346    3346  0 +  000018F5  83 EC 0C                                 sub     esp,0ch
    3347    3347  0 +
    3348    3348  0 +                                             ; 1459      freelist->area[freelist->cnt].size
    3349    3349  0 +  000018F8  8B 03                                    mov     eax,[ebx]
    3350    3350  0 +  000018FA  6B C0 14                                 imul    eax,014h
    3351    3351  0 +  000018FD  03 C3                                    add     eax,ebx
    3352    3352  0 +  000018FF  8B 8D [FFFFFDCC]                         mov     ecx,[ebp-0234h];        ul
    3353    3353  0 +  00001905  2B 48 [04]                               sub     ecx,[eax+04h]
    3354    3354  0 +  00001908  89 48 [08]                               mov     [eax+08h],ecx
    3355    3355  0 +
    3356    3356  0 +                                             ; 1461      freelist->area[freelist->cnt].ptsec = secno;
    3357    3357  0 +  0000190B  8B 03                                    mov     eax,[ebx]
    3358    3358  0 +  0000190D  6B C0 14                                 imul    eax,014h
    3359    3359  0 +  00001910  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3360    3360  0 +  00001913  89 4C/03 [10]                            mov     dword ptr [ebx+eax+010h],ecx
    3361    3361  0 +
    3362    3362  0 +                                             ; 1462      freelist->area[freelist->cnt].extstart = secno;
    3363    3363  0 +  00001917  8B 03                                    mov     eax,[ebx]
    3364    3364  0 +  00001919  6B C0 14                                 imul    eax,014h
    3365    3365  0 +  0000191C  89 4C/03 [14]                            mov     dword ptr [ebx+eax+014h],ecx
    3366    3366  0 +
    3367    3367  0 +                                             ; 1463      SayArea(2, "FindFreeSpace - found", &freelist->area[freelist->cnt]);
    3368    3368  0 +  00001920  8B 0B                                    mov     ecx,[ebx]
    3369    3369  0 +  00001922  6B C9 14                                 imul    ecx,014h
    3370    3370  0 +  00001925  03 CB                                    add     ecx,ebx
    3371    3371  0 +  00001927  83 C1 04                                 add     ecx,04h
    3372    3372  0 +  0000192A  BA 000004C0:R                            mov     edx,offset FLAT:@CBE36
    3373    3373  0 +  0000192F  B8 00000002                              mov     eax,02h
    3374    3374  0 +  00001934  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    3375    3375  0 +  00001939  83 C4 0C                                 add     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   69
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3376    3376  0 +
    3377    3377  0 +                                             ; 1464      ++freelist->cnt;
    3378    3378  0 +  0000193C  FF 03                                    inc     dword ptr [ebx]
    3379    3379  0 +
    3380    3380  0 +                                             ; 1467     while( 0 );
    3381    3381  0 +  0000193E                                   @BLBL332:
    3382    3382  0 +  0000193E  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    3383    3383  0 +  00001944  83 EC 08                                 sub     esp,08h
    3384    3384  0 +  00001947  C7 85 [FFFFFCE0]                         mov     dword ptr [ebp-0320h],0h;       __es
                                 00000000
    3385    3385  0 +  00001951  BA 00000002                              mov     edx,02h
    3386    3386  0 +  00001956  E8 00000000:E                            call    __dt__9PartTableFv
    3387    3387  0 +  0000195B  83 C4 08                                 add     esp,08h
    3388    3388  0 +
    3389    3389  0 +                                             ; 1469     Verbose(3, "DrvScan", "FindFreeSpace - rc %lu", rc);
    3390    3390  0 +  0000195E  8B B5 [FFFFFDD4]                         mov     esi,[ebp-022ch];        rc
    3391    3391  0 +  00001964  56                                       push    esi
    3392    3392  0 +  00001965  B9 000004D8:R                            mov     ecx,offset FLAT:@CBE37
    3393    3393  0 +  0000196A  83 EC 0C                                 sub     esp,0ch
    3394    3394  0 +  0000196D  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3395    3395  0 +  00001972  B8 00000003                              mov     eax,03h
    3396    3396  0 +  00001977  E8 00000000:E                            call    Verbose
    3397    3397  0 +  0000197C  83 C4 10                                 add     esp,010h
    3398    3398  0 +  0000197F  8B C6                                    mov     eax,esi
    3399    3399  0 +
    3400    3400  0 +                                             ; 1470     return rc;
    3401    3401  0 +  00001981  5E                                       pop     esi
    3402    3402  0 +  00001982  5F                                       pop     edi
    3403    3403  0 +  00001983  5B                                       pop     ebx
    3404    3404  0 +  00001984  81 C4 00000320                           add     esp,0320h
    3405    3405  0 +  0000198A  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(3405:6): Warning ALP4511: Assuming segment width for operand size
    3406    3406  0 +  00001991  C9                                       leave
    3407    3407  0 +  00001992  C3                                       ret
    3408    3408  0 +  00001993                                   FindFreeExtSpace__FCP8VOS2DiskCUlT2CP8_DSKAREACPi       endp
    3409    3409  0 +
    3410    3410  0 +                                             ; 1260 ScanExtAllocated(VOS2Disk * const disk,
    3411    3411  0 +
    3412    3412  0 +  00001993                                   ScanExtAllocated__FCP8VOS2DiskCUlN22CP8_DSKAREACPi      proc
    3413    3413  0 +  00001993  55                                       push    ebp
    3414    3414  0 +  00001994  8B EC                                    mov     ebp,esp
    3415    3415  0 +  00001996  68 00000000:E                            push    offset FLAT: _Exception_CPP
    3416    3416  0 +  0000199B  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(3416:7): Warning ALP4511: Assuming segment width for operand size
    3417    3417  0 +  000019A2  64:89 25 [00000000]                      mov     fs:[0h],esp
    3418    3418  0 +  000019A9  68 FFFFFDC0                              push    0fffffdc0h
    3419    3419  0 +  000019AE  81 EC 00000234                           sub     esp,0234h
    3420    3420  0 +
    3421    3421  0 +                                             ; 1264 {
    3422    3422  0 +  000019B4  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],0h;       __es
                                 00000000
    3423    3423  0 +
    3424    3424  0 +                                             ; 1260 ScanExtAllocated(VOS2Disk * const disk,
    3425    3425  0 +  000019BE  53                                       push    ebx


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   70
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3426    3426  0 +  000019BF  8B DA                                    mov     ebx,edx
    3427    3427  0 +  000019C1  57                                       push    edi
    3428    3428  0 +
    3429    3429  0 +                                             ; 1264 {
    3430    3430  0 +  000019C2  C7 85 [FFFFFDC8]                         mov     dword ptr [ebp-0238h],offset FLAT:@14f__fsm_tab;        __es
                                 0000010C:R
    3431    3431  0 +
    3432    3432  0 +                                             ; 1260 ScanExtAllocated(VOS2Disk * const disk,
    3433    3433  0 +  000019CC  56                                       push    esi
    3434    3434  0 +
    3435    3435  0 +                                             ; 1265     APIRET       rc = 0;
    3436    3436  0 +  000019CD  C7 85 [FFFFFDD4]                         mov     dword ptr [ebp-022ch],0h;       rc
                                 00000000
    3437    3437  0 +
    3438    3438  0 +                                             ; 1267     Verbose(2, "DrvScan", "ScanExtAllocated(%lu, %lu)", secno, seccnt);
    3439    3439  0 +  000019D7  51                                       push    ecx
    3440    3440  0 +
    3441    3441  0 +                                             ; 1260 ScanExtAllocated(VOS2Disk * const disk,
    3442    3442  0 +  000019D8  8B F0                                    mov     esi,eax
    3443    3443  0 +
    3444    3444  0 +                                             ; 1267     Verbose(2, "DrvScan", "ScanExtAllocated(%lu, %lu)", secno, seccnt);
    3445    3445  0 +  000019DA  53                                       push    ebx
    3446    3446  0 +  000019DB  B9 000003FC:R                            mov     ecx,offset FLAT:@CBE30
    3447    3447  0 +  000019E0  83 EC 0C                                 sub     esp,0ch
    3448    3448  0 +  000019E3  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3449    3449  0 +  000019E8  B8 00000002                              mov     eax,02h
    3450    3450  0 +  000019ED  E8 00000000:E                            call    Verbose
    3451    3451  0 +  000019F2  83 C4 14                                 add     esp,014h
    3452    3452  0 +  000019F5  8B C6                                    mov     eax,esi
    3453    3453  0 +
    3454    3454  0 +                                             ; 1269     PartTable    pt(disk, secno, true);
    3455    3455  0 +  000019F7  6A 01                                    push    01h
    3456    3456  0 +
    3457    3457  0 +                                             ; 1260 ScanExtAllocated(VOS2Disk * const disk,
    3458    3458  0 +  000019F9  89 75 [08]                               mov     [ebp+08h],esi;  disk
    3459    3459  0 +
    3460    3460  0 +                                             ; 1276     for( unsigned i = 0; i < 4; ++i )
    3461    3461  0 +  000019FC  89 5D [0C]                               mov     [ebp+0ch],ebx;  secno
    3462    3462  0 +
    3463    3463  0 +                                             ; 1269     PartTable    pt(disk, secno, true);
    3464    3464  0 +  000019FF  8B CB                                    mov     ecx,ebx
    3465    3465  0 +  00001A01  8B D0                                    mov     edx,eax
    3466    3466  0 +  00001A03  83 EC 0C                                 sub     esp,0ch
    3467    3467  0 +  00001A06  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    3468    3468  0 +  00001A0C  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUl7Boolean
    3469    3469  0 +  00001A11  8B CB                                    mov     ecx,ebx
    3470    3470  0 +  00001A13  83 C4 10                                 add     esp,010h
    3471    3471  0 +
    3472    3472  0 +                                             ; 1276     for( unsigned i = 0; i < 4; ++i )
    3473    3473  0 +  00001A16  8B 55 [14]                               mov     edx,[ebp+014h]; extstart
    3474    3474  0 +  00001A19  8B 75 [18]                               mov     esi,[ebp+018h]; usedspace
    3475    3475  0 +
    3476    3476  0 +                                             ; 1269     PartTable    pt(disk, secno, true);
    3477    3477  0 +  00001A1C  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],01h;      __es


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   71
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


                                 00000001
    3478    3478  0 +
    3479    3479  0 +                                             ; 1276     for( unsigned i = 0; i < 4; ++i )
    3480    3480  0 +  00001A26  33 DB                                    xor     ebx,ebx
    3481    3481  0 +  00001A28  33 FF                                    xor     edi,edi
    3482    3482  0 +  00001A2A                                   @BLBL318:
    3483    3483  0 +
    3484    3484  0 +                                             ; 1278  switch( pt.entry[i].SysIndicator )
    3485    3485  0 +  00001A2A  8B 45 [F0]                               mov     eax,[ebp-010h]; pt
    3486    3486  0 +  00001A2D  0F B6 44/38 [04]                         movzx   eax,byte ptr [eax+edi+04h]
    3487    3487  0 +  00001A32  85 C0                                    test    eax,eax
    3488    3488  0 +  00001A34  0F 84 00001B22:R                         je      @BLBL505
    3489    3489  0 +  00001A3A  83 F8 05                                 cmp     eax,05h
    3490    3490  0 +  00001A3D  0F 84 00001A51:R                         je      @BLBL506
    3491    3491  0 +  00001A43  83 F8 7C                                 cmp     eax,07ch
    3492    3492  0 +  00001A46  0F 84 00001A84:R                         je      @BLBL507
    3493    3493  0 +  00001A4C  EB 71 90 90 90                           jmp     @BLBL508
    3494    3494  0 +  00001A51                                   @BLBL506:
    3495    3495  0 +
    3496    3496  0 +                                             ; 1281      rc = ScanExtAllocated(disk, extstart + pt.entry[i].RelativeSectors,
    3497    3497  0 +  00001A51  FF 75 [1C]                               push    dword ptr [ebp+01ch];   found
    3498    3498  0 +
    3499    3499  0 +                                             ; 1278  switch( pt.entry[i].SysIndicator )
    3500    3500  0 +  00001A54  8B C2                                    mov     eax,edx
    3501    3501  0 +
    3502    3502  0 +                                             ; 1281      rc = ScanExtAllocated(disk, extstart + pt.entry[i].RelativeSectors,
    3503    3503  0 +  00001A56  56                                       push    esi
    3504    3504  0 +  00001A57  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    3505    3505  0 +  00001A5A  50                                       push    eax
    3506    3506  0 +  00001A5B  03 D7                                    add     edx,edi
    3507    3507  0 +  00001A5D  83 EC 0C                                 sub     esp,0ch
    3508    3508  0 +  00001A60  8B 4A [0C]                               mov     ecx,[edx+0ch]
    3509    3509  0 +  00001A63  8B 52 [08]                               mov     edx,[edx+08h]
    3510    3510  0 +  00001A66  03 D0                                    add     edx,eax
    3511    3511  0 +  00001A68  8B 45 [08]                               mov     eax,[ebp+08h];  disk
    3512    3512  0 +  00001A6B  E8 00001993:R                            call    ScanExtAllocated__FCP8VOS2DiskCUlN22CP8_DSKAREACPi
    3513    3513  0 +  00001A70  83 C4 18                                 add     esp,018h
    3514    3514  0 +  00001A73  8B 55 [14]                               mov     edx,[ebp+014h]; extstart
    3515    3515  0 +  00001A76  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3516    3516  0 +  00001A79  89 85 [FFFFFDD4]                         mov     [ebp-022ch],eax;        rc
    3517    3517  0 +
    3518    3518  0 +                                             ; 1284      break;
    3519    3519  0 +  00001A7F  E9 00001B22:R                            jmp     @BLBL505
    3520    3520  0 +  00001A84                                   @BLBL507:
    3521    3521  0 +
    3522    3522  0 +                                             ; 1287      usedspace->area[usedspace->cnt].start
    3523    3523  0 +  00001A84  8B 06                                    mov     eax,[esi]
    3524    3524  0 +
    3525    3525  0 +                                             ; 1284      break;
    3526    3526  0 +  00001A86  8B D1                                    mov     edx,ecx
    3527    3527  0 +
    3528    3528  0 +                                             ; 1287      usedspace->area[usedspace->cnt].start
    3529    3529  0 +  00001A88  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    3530    3530  0 +  00001A8B  6B C0 14                                 imul    eax,014h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   72
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3531    3531  0 +  00001A8E  8B 4C/39 [08]                            mov     ecx,dword ptr [ecx+edi+08h]
    3532    3532  0 +  00001A92  03 CA                                    add     ecx,edx
    3533    3533  0 +  00001A94  8B 55 [14]                               mov     edx,[ebp+014h]; extstart
    3534    3534  0 +  00001A97  89 4C/06 [04]                            mov     dword ptr [esi+eax+04h],ecx
    3535    3535  0 +
    3536    3536  0 +                                             ; 1289      usedspace->area[usedspace->cnt].size = pt.entry[i].NumSectors;
    3537    3537  0 +  00001A9B  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    3538    3538  0 +  00001A9E  8B 06                                    mov     eax,[esi]
    3539    3539  0 +  00001AA0  6B C0 14                                 imul    eax,014h
    3540    3540  0 +  00001AA3  8B 4C/39 [0C]                            mov     ecx,dword ptr [ecx+edi+0ch]
    3541    3541  0 +  00001AA7  89 4C/06 [08]                            mov     dword ptr [esi+eax+08h],ecx
    3542    3542  0 +
    3543    3543  0 +                                             ; 1290      *found = usedspace->cnt++;
    3544    3544  0 +  00001AAB  8B 0E                                    mov     ecx,[esi]
    3545    3545  0 +  00001AAD  8D 41 [01]                               lea     eax,[ecx+01h]
    3546    3546  0 +  00001AB0  89 06                                    mov     [esi],eax
    3547    3547  0 +  00001AB2  8B 45 [1C]                               mov     eax,[ebp+01ch]; found
    3548    3548  0 +  00001AB5  89 08                                    mov     [eax],ecx
    3549    3549  0 +  00001AB7  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3550    3550  0 +
    3551    3551  0 +                                             ; 1291      break;
    3552    3552  0 +  00001ABA  EB 66 90 90 90                           jmp     @BLBL505
    3553    3553  0 +  00001ABF                                   @BLBL508:
    3554    3554  0 +
    3555    3555  0 +                                             ; 1294      usedspace->area[usedspace->cnt].start
    3556    3556  0 +  00001ABF  8B 06                                    mov     eax,[esi]
    3557    3557  0 +
    3558    3558  0 +                                             ; 1291      break;
    3559    3559  0 +  00001AC1  8B D1                                    mov     edx,ecx
    3560    3560  0 +
    3561    3561  0 +                                             ; 1299      SayArea(2, "ScanExtAllocated - foun
    3562    3562  0 +                                             ; 1299 d", &usedspace->area[usedspace->cnt]);
    3563    3563  0 +  00001AC3  83 EC 0C                                 sub     esp,0ch
    3564    3564  0 +
    3565    3565  0 +                                             ; 1294      usedspace->area[usedspace->cnt].start
    3566    3566  0 +  00001AC6  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    3567    3567  0 +  00001AC9  6B C0 14                                 imul    eax,014h
    3568    3568  0 +  00001ACC  8B 4C/39 [08]                            mov     ecx,dword ptr [ecx+edi+08h]
    3569    3569  0 +  00001AD0  03 CA                                    add     ecx,edx
    3570    3570  0 +  00001AD2  8B 55 [14]                               mov     edx,[ebp+014h]; extstart
    3571    3571  0 +  00001AD5  89 4C/06 [04]                            mov     dword ptr [esi+eax+04h],ecx
    3572    3572  0 +
    3573    3573  0 +                                             ; 1296      usedspace->area[usedspace->cnt].size = pt.entry[i].NumSectors;
    3574    3574  0 +  00001AD9  8B 4D [F0]                               mov     ecx,[ebp-010h]; pt
    3575    3575  0 +  00001ADC  8B 06                                    mov     eax,[esi]
    3576    3576  0 +  00001ADE  6B C0 14                                 imul    eax,014h
    3577    3577  0 +  00001AE1  8B 4C/39 [0C]                            mov     ecx,dword ptr [ecx+edi+0ch]
    3578    3578  0 +  00001AE5  89 4C/06 [08]                            mov     dword ptr [esi+eax+08h],ecx
    3579    3579  0 +
    3580    3580  0 +                                             ; 1297      usedspace->area[usedspace->cnt].ptsec = secno;
    3581    3581  0 +  00001AE9  8B 06                                    mov     eax,[esi]
    3582    3582  0 +  00001AEB  6B C0 14                                 imul    eax,014h
    3583    3583  0 +
    3584    3584  0 +                                             ; 1296      usedspace->area[usedspace->cnt].size = pt.entry[i].NumSectors;


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   73
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3585    3585  0 +  00001AEE  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3586    3586  0 +
    3587    3587  0 +                                             ; 1297      usedspace->area[usedspace->cnt].ptsec = secno;
    3588    3588  0 +  00001AF1  89 4C/06 [10]                            mov     dword ptr [esi+eax+010h],ecx
    3589    3589  0 +
    3590    3590  0 +                                             ; 1298      usedspace->area[usedspace->cnt].extstart = extstart;
    3591    3591  0 +  00001AF5  8B 06                                    mov     eax,[esi]
    3592    3592  0 +  00001AF7  6B C0 14                                 imul    eax,014h
    3593    3593  0 +  00001AFA  89 54/06 [14]                            mov     dword ptr [esi+eax+014h],edx
    3594    3594  0 +
    3595    3595  0 +                                             ; 1299      SayArea(2, "ScanExtAllocated - foun
    3596    3596  0 +                                             ; 1299 d", &usedspace->area[usedspace->cnt]);
    3597    3597  0 +  00001AFE  8B 0E                                    mov     ecx,[esi]
    3598    3598  0 +  00001B00  6B C9 14                                 imul    ecx,014h
    3599    3599  0 +  00001B03  03 CE                                    add     ecx,esi
    3600    3600  0 +  00001B05  83 C1 04                                 add     ecx,04h
    3601    3601  0 +  00001B08  BA 00000418:R                            mov     edx,offset FLAT:@CBE31
    3602    3602  0 +  00001B0D  B8 00000002                              mov     eax,02h
    3603    3603  0 +  00001B12  E8 00001B69:R                            call    SayArea__FUiCPcP14_DSKAREA_ENTRY
    3604    3604  0 +  00001B17  8B 55 [14]                               mov     edx,[ebp+014h]; extstart
    3605    3605  0 +  00001B1A  8B 4D [0C]                               mov     ecx,[ebp+0ch];  secno
    3606    3606  0 +
    3607    3607  0 +                                             ; 1300      usedspace->cnt++;
    3608    3608  0 +  00001B1D  FF 06                                    inc     dword ptr [esi]
    3609    3609  0 +
    3610    3610  0 +                                             ; 1299      SayArea(2, "ScanExtAllocated - foun
    3611    3611  0 +                                             ; 1299 d", &usedspace->area[usedspace->cnt]);
    3612    3612  0 +  00001B1F  83 C4 0C                                 add     esp,0ch
    3613    3613  0 +
    3614    3614  0 +                                             ; 1304      break;
    3615    3615  0 +  00001B22                                   @BLBL505:
    3616    3616  0 +
    3617    3617  0 +                                             ; 1276     for( unsigned i = 0; i < 4; ++i )
    3618    3618  0 +  00001B22  43                                       inc     ebx
    3619    3619  0 +  00001B23  83 C7 10                                 add     edi,010h
    3620    3620  0 +  00001B26  83 FB 04                                 cmp     ebx,04h
    3621    3621  0 +  00001B29  0F 82 00001A2A:R                         jb      @BLBL318
    3622    3622  0 +
    3623    3623  0 +                                             ; 1308     return rc;
    3624    3624  0 +  00001B2F  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    3625    3625  0 +  00001B35  83 EC 08                                 sub     esp,08h
    3626    3626  0 +  00001B38  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],0h;       __es
                                 00000000
    3627    3627  0 +  00001B42  BA 00000002                              mov     edx,02h
    3628    3628  0 +  00001B47  E8 00000000:E                            call    __dt__9PartTableFv
    3629    3629  0 +  00001B4C  8B B5 [FFFFFDD4]                         mov     esi,[ebp-022ch];        rc
    3630    3630  0 +  00001B52  83 C4 08                                 add     esp,08h
    3631    3631  0 +  00001B55  8B C6                                    mov     eax,esi
    3632    3632  0 +  00001B57  5E                                       pop     esi
    3633    3633  0 +  00001B58  5F                                       pop     edi
    3634    3634  0 +  00001B59  5B                                       pop     ebx
    3635    3635  0 +  00001B5A  81 C4 00000238                           add     esp,0238h
    3636    3636  0 +  00001B60  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(3636:6): Warning ALP4511: Assuming segment width for operand size


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   74
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3637    3637  0 +  00001B67  C9                                       leave
    3638    3638  0 +  00001B68  C3                                       ret
    3639    3639  0 +  00001B69                                   ScanExtAllocated__FCP8VOS2DiskCUlN22CP8_DSKAREACPi      endp
    3640    3640  0 +
    3641    3641  0 +                                             ; 1230 SayArea(unsigned level,PSZ const msgstart,struct _DSKAREA_ENTRY * area)
    3642    3642  0 +
    3643    3643  0 +  00001B69                                   SayArea__FUiCPcP14_DSKAREA_ENTRY        proc
    3644    3644  0 +  00001B69  53                                       push    ebx
    3645    3645  0 +  00001B6A  8B DA                                    mov     ebx,edx
    3646    3646  0 +  00001B6C  57                                       push    edi
    3647    3647  0 +  00001B6D  8B F9                                    mov     edi,ecx
    3648    3648  0 +
    3649    3649  0 +                                             ; 1232     Verbose(level, "DrvScan", "%s area (start %lu, size %lu), PT %lu, EXT %lu",
    3650    3650  0 +  00001B6F  B9 000003CC:R                            mov     ecx,offset FLAT:@CBE29
    3651    3651  0 +  00001B74  FF 77 [10]                               push    dword ptr [edi+010h]
    3652    3652  0 +  00001B77  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3653    3653  0 +  00001B7C  FF 77 [0C]                               push    dword ptr [edi+0ch]
    3654    3654  0 +  00001B7F  FF 77 [04]                               push    dword ptr [edi+04h]
    3655    3655  0 +  00001B82  FF 37                                    push    dword ptr [edi]
    3656    3656  0 +  00001B84  53                                       push    ebx
    3657    3657  0 +  00001B85  83 EC 0C                                 sub     esp,0ch
    3658    3658  0 +  00001B88  E8 00000000:E                            call    Verbose
    3659    3659  0 +  00001B8D  83 C4 20                                 add     esp,020h
    3660    3660  0 +
    3661    3661  0 +                                             ; 1234 }
    3662    3662  0 +  00001B90  5F                                       pop     edi
    3663    3663  0 +  00001B91  5B                                       pop     ebx
    3664    3664  0 +  00001B92  C3                                       ret
    3665    3665  0 +  00001B93                                   SayArea__FUiCPcP14_DSKAREA_ENTRY        endp
    3666    3666  0 +
    3667    3667  0 +                                             ; 1114 BuildDevTree(PWORK const work)
    3668    3668  0 +
    3669    3669  0 +  00001B93                                   BuildDevTree__FCP5_WORK proc
    3670    3670  0 +  00001B93  55                                       push    ebp
    3671    3671  0 +  00001B94  8B EC                                    mov     ebp,esp
    3672    3672  0 +  00001B96  68 00000000:E                            push    offset FLAT: _Exception_CPP
    3673    3673  0 +  00001B9B  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(3673:7): Warning ALP4511: Assuming segment width for operand size
    3674    3674  0 +  00001BA2  64:89 25 [00000000]                      mov     fs:[0h],esp
    3675    3675  0 +  00001BA9  6A C4                                    push    0ffffffc4h
    3676    3676  0 +  00001BAB  89 45 [08]                               mov     [ebp+08h],eax;  work
    3677    3677  0 +  00001BAE  83 EC 34                                 sub     esp,034h
    3678    3678  0 +
    3679    3679  0 +                                             ; 1115 {
    3680    3680  0 +  00001BB1  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    3681    3681  0 +
    3682    3682  0 +                                             ; 1114 BuildDevTree(PWORK const work)
    3683    3683  0 +  00001BB8  53                                       push    ebx
    3684    3684  0 +
    3685    3685  0 +                                             ; 1115 {
    3686    3686  0 +  00001BB9  C7 45 [CC]                               mov     dword ptr [ebp-034h],offset FLAT:@128__fsm_tab; __es
                                 000000DC:R
    3687    3687  0 +
    3688    3688  0 +                                             ; 1114 BuildDevTree(PWORK const work)


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   75
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3689    3689  0 +  00001BC0  57                                       push    edi
    3690    3690  0 +
    3691    3691  0 +                                             ; 1123     for( i = 0; i < work->cOs2Dsk; ++i )
    3692    3692  0 +  00001BC1  83 78 [0C] 00                            cmp     dword ptr [eax+0ch],0h
    3693    3693  0 +
    3694    3694  0 +                                             ; 1114 BuildDevTree(PWORK const work)
    3695    3695  0 +  00001BC5  56                                       push    esi
    3696    3696  0 +
    3697    3697  0 +                                             ; 1123     for( i = 0; i < work->cOs2Dsk; ++i )
    3698    3698  0 +  00001BC6  0F 86 00001CFC:R                         jbe     @BLBL277
    3699    3699  0 +  00001BCC  8B 5D [EC]                               mov     ebx,[ebp-014h]; __88
    3700    3700  0 +  00001BCF  89 45 [08]                               mov     [ebp+08h],eax;  work
    3701    3701  0 +  00001BD2  8B F0                                    mov     esi,eax
    3702    3702  0 +  00001BD4  33 FF                                    xor     edi,edi
    3703    3703  0 +  00001BD6                                   @BLBL278:
    3704    3704  0 +
    3705    3705  0 +                                             ; 1125  VOS2Disk * const dsk = work->apOs2Dsk[i];
    3706    3706  0 +  00001BD6  8B 56 [08]                               mov     edx,[esi+08h]
    3707    3707  0 +  00001BD9  8B 14/BA                                 mov     edx,dword ptr [edx+edi*04h]
    3708    3708  0 +  00001BDC  89 55 [D8]                               mov     [ebp-028h],edx; dsk
    3709    3709  0 +
    3710    3710  0 +                                             ; 1126  ULONG           partstart, partsize = 0;
    3711    3711  0 +  00001BDF  C7 45 [E8] 00000000                      mov     dword ptr [ebp-018h],0h;        partsize
    3712    3712  0 +
    3713    3713  0 +                                             ; 1128  if( dsk == NULL )
    3714    3714  0 +  00001BE6  85 D2                                    test    edx,edx
    3715    3715  0 +  00001BE8  0F 84 00001CEF:R                         je      @BLBL280
    3716    3716  0 +
    3717    3717  0 +                                             ; 1131  rc = FindVRaidPartition(dsk, 0, 0, &partstart, &partsize);
    3718    3718  0 +  00001BEE  8D 45 [E8]                               lea     eax,[ebp-018h]; partsize
    3719    3719  0 +  00001BF1  50                                       push    eax
    3720    3720  0 +  00001BF2  8D 45 [DC]                               lea     eax,[ebp-024h]; partstart
    3721    3721  0 +  00001BF5  50                                       push    eax
    3722    3722  0 +
    3723    3723  0 +                                             ; 1128  if( dsk == NULL )
    3724    3724  0 +  00001BF6  8B F2                                    mov     esi,edx
    3725    3725  0 +
    3726    3726  0 +                                             ; 1131  rc = FindVRaidPartition(dsk, 0, 0, &partstart, &partsize);
    3727    3727  0 +  00001BF8  83 EC 0C                                 sub     esp,0ch
    3728    3728  0 +  00001BFB  33 C9                                    xor     ecx,ecx
    3729    3729  0 +  00001BFD  33 D2                                    xor     edx,edx
    3730    3730  0 +  00001BFF  8B C6                                    mov     eax,esi
    3731    3731  0 +  00001C01  E8 00001EAF:R                            call    FindVRaidPartition__FCP8VOS2DiskCUlUlCPUlT4
    3732    3732  0 +  00001C06  89 75 [C0]                               mov     [ebp-040h],esi; @CBE130
    3733    3733  0 +  00001C09  83 C4 14                                 add     esp,014h
    3734    3734  0 +
    3735    3735  0 +                                             ; 1133  if( partsize == 0 )
    3736    3736  0 +  00001C0C  83 7D [E8] 00                            cmp     dword ptr [ebp-018h],0h;        partsize
    3737    3737  0 +
    3738    3738  0 +                                             ; 1131  rc = FindVRaidPartition(dsk, 0, 0, &partstart, &partsize);
    3739    3739  0 +  00001C10  8B 75 [08]                               mov     esi,[ebp+08h];  work
    3740    3740  0 +
    3741    3741  0 +                                             ; 1133  if( partsize == 0 )
    3742    3742  0 +  00001C13  0F 85 00001C89:R                         jne     @BLBL281


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   76
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3743    3743  0 +
    3744    3744  0 +                                             ; 1135      Verbose(3, "DrvScan", "no VRAID partition on drive %u", i);
    3745    3745  0 +  00001C19  57                                       push    edi
    3746    3746  0 +  00001C1A  B9 0000034C:R                            mov     ecx,offset FLAT:@CBE25
    3747    3747  0 +  00001C1F  83 EC 0C                                 sub     esp,0ch
    3748    3748  0 +  00001C22  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3749    3749  0 +  00001C27  B8 00000003                              mov     eax,03h
    3750    3750  0 +  00001C2C  E8 00000000:E                            call    Verbose
    3751    3751  0 +  00001C31  83 C4 0C                                 add     esp,0ch
    3752    3752  0 +
    3753    3753  0 +                                             ; 1137      VOS2Drive * drv = new VOS2Drive(dsk);
    3754    3754  0 +  00001C34  B8 00000020                              mov     eax,020h
    3755    3755  0 +  00001C39  E8 00000000:E                            call    __nw__FUi
    3756    3756  0 +  00001C3E  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3757    3757  0 +  00001C41  83 C4 04                                 add     esp,04h
    3758    3758  0 +  00001C44  89 45 [F0]                               mov     [ebp-010h],eax; __87
    3759    3759  0 +  00001C47  85 C0                                    test    eax,eax
    3760    3760  0 +  00001C49  0F 84 00001C68:R                         je      @BLBL283
    3761    3761  0 +  00001C4F  83 EC 08                                 sub     esp,08h
    3762    3762  0 +  00001C52  C7 45 [C4] 00000001                      mov     dword ptr [ebp-03ch],01h;       __es
    3763    3763  0 +  00001C59  E8 00000000:E                            call    __ct__9VOS2DriveFP8VOS2Disk
    3764    3764  0 +  00001C5E  83 C4 08                                 add     esp,08h
    3765    3765  0 +  00001C61  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    3766    3766  0 +  00001C68                                   @BLBL283:
    3767    3767  0 +
    3768    3768  0 +                                             ; 1138      work->apEndPts[work->cEndPts++] = drv;
    3769    3769  0 +  00001C68  8B 4E [1C]                               mov     ecx,[esi+01ch]
    3770    3770  0 +  00001C6B  8D 41 [01]                               lea     eax,[ecx+01h]
    3771    3771  0 +  00001C6E  89 46 [1C]                               mov     [esi+01ch],eax
    3772    3772  0 +  00001C71  8B 46 [18]                               mov     eax,[esi+018h]
    3773    3773  0 +  00001C74  8B 55 [F0]                               mov     edx,[ebp-010h]; __87
    3774    3774  0 +  00001C77  89 14/88                                 mov     dword ptr [eax+ecx*04h],edx
    3775    3775  0 +
    3776    3776  0 +                                             ; 1139      work->apOs2Dsk[i] = NULL;
    3777    3777  0 +  00001C7A  8B 46 [08]                               mov     eax,[esi+08h]
    3778    3778  0 +  00001C7D  C7 04/B8 00000000                        mov     dword ptr [eax+edi*04h],0h
    3779    3779  0 +
    3780    3780  0 +                                             ; 1140  }
    3781    3781  0 +  00001C84  EB 69 90 90 90                           jmp     @BLBL280
    3782    3782  0 +  00001C89                                   @BLBL281:
    3783    3783  0 +
    3784    3784  0 +                                             ; 1143      Verbose(2, "DrvScan", "found VRAID partition on drive %u, size %lu", i, partsi
                                                                  ze);
    3785    3785  0 +  00001C89  FF 75 [E8]                               push    dword ptr [ebp-018h];   partsize
    3786    3786  0 +  00001C8C  B9 0000036C:R                            mov     ecx,offset FLAT:@CBE26
    3787    3787  0 +  00001C91  57                                       push    edi
    3788    3788  0 +  00001C92  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3789    3789  0 +  00001C97  83 EC 0C                                 sub     esp,0ch
    3790    3790  0 +  00001C9A  B8 00000002                              mov     eax,02h
    3791    3791  0 +  00001C9F  E8 00000000:E                            call    Verbose
    3792    3792  0 +  00001CA4  83 C4 10                                 add     esp,010h
    3793    3793  0 +
    3794    3794  0 +                                             ; 1144      VORDev * dev = new VORDev(dsk, partstart, partsize);
    3795    3795  0 +  00001CA7  B8 00000030                              mov     eax,030h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   77
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3796    3796  0 +  00001CAC  E8 00000000:E                            call    __nw__FUi
    3797    3797  0 +  00001CB1  83 C4 04                                 add     esp,04h
    3798    3798  0 +  00001CB4  8B D8                                    mov     ebx,eax
    3799    3799  0 +  00001CB6  85 DB                                    test    ebx,ebx
    3800    3800  0 +  00001CB8  0F 84 00001CE0:R                         je      @BLBL286
    3801    3801  0 +  00001CBE  FF 75 [E8]                               push    dword ptr [ebp-018h];   partsize
    3802    3802  0 +  00001CC1  C7 45 [C4] 00000002                      mov     dword ptr [ebp-03ch],02h;       __es
    3803    3803  0 +  00001CC8  83 EC 0C                                 sub     esp,0ch
    3804    3804  0 +  00001CCB  8B 4D [DC]                               mov     ecx,[ebp-024h]; partstart
    3805    3805  0 +  00001CCE  8B 55 [D8]                               mov     edx,[ebp-028h]; dsk
    3806    3806  0 +  00001CD1  E8 00000000:E                            call    __ct__6VORDevFP8VOS2DiskUlT2
    3807    3807  0 +  00001CD6  83 C4 10                                 add     esp,010h
    3808    3808  0 +  00001CD9  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    3809    3809  0 +  00001CE0                                   @BLBL286:
    3810    3810  0 +
    3811    3811  0 +                                             ; 1145      work->apDskInfo[work->cDskInfo++] = dev;
    3812    3812  0 +  00001CE0  8B 4E [14]                               mov     ecx,[esi+014h]
    3813    3813  0 +  00001CE3  8B 46 [10]                               mov     eax,[esi+010h]
    3814    3814  0 +  00001CE6  8D 51 [01]                               lea     edx,[ecx+01h]
    3815    3815  0 +  00001CE9  89 56 [14]                               mov     [esi+014h],edx
    3816    3816  0 +  00001CEC  89 1C/88                                 mov     dword ptr [eax+ecx*04h],ebx
    3817    3817  0 +
    3818    3818  0 +                                             ; 1147     } /* end[for every cOs2Dsk] */
    3819    3819  0 +  00001CEF                                   @BLBL280:
    3820    3820  0 +
    3821    3821  0 +                                             ; 1123     for( i = 0; i < work->cOs2Dsk; ++i )
    3822    3822  0 +  00001CEF  47                                       inc     edi
    3823    3823  0 +  00001CF0  39 7E [0C]                               cmp     [esi+0ch],edi
    3824    3824  0 +  00001CF3  0F 87 00001BD6:R                         ja      @BLBL278
    3825    3825  0 +  00001CF9  89 5D [EC]                               mov     [ebp-014h],ebx; __88
    3826    3826  0 +  00001CFC                                   @BLBL277:
    3827    3827  0 +
    3828    3828  0 +                                             ; 1156     PUCHAR       buffer = new UCHAR[SECTOR_SIZE];
    3829    3829  0 +  00001CFC  83 EC 04                                 sub     esp,04h
    3830    3830  0 +  00001CFF  B8 00000200                              mov     eax,0200h
    3831    3831  0 +  00001D04  E8 00000000:E                            call    __vn__FUi
    3832    3832  0 +  00001D09  83 C4 04                                 add     esp,04h
    3833    3833  0 +  00001D0C  89 45 [E4]                               mov     [ebp-01ch],eax; buffer
    3834    3834  0 +  00001D0F                                   @BLBL289:
    3835    3835  0 +
    3836    3836  0 +                                             ; 1160  ULONG const     cnt = work->cDskInfo;
    3837    3837  0 +  00001D0F  8B 45 [08]                               mov     eax,[ebp+08h];  work
    3838    3838  0 +
    3839    3839  0 +                                             ; 1159  int             found = 0;
    3840    3840  0 +  00001D12  C7 45 [E0] 00000000                      mov     dword ptr [ebp-020h],0h;        found
    3841    3841  0 +
    3842    3842  0 +                                             ; 1160  ULONG const     cnt = work->cDskInfo;
    3843    3843  0 +  00001D19  8B 50 [14]                               mov     edx,[eax+014h]
    3844    3844  0 +
    3845    3845  0 +                                             ; 1162  for( i = 0; i < cnt; ++i )
    3846    3846  0 +  00001D1C  85 D2                                    test    edx,edx
    3847    3847  0 +  00001D1E  0F 86 00001D40:R                         jbe     @BLBL290
    3848    3848  0 +  00001D24  33 C9                                    xor     ecx,ecx
    3849    3849  0 +  00001D26                                   @BLBL291:


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   78
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3850    3850  0 +
    3851    3851  0 +                                             ; 1163      if( work->apDskInfo[i] = NULL )
    3852    3852  0 +  00001D26  8B 58 [10]                               mov     ebx,[eax+010h]
    3853    3853  0 +  00001D29  83 3C/8B 00                              cmp     dword ptr [ebx+ecx*04h],0h
    3854    3854  0 +  00001D2D  0F 84 00001D3B:R                         je      @BLBL294
    3855    3855  0 +
    3856    3856  0 +                                             ; 1165          ++found;
    3857    3857  0 +  00001D33  FF 45 [E0]                               inc     dword ptr [ebp-020h];   found
    3858    3858  0 +
    3859    3859  0 +                                             ; 1166          break;
    3860    3860  0 +  00001D36  EB 08 90 90 90                           jmp     @BLBL290
    3861    3861  0 +  00001D3B                                   @BLBL294:
    3862    3862  0 +
    3863    3863  0 +                                             ; 1162  for( i = 0; i < cnt; ++i )
    3864    3864  0 +  00001D3B  41                                       inc     ecx
    3865    3865  0 +  00001D3C  3B CA                                    cmp     ecx,edx
    3866    3866  0 +  00001D3E  72 E6                                    jb      @BLBL291
    3867    3867  0 +  00001D40                                   @BLBL290:
    3868    3868  0 +
    3869    3869  0 +                                             ; 1168  if( found == 0 )                        /* nothing left? */
    3870    3870  0 +  00001D40  83 7D [E0] 00                            cmp     dword ptr [ebp-020h],0h;        found
    3871    3871  0 +  00001D44  0F 85 00001D67:R                         jne     @BLBL296
    3872    3872  0 +
    3873    3873  0 +                                             ; 1198     delete[] buffer;
    3874    3874  0 +  00001D4A  83 EC 04                                 sub     esp,04h
    3875    3875  0 +  00001D4D  8B 45 [E4]                               mov     eax,[ebp-01ch]; buffer
    3876    3876  0 +  00001D50  E8 00000000:E                            call    __vd__FPv
    3877    3877  0 +  00001D55  83 C4 04                                 add     esp,04h
    3878    3878  0 +
    3879    3879  0 +                                             ; 1200     return;
    3880    3880  0 +  00001D58  5E                                       pop     esi
    3881    3881  0 +  00001D59  5F                                       pop     edi
    3882    3882  0 +  00001D5A  5B                                       pop     ebx
    3883    3883  0 +  00001D5B  83 C4 38                                 add     esp,038h
    3884    3884  0 +  00001D5E  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(3884:6): Warning ALP4511: Assuming segment width for operand size
    3885    3885  0 +  00001D65  C9                                       leave
    3886    3886  0 +  00001D66  C3                                       ret
    3887    3887  0 +  00001D67                                   @BLBL296:
    3888    3888  0 +
    3889    3889  0 +                                             ; 1171  for( i = 0; i < cnt; ++i )
    3890    3890  0 +  00001D67  85 D2                                    test    edx,edx
    3891    3891  0 +  00001D69  76 A4                                    jbe     @BLBL289
    3892    3892  0 +  00001D6B  8B 75 [08]                               mov     esi,[ebp+08h];  work
    3893    3893  0 +  00001D6E  33 FF                                    xor     edi,edi
    3894    3894  0 +  00001D70                                   @BLBL299:
    3895    3895  0 +
    3896    3896  0 +                                             ; 1173      VRDev * const       dev = work->apDskInfo[i];
    3897    3897  0 +  00001D70  8B 5E [10]                               mov     ebx,[esi+010h]
    3898    3898  0 +  00001D73  8B 1C/BB                                 mov     ebx,dword ptr [ebx+edi*04h]
    3899    3899  0 +
    3900    3900  0 +                                             ; 1175      if( dev == NULL )
    3901    3901  0 +  00001D76  85 DB                                    test    ebx,ebx
    3902    3902  0 +  00001D78  0F 84 00001EA1:R                         je      @BLBL301


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   79
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3903    3903  0 +
    3904    3904  0 +                                             ; 1178      rc = dev->read(1, 1, buffer);       /* config sector of next level */
    3905    3905  0 +  00001D7E  FF 75 [E4]                               push    dword ptr [ebp-01ch];   buffer
    3906    3906  0 +
    3907    3907  0 +                                             ; 1175      if( dev == NULL )
    3908    3908  0 +  00001D81  89 55 [C0]                               mov     [ebp-040h],edx; @CBE130
    3909    3909  0 +
    3910    3910  0 +                                             ; 1178      rc = dev->read(1, 1, buffer);       /* config sector of next level */
    3911    3911  0 +  00001D84  8B 33                                    mov     esi,[ebx]
    3912    3912  0 +  00001D86  83 EC 0C                                 sub     esp,0ch
    3913    3913  0 +  00001D89  8B 46 [1C]                               mov     eax,[esi+01ch]
    3914    3914  0 +  00001D8C  B9 00000001                              mov     ecx,01h
    3915    3915  0 +  00001D91  BA 00000001                              mov     edx,01h
    3916    3916  0 +  00001D96  03 C3                                    add     eax,ebx
    3917    3917  0 +  00001D98  FF 56 [18]                               call    dword ptr [esi+018h]
    3918    3918  0 +  00001D9B  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3919    3919  0 +  00001D9E  83 C4 10                                 add     esp,010h
    3920    3920  0 +  00001DA1  8B 75 [08]                               mov     esi,[ebp+08h];  work
    3921    3921  0 +
    3922    3922  0 +                                             ; 1179      if( rc = 0 )
    3923    3923  0 +  00001DA4  85 C0                                    test    eax,eax
    3924    3924  0 +  00001DA6  0F 84 00001DFE:R                         je      @BLBL302
    3925    3925  0 +
    3926    3926  0 +                                             ; 1181          Verbose(1, "DrvScan", "read error %lu, device ignored", rc);
    3927    3927  0 +  00001DAC  50                                       push    eax
    3928    3928  0 +  00001DAD  B9 00000398:R                            mov     ecx,offset FLAT:@CBE27
    3929    3929  0 +  00001DB2  83 EC 0C                                 sub     esp,0ch
    3930    3930  0 +  00001DB5  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    3931    3931  0 +  00001DBA  B8 00000001                              mov     eax,01h
    3932    3932  0 +  00001DBF  E8 00000000:E                            call    Verbose
    3933    3933  0 +  00001DC4  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3934    3934  0 +  00001DC7  83 C4 10                                 add     esp,010h
    3935    3935  0 +
    3936    3936  0 +                                             ; 1182          delete dev;
    3937    3937  0 +  00001DCA  85 DB                                    test    ebx,ebx
    3938    3938  0 +  00001DCC  0F 84 00001DEF:R                         je      @BLBL304
    3939    3939  0 +  00001DD2  8B 33                                    mov     esi,[ebx]
    3940    3940  0 +  00001DD4  83 EC 0C                                 sub     esp,0ch
    3941    3941  0 +  00001DD7  8B 46 [2C]                               mov     eax,[esi+02ch]
    3942    3942  0 +  00001DDA  33 C9                                    xor     ecx,ecx
    3943    3943  0 +  00001DDC  BA 00000003                              mov     edx,03h
    3944    3944  0 +  00001DE1  03 C3                                    add     eax,ebx
    3945    3945  0 +  00001DE3  FF 56 [28]                               call    dword ptr [esi+028h]
    3946    3946  0 +  00001DE6  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3947    3947  0 +  00001DE9  8B 75 [08]                               mov     esi,[ebp+08h];  work
    3948    3948  0 +  00001DEC  83 C4 0C                                 add     esp,0ch
    3949    3949  0 +  00001DEF                                   @BLBL304:
    3950    3950  0 +
    3951    3951  0 +                                             ; 1183          work->apDskInfo[i] = NULL;
    3952    3952  0 +  00001DEF  8B 46 [10]                               mov     eax,[esi+010h]
    3953    3953  0 +  00001DF2  C7 04/B8 00000000                        mov     dword ptr [eax+edi*04h],0h
    3954    3954  0 +
    3955    3955  0 +                                             ; 1184          continue;
    3956    3956  0 +  00001DF9  E9 00001EA1:R                            jmp     @BLBL301


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   80
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    3957    3957  0 +  00001DFE                                   @BLBL302:
    3958    3958  0 +  00001DFE  89 55 [C0]                               mov     [ebp-040h],edx; @CBE130
    3959    3959  0 +
    3960    3960  0 +                                             ; 1187      if( memcmp(buffer, "VRAIDDEVICE     ", 16) == 0 )
    3961    3961  0 +  00001E01  83 EC 0C                                 sub     esp,0ch
    3962    3962  0 +  00001E04  8B 75 [E4]                               mov     esi,[ebp-01ch]; buffer
    3963    3963  0 +  00001E07  8B C6                                    mov     eax,esi
    3964    3964  0 +  00001E09  B9 00000010                              mov     ecx,010h
    3965    3965  0 +  00001E0E  BA 000003B8:R                            mov     edx,offset FLAT:@CBE28
    3966    3966  0 +  00001E13  E8 00000000:E                            call    memcmp
    3967    3967  0 +  00001E18  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3968    3968  0 +  00001E1B  8B 4D [E4]                               mov     ecx,[ebp-01ch]; buffer
    3969    3969  0 +  00001E1E  83 C4 0C                                 add     esp,0ch
    3970    3970  0 +  00001E21  8B 75 [08]                               mov     esi,[ebp+08h];  work
    3971    3971  0 +  00001E24  85 C0                                    test    eax,eax
    3972    3972  0 +  00001E26  0F 85 00001E43:R                         jne     @BLBL305
    3973    3973  0 +
    3974    3974  0 +                                             ; 1188          AnalyseVRDev(work, dev, (PSEC_VRDEV)buffer);
    3975    3975  0 +  00001E2C  8B D3                                    mov     edx,ebx
    3976    3976  0 +  00001E2E  83 EC 0C                                 sub     esp,0ch
    3977    3977  0 +  00001E31  8B C6                                    mov     eax,esi
    3978    3978  0 +  00001E33  E8 00002717:R                            call    AnalyseVRDev__FCP5_WORKP5VRDevCP10_SEC_VRDEV
    3979    3979  0 +  00001E38  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3980    3980  0 +  00001E3B  83 C4 0C                                 add     esp,0ch
    3981    3981  0 +  00001E3E  EB 61 90 90 90                           jmp     @BLBL301
    3982    3982  0 +  00001E43                                   @BLBL305:
    3983    3983  0 +  00001E43  89 55 [C0]                               mov     [ebp-040h],edx; @CBE130
    3984    3984  0 +
    3985    3985  0 +                                             ; 1189      else if( memcmp(buffer, "VRAIDDEVICE2    ", 16) == 0 )
    3986    3986  0 +  00001E46  83 EC 0C                                 sub     esp,0ch
    3987    3987  0 +  00001E49  8B 75 [E4]                               mov     esi,[ebp-01ch]; buffer
    3988    3988  0 +  00001E4C  8B C6                                    mov     eax,esi
    3989    3989  0 +  00001E4E  B9 00000010                              mov     ecx,010h
    3990    3990  0 +  00001E53  BA 000002F4:R                            mov     edx,offset FLAT:@CBE22
    3991    3991  0 +  00001E58  E8 00000000:E                            call    memcmp
    3992    3992  0 +  00001E5D  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    3993    3993  0 +  00001E60  8B 4D [E4]                               mov     ecx,[ebp-01ch]; buffer
    3994    3994  0 +  00001E63  83 C4 0C                                 add     esp,0ch
    3995    3995  0 +  00001E66  8B 75 [08]                               mov     esi,[ebp+08h];  work
    3996    3996  0 +  00001E69  85 C0                                    test    eax,eax
    3997    3997  0 +  00001E6B  0F 85 00001E88:R                         jne     @BLBL307
    3998    3998  0 +
    3999    3999  0 +                                             ; 1190          AnalyseVRDev2(work, dev, (PSEC_VRDEV2)buffer);
    4000    4000  0 +  00001E71  8B D3                                    mov     edx,ebx
    4001    4001  0 +  00001E73  83 EC 0C                                 sub     esp,0ch
    4002    4002  0 +  00001E76  8B C6                                    mov     eax,esi
    4003    4003  0 +  00001E78  E8 00002044:R                            call    AnalyseVRDev2__FCP5_WORKP5VRDevCP11_SEC_VRDEV2
    4004    4004  0 +  00001E7D  8B 55 [C0]                               mov     edx,[ebp-040h]; @CBE130
    4005    4005  0 +  00001E80  83 C4 0C                                 add     esp,0ch
    4006    4006  0 +  00001E83  EB 1C 90 90 90                           jmp     @BLBL301
    4007    4007  0 +  00001E88                                   @BLBL307:
    4008    4008  0 +
    4009    4009  0 +                                             ; 1193          work->apEndPts[work->cEndPts++] = dev;
    4010    4010  0 +  00001E88  8B 4E [1C]                               mov     ecx,[esi+01ch]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   81
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4011    4011  0 +  00001E8B  8D 41 [01]                               lea     eax,[ecx+01h]
    4012    4012  0 +  00001E8E  89 46 [1C]                               mov     [esi+01ch],eax
    4013    4013  0 +  00001E91  8B 46 [18]                               mov     eax,[esi+018h]
    4014    4014  0 +  00001E94  89 1C/88                                 mov     dword ptr [eax+ecx*04h],ebx
    4015    4015  0 +
    4016    4016  0 +                                             ; 1194          work->apDskInfo[i] = NULL;
    4017    4017  0 +  00001E97  8B 46 [10]                               mov     eax,[esi+010h]
    4018    4018  0 +  00001E9A  C7 04/B8 00000000                        mov     dword ptr [eax+edi*04h],0h
    4019    4019  0 +
    4020    4020  0 +                                             ; 1196  }
    4021    4021  0 +  00001EA1                                   @BLBL301:
    4022    4022  0 +
    4023    4023  0 +                                             ; 1171  for( i = 0; i < cnt; ++i )
    4024    4024  0 +  00001EA1  47                                       inc     edi
    4025    4025  0 +  00001EA2  3B FA                                    cmp     edi,edx
    4026    4026  0 +  00001EA4  0F 82 00001D70:R                         jb      @BLBL299
    4027    4027  0 +
    4028    4028  0 +                                             ; 1157     for(;;)
    4029    4029  0 +  00001EAA  E9 00001D0F:R                            jmp     @BLBL289
    4030    4030  0 +  00001EAF                                   BuildDevTree__FCP5_WORK endp
    4031    4031  0 +
    4032    4032  0 +                                             ; 1060 FindVRaidPartition(VOS2Disk * const dsk, ULONG const secno, ULONG extstart,
    4033    4033  0 +
    4034    4034  0 +  00001EAF                                   FindVRaidPartition__FCP8VOS2DiskCUlUlCPUlT4     proc
    4035    4035  0 +  00001EAF  55                                       push    ebp
    4036    4036  0 +  00001EB0  8B EC                                    mov     ebp,esp
    4037    4037  0 +  00001EB2  68 00000000:E                            push    offset FLAT: _Exception_CPP
    4038    4038  0 +  00001EB7  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4038:7): Warning ALP4511: Assuming segment width for operand size
    4039    4039  0 +  00001EBE  64:89 25 [00000000]                      mov     fs:[0h],esp
    4040    4040  0 +  00001EC5  68 FFFFFDC0                              push    0fffffdc0h
    4041    4041  0 +  00001ECA  89 4D [10]                               mov     [ebp+010h],ecx; extstart
    4042    4042  0 +  00001ECD  81 EC 00000238                           sub     esp,0238h
    4043    4043  0 +
    4044    4044  0 +                                             ; 1062 {
    4045    4045  0 +  00001ED3  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],0h;       __es
                                 00000000
    4046    4046  0 +
    4047    4047  0 +                                             ; 1060 FindVRaidPartition(VOS2Disk * const dsk, ULONG const secno, ULONG extstart,
    4048    4048  0 +  00001EDD  53                                       push    ebx
    4049    4049  0 +
    4050    4050  0 +                                             ; 1062 {
    4051    4051  0 +  00001EDE  C7 85 [FFFFFDC8]                         mov     dword ptr [ebp-0238h],offset FLAT:@109__fsm_tab;        __es
                                 000000C0:R
    4052    4052  0 +
    4053    4053  0 +                                             ; 1060 FindVRaidPartition(VOS2Disk * const dsk, ULONG const secno, ULONG extstart,
    4054    4054  0 +  00001EE8  57                                       push    edi
    4055    4055  0 +  00001EE9  89 55 [0C]                               mov     [ebp+0ch],edx;  secno
    4056    4056  0 +  00001EEC  56                                       push    esi
    4057    4057  0 +
    4058    4058  0 +                                             ; 1064     PartTable    pt(dsk, secno, true);
    4059    4059  0 +  00001EED  8B CA                                    mov     ecx,edx
    4060    4060  0 +  00001EEF  6A 01                                    push    01h
    4061    4061  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   82
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4062    4062  0 +                                             ; 1060 FindVRaidPartition(VOS2Disk * const dsk, ULONG const secno, ULONG extstart,
    4063    4063  0 +  00001EF1  89 45 [08]                               mov     [ebp+08h],eax;  dsk
    4064    4064  0 +
    4065    4065  0 +                                             ; 1064     PartTable    pt(dsk, secno, true);
    4066    4066  0 +  00001EF4  83 EC 0C                                 sub     esp,0ch
    4067    4067  0 +  00001EF7  8B D0                                    mov     edx,eax
    4068    4068  0 +  00001EF9  8D 9D [FFFFFDD8]                         lea     ebx,[ebp-0228h];        pt
    4069    4069  0 +  00001EFF  8B C3                                    mov     eax,ebx
    4070    4070  0 +  00001F01  E8 00000000:E                            call    __ct__9PartTableFP8VOS2DiskUl7Boolean
    4071    4071  0 +
    4072    4072  0 +                                             ; 1063     APIRET       rc = 0;
    4073    4073  0 +  00001F06  C7 85 [FFFFFDD4]                         mov     dword ptr [ebp-022ch],0h;       rc
                                 00000000
    4074    4074  0 +
    4075    4075  0 +                                             ; 1064     PartTable    pt(dsk, secno, true);
    4076    4076  0 +  00001F10  83 C4 10                                 add     esp,010h
    4077    4077  0 +
    4078    4078  0 +                                             ; 1067     if( pt.isValid() )
    4079    4079  0 +  00001F13  83 7D [E8] 00                            cmp     dword ptr [ebp-018h],0h;        pt
    4080    4080  0 +
    4081    4081  0 +                                             ; 1064     PartTable    pt(dsk, secno, true);
    4082    4082  0 +  00001F17  8B C3                                    mov     eax,ebx
    4083    4083  0 +  00001F19  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],01h;      __es
                                 00000001
    4084    4084  0 +
    4085    4085  0 +                                             ; 1067     if( pt.isValid() )
    4086    4086  0 +  00001F23  0F 85 00001F59:R                         jne     @BLBL267
    4087    4087  0 +
    4088    4088  0 +                                             ; 1068  return rc;
    4089    4089  0 +  00001F29  33 DB                                    xor     ebx,ebx
    4090    4090  0 +  00001F2B  83 EC 08                                 sub     esp,08h
    4091    4091  0 +  00001F2E  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],0h;       __es
                                 00000000
    4092    4092  0 +  00001F38  BA 00000002                              mov     edx,02h
    4093    4093  0 +  00001F3D  E8 00000000:E                            call    __dt__9PartTableFv
    4094    4094  0 +  00001F42  83 C4 08                                 add     esp,08h
    4095    4095  0 +  00001F45  8B C3                                    mov     eax,ebx
    4096    4096  0 +  00001F47  5E                                       pop     esi
    4097    4097  0 +  00001F48  5F                                       pop     edi
    4098    4098  0 +  00001F49  5B                                       pop     ebx
    4099    4099  0 +  00001F4A  81 C4 0000023C                           add     esp,023ch
    4100    4100  0 +  00001F50  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4100:6): Warning ALP4511: Assuming segment width for operand size
    4101    4101  0 +  00001F57  C9                                       leave
    4102    4102  0 +  00001F58  C3                                       ret
    4103    4103  0 +  00001F59                                   @BLBL267:
    4104    4104  0 +
    4105    4105  0 +                                             ; 1070     if( secno = 0  &&  extstart == 0 )
    4106    4106  0 +  00001F59  8B 45 [0C]                               mov     eax,[ebp+0ch];  secno
    4107    4107  0 +  00001F5C  85 C0                                    test    eax,eax
    4108    4108  0 +  00001F5E  0F 84 00001F71:R                         je      @BLBL268
    4109    4109  0 +  00001F64  83 7D [10] 00                            cmp     dword ptr [ebp+010h],0h;        extstart
    4110    4110  0 +  00001F68  0F 85 00001F71:R                         jne     @BLBL268
    4111    4111  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   83
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4112    4112  0 +                                             ; 1071  extstart = secno;                       /* first table is located here */
    4113    4113  0 +  00001F6E  89 45 [10]                               mov     [ebp+010h],eax; extstart
    4114    4114  0 +  00001F71                                   @BLBL268:
    4115    4115  0 +
    4116    4116  0 +                                             ; 1073     for( int j = 0; j < 4  &&  *psize == 0; ++j )
    4117    4117  0 +  00001F71  8B 75 [18]                               mov     esi,[ebp+018h]; psize
    4118    4118  0 +  00001F74  83 3E 00                                 cmp     dword ptr [esi],0h
    4119    4119  0 +  00001F77  0F 85 0000200C:R                         jne     @BLBL269
    4120    4120  0 +  00001F7D  8B 55 [08]                               mov     edx,[ebp+08h];  dsk
    4121    4121  0 +  00001F80  8B 4D [14]                               mov     ecx,[ebp+014h]; pstart
    4122    4122  0 +  00001F83  33 DB                                    xor     ebx,ebx
    4123    4123  0 +  00001F85  33 FF                                    xor     edi,edi
    4124    4124  0 +  00001F87                                   @BLBL270:
    4125    4125  0 +
    4126    4126  0 +                                             ; 1075  switch( pt.entry[j].SysIndicator )
    4127    4127  0 +  00001F87  8B 45 [F0]                               mov     eax,[ebp-010h]; pt
    4128    4128  0 +  00001F8A  0F B6 44/38 [04]                         movzx   eax,byte ptr [eax+edi+04h]
    4129    4129  0 +  00001F8F  83 F8 05                                 cmp     eax,05h
    4130    4130  0 +  00001F92  0F 84 00001FBE:R                         je      @BLBL513
    4131    4131  0 +  00001F98  83 F8 7C                                 cmp     eax,07ch
    4132    4132  0 +  00001F9B  0F 85 00001FF6:R                         jne     @BLBL511
    4133    4133  0 +  00001FA1                                   @BLBL512:
    4134    4134  0 +
    4135    4135  0 +                                             ; 1078      *pstart = secno + pt.entry[j].RelativeSectors;
    4136    4136  0 +  00001FA1  8B 55 [F0]                               mov     edx,[ebp-010h]; pt
    4137    4137  0 +  00001FA4  8B 45 [0C]                               mov     eax,[ebp+0ch];  secno
    4138    4138  0 +  00001FA7  03 44/3A [08]                            add     eax,dword ptr [edx+edi+08h]
    4139    4139  0 +  00001FAB  8B 55 [08]                               mov     edx,[ebp+08h];  dsk
    4140    4140  0 +  00001FAE  89 01                                    mov     [ecx],eax
    4141    4141  0 +
    4142    4142  0 +                                             ; 1079      *psize = pt.entry[j].NumSectors;
    4143    4143  0 +  00001FB0  8B 45 [F0]                               mov     eax,[ebp-010h]; pt
    4144    4144  0 +  00001FB3  8B 44/38 [0C]                            mov     eax,dword ptr [eax+edi+0ch]
    4145    4145  0 +  00001FB7  89 06                                    mov     [esi],eax
    4146    4146  0 +
    4147    4147  0 +                                             ; 1080      break;
    4148    4148  0 +  00001FB9  EB 3B 90 90 90                           jmp     @BLBL511
    4149    4149  0 +  00001FBE                                   @BLBL513:
    4150    4150  0 +
    4151    4151  0 +                                             ; 1083      rc = FindVRaidPartition(dsk, extstart + pt.entry[j].RelativeSectors,
    4152    4152  0 +  00001FBE  56                                       push    esi
    4153    4153  0 +
    4154    4154  0 +                                             ; 1080      break;
    4155    4155  0 +  00001FBF  89 9D [FFFFFDBC]                         mov     [ebp-0244h],ebx;        @CBE132
    4156    4156  0 +
    4157    4157  0 +                                             ; 1083      rc = FindVRaidPartition(dsk, extstart + pt.entry[j].RelativeSectors,
    4158    4158  0 +  00001FC5  51                                       push    ecx
    4159    4159  0 +  00001FC6  8B F2                                    mov     esi,edx
    4160    4160  0 +  00001FC8  83 EC 0C                                 sub     esp,0ch
    4161    4161  0 +  00001FCB  8B 5D [F0]                               mov     ebx,[ebp-010h]; pt
    4162    4162  0 +  00001FCE  8B 55 [10]                               mov     edx,[ebp+010h]; extstart
    4163    4163  0 +  00001FD1  8B CA                                    mov     ecx,edx
    4164    4164  0 +  00001FD3  03 54/3B [08]                            add     edx,dword ptr [ebx+edi+08h]
    4165    4165  0 +  00001FD7  8B C6                                    mov     eax,esi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   84
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4166    4166  0 +  00001FD9  E8 00001EAF:R                            call    FindVRaidPartition__FCP8VOS2DiskCUlUlCPUlT4
    4167    4167  0 +  00001FDE  8B 9D [FFFFFDBC]                         mov     ebx,[ebp-0244h];        @CBE132
    4168    4168  0 +  00001FE4  83 C4 14                                 add     esp,014h
    4169    4169  0 +  00001FE7  8B 75 [18]                               mov     esi,[ebp+018h]; psize
    4170    4170  0 +  00001FEA  8B 55 [08]                               mov     edx,[ebp+08h];  dsk
    4171    4171  0 +  00001FED  8B 4D [14]                               mov     ecx,[ebp+014h]; pstart
    4172    4172  0 +  00001FF0  89 85 [FFFFFDD4]                         mov     [ebp-022ch],eax;        rc
    4173    4173  0 +
    4174    4174  0 +                                             ; 1089      break;                              /* ignore empty or other types */
    4175    4175  0 +  00001FF6                                   @BLBL511:
    4176    4176  0 +
    4177    4177  0 +                                             ; 1073     for( int j = 0; j < 4  &&  *psize == 0; ++j )
    4178    4178  0 +  00001FF6  43                                       inc     ebx
    4179    4179  0 +  00001FF7  83 C7 10                                 add     edi,010h
    4180    4180  0 +  00001FFA  83 FB 04                                 cmp     ebx,04h
    4181    4181  0 +  00001FFD  0F 8D 0000200C:R                         jge     @BLBL269
    4182    4182  0 +  00002003  83 3E 00                                 cmp     dword ptr [esi],0h
    4183    4183  0 +  00002006  0F 84 00001F87:R                         je      @BLBL270
    4184    4184  0 +  0000200C                                   @BLBL269:
    4185    4185  0 +
    4186    4186  0 +                                             ; 1092     return rc;
    4187    4187  0 +  0000200C  8D 85 [FFFFFDD8]                         lea     eax,[ebp-0228h];        pt
    4188    4188  0 +  00002012  83 EC 08                                 sub     esp,08h
    4189    4189  0 +  00002015  C7 85 [FFFFFDC0]                         mov     dword ptr [ebp-0240h],0h;       __es
                                 00000000
    4190    4190  0 +  0000201F  BA 00000002                              mov     edx,02h
    4191    4191  0 +  00002024  E8 00000000:E                            call    __dt__9PartTableFv
    4192    4192  0 +  00002029  83 C4 08                                 add     esp,08h
    4193    4193  0 +  0000202C  8B 85 [FFFFFDD4]                         mov     eax,[ebp-022ch];        rc
    4194    4194  0 +  00002032  5E                                       pop     esi
    4195    4195  0 +  00002033  5F                                       pop     edi
    4196    4196  0 +  00002034  5B                                       pop     ebx
    4197    4197  0 +  00002035  81 C4 0000023C                           add     esp,023ch
    4198    4198  0 +  0000203B  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4198:6): Warning ALP4511: Assuming segment width for operand size
    4199    4199  0 +  00002042  C9                                       leave
    4200    4200  0 +  00002043  C3                                       ret
    4201    4201  0 +  00002044                                   FindVRaidPartition__FCP8VOS2DiskCUlUlCPUlT4     endp
    4202    4202  0 +
    4203    4203  0 +                                             ; 911 AnalyseVRDev2(PWORK const work,VRDev * dsk,PSEC_VRDEV2 const sec)
    4204    4204  0 +
    4205    4205  0 +  00002044                                   AnalyseVRDev2__FCP5_WORKP5VRDevCP11_SEC_VRDEV2  proc
    4206    4206  0 +  00002044  55                                       push    ebp
    4207    4207  0 +  00002045  8B EC                                    mov     ebp,esp
    4208    4208  0 +  00002047  68 00000000:E                            push    offset FLAT: _Exception_CPP
    4209    4209  0 +  0000204C  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4209:7): Warning ALP4511: Assuming segment width for operand size
    4210    4210  0 +  00002053  64:89 25 [00000000]                      mov     fs:[0h],esp
    4211    4211  0 +  0000205A  6A B8                                    push    0ffffffb8h
    4212    4212  0 +  0000205C  83 EC 40                                 sub     esp,040h
    4213    4213  0 +
    4214    4214  0 +                                             ; 912 {
    4215    4215  0 +  0000205F  C7 45 [B8] 00000000                      mov     dword ptr [ebp-048h],0h;        __es
    4216    4216  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   85
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4217    4217  0 +                                             ; 911 AnalyseVRDev2(PWORK const work,VRDev * dsk,PSEC_VRDEV2 const sec)
    4218    4218  0 +  00002066  53                                       push    ebx
    4219    4219  0 +  00002067  8B DA                                    mov     ebx,edx
    4220    4220  0 +  00002069  57                                       push    edi
    4221    4221  0 +  0000206A  8B F8                                    mov     edi,eax
    4222    4222  0 +  0000206C  56                                       push    esi
    4223    4223  0 +  0000206D  8B F1                                    mov     esi,ecx
    4224    4224  0 +
    4225    4225  0 +                                             ; 915     crc = Crc16(sec, SECTOR_SIZE-2);
    4226    4226  0 +  0000206F  83 EC 08                                 sub     esp,08h
    4227    4227  0 +
    4228    4228  0 +                                             ; 912 {
    4229    4229  0 +  00002072  C7 45 [C0]                               mov     dword ptr [ebp-040h],offset FLAT:@ea__fsm_tab;  __es
                                 00000090:R
    4230    4230  0 +
    4231    4231  0 +                                             ; 915     crc = Crc16(sec, SECTOR_SIZE-2);
    4232    4232  0 +  00002079  66:BA 01FE                               mov     dx,01feh
    4233    4233  0 +  0000207D  8B C6                                    mov     eax,esi
    4234    4234  0 +  0000207F  E8 00000000:E                            call    Crc16__FPvUs
    4235    4235  0 +  00002084  8B CE                                    mov     ecx,esi
    4236    4236  0 +
    4237    4237  0 +                                             ; 911 AnalyseVRDev2(PWORK const work,VRDev * dsk,PSEC_VRDEV2 const sec)
    4238    4238  0 +  00002086  89 75 [10]                               mov     [ebp+010h],esi; sec
    4239    4239  0 +  00002089  89 5D [0C]                               mov     [ebp+0ch],ebx;  dsk
    4240    4240  0 +
    4241    4241  0 +                                             ; 915     crc = Crc16(sec, SECTOR_SIZE-2);
    4242    4242  0 +  0000208C  83 C4 08                                 add     esp,08h
    4243    4243  0 +
    4244    4244  0 +                                             ; 911 AnalyseVRDev2(PWORK const work,VRDev * dsk,PSEC_VRDEV2 const sec)
    4245    4245  0 +  0000208F  89 7D [08]                               mov     [ebp+08h],edi;  work
    4246    4246  0 +
    4247    4247  0 +                                             ; 916     if( crc = sec->crc )
    4248    4248  0 +  00002092  66:8B 89 [000001FE]                      mov     cx,[ecx+01feh]
    4249    4249  0 +  00002099  66:3B C1                                 cmp     ax,cx
    4250    4250  0 +  0000209C  0F 84 000020E6:R                         je      @BLBL206
    4251    4251  0 +
    4252    4252  0 +                                             ; 918   Verbose(1, "DrvScan", "CRC error in VRAIDDEVICE2 sector (%#x, %#x)",
    4253    4253  0 +  000020A2  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    4254    4254  0 +  000020A7  0F B7 C9                                 movzx   ecx,cx
    4255    4255  0 +  000020AA  51                                       push    ecx
    4256    4256  0 +  000020AB  0F B7 C0                                 movzx   eax,ax
    4257    4257  0 +  000020AE  50                                       push    eax
    4258    4258  0 +  000020AF  B9 00000308:R                            mov     ecx,offset FLAT:@CBE23
    4259    4259  0 +  000020B4  83 EC 0C                                 sub     esp,0ch
    4260    4260  0 +  000020B7  B8 00000001                              mov     eax,01h
    4261    4261  0 +  000020BC  E8 00000000:E                            call    Verbose
    4262    4262  0 +  000020C1  83 C4 14                                 add     esp,014h
    4263    4263  0 +  000020C4  8B C7                                    mov     eax,edi
    4264    4264  0 +
    4265    4265  0 +                                             ; 921   return;
    4266    4266  0 +  000020C6  5E                                       pop     esi
    4267    4267  0 +
    4268    4268  0 +                                             ; 920   work->apEndPts[work->cEndPts++] = dsk;
    4269    4269  0 +  000020C7  8B 48 [1C]                               mov     ecx,[eax+01ch]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   86
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4270    4270  0 +
    4271    4271  0 +                                             ; 921   return;
    4272    4272  0 +  000020CA  5F                                       pop     edi
    4273    4273  0 +
    4274    4274  0 +                                             ; 918   Verbose(1, "DrvScan", "CRC error in VRAIDDEVICE2 sector (%#x, %#x)",
    4275    4275  0 +  000020CB  8B D3                                    mov     edx,ebx
    4276    4276  0 +
    4277    4277  0 +                                             ; 920   work->apEndPts[work->cEndPts++] = dsk;
    4278    4278  0 +  000020CD  8D 59 [01]                               lea     ebx,[ecx+01h]
    4279    4279  0 +  000020D0  89 58 [1C]                               mov     [eax+01ch],ebx
    4280    4280  0 +  000020D3  8B 40 [18]                               mov     eax,[eax+018h]
    4281    4281  0 +
    4282    4282  0 +                                             ; 921   return;
    4283    4283  0 +  000020D6  5B                                       pop     ebx
    4284    4284  0 +
    4285    4285  0 +                                             ; 920   work->apEndPts[work->cEndPts++] = dsk;
    4286    4286  0 +  000020D7  89 14/88                                 mov     dword ptr [eax+ecx*04h],edx
    4287    4287  0 +
    4288    4288  0 +                                             ; 921   return;
    4289    4289  0 +  000020DA  83 C4 44                                 add     esp,044h
    4290    4290  0 +  000020DD  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4290:6): Warning ALP4511: Assuming segment width for operand size
    4291    4291  0 +  000020E4  C9                                       leave
    4292    4292  0 +  000020E5  C3                                       ret
    4293    4293  0 +  000020E6                                   @BLBL206:
    4294    4294  0 +
    4295    4295  0 +                                             ; 931     switch( sec->u.s.type )
    4296    4296  0 +  000020E6  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    4297    4297  0 +  000020E9  0F B6 40 [1A]                            movzx   eax,byte ptr [eax+01ah]
    4298    4298  0 +  000020ED  83 F8 04                                 cmp     eax,04h
    4299    4299  0 +  000020F0  0F 85 0000213F:R                         jne     @BLBL519
    4300    4300  0 +  000020F6                                   @BLBL518:
    4301    4301  0 +
    4302    4302  0 +                                             ; 934   newdrv = new VMirror(sec->u.s.id, sec->u.s.children);
    4303    4303  0 +  000020F6  83 EC 04                                 sub     esp,04h
    4304    4304  0 +  000020F9  B8 00000134                              mov     eax,0134h
    4305    4305  0 +  000020FE  E8 00000000:E                            call    __nw__FUi
    4306    4306  0 +  00002103  83 C4 04                                 add     esp,04h
    4307    4307  0 +  00002106  89 45 [F0]                               mov     [ebp-010h],eax; __79
    4308    4308  0 +  00002109  85 C0                                    test    eax,eax
    4309    4309  0 +  0000210B  0F 84 00002134:R                         je      @BLBL208
    4310    4310  0 +  00002111  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    4311    4311  0 +  00002114  83 EC 0C                                 sub     esp,0ch
    4312    4312  0 +  00002117  C7 45 [B8] 00000001                      mov     dword ptr [ebp-048h],01h;       __es
    4313    4313  0 +  0000211E  0F B7 4A [1C]                            movzx   ecx,word ptr [edx+01ch]
    4314    4314  0 +  00002122  83 C2 14                                 add     edx,014h
    4315    4315  0 +  00002125  E8 00000000:E                            call    __ct__7VMirrorFPUci
    4316    4316  0 +  0000212A  83 C4 0C                                 add     esp,0ch
    4317    4317  0 +  0000212D  C7 45 [B8] 00000000                      mov     dword ptr [ebp-048h],0h;        __es
    4318    4318  0 +  00002134                                   @BLBL208:
    4319    4319  0 +  00002134  8B 45 [F0]                               mov     eax,[ebp-010h]; __79
    4320    4320  0 +  00002137  89 45 [E8]                               mov     [ebp-018h],eax; newdrv
    4321    4321  0 +
    4322    4322  0 +                                             ; 935   break;


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   87
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4323    4323  0 +  0000213A  EB 49 90 90 90                           jmp     @BLBL517
    4324    4324  0 +  0000213F                                   @BLBL519:
    4325    4325  0 +
    4326    4326  0 +                                             ; 938   Verbose(1, "DrvScan", "Unknown VRAID type %u", sec->u.s.type);
    4327    4327  0 +  0000213F  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    4328    4328  0 +  00002142  B9 00000274:R                            mov     ecx,offset FLAT:@CBE18
    4329    4329  0 +  00002147  0F B6 40 [1A]                            movzx   eax,byte ptr [eax+01ah]
    4330    4330  0 +  0000214B  50                                       push    eax
    4331    4331  0 +  0000214C  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    4332    4332  0 +  00002151  83 EC 0C                                 sub     esp,0ch
    4333    4333  0 +  00002154  B8 00000001                              mov     eax,01h
    4334    4334  0 +  00002159  E8 00000000:E                            call    Verbose
    4335    4335  0 +
    4336    4336  0 +                                             ; 939   work->apEndPts[work->cEndPts++] = dsk;
    4337    4337  0 +  0000215E  8B 45 [08]                               mov     eax,[ebp+08h];  work
    4338    4338  0 +
    4339    4339  0 +                                             ; 938   Verbose(1, "DrvScan", "Unknown VRAID type %u", sec->u.s.type);
    4340    4340  0 +  00002161  83 C4 10                                 add     esp,010h
    4341    4341  0 +
    4342    4342  0 +                                             ; 939   work->apEndPts[work->cEndPts++] = dsk;
    4343    4343  0 +  00002164  8B 58 [1C]                               mov     ebx,[eax+01ch]
    4344    4344  0 +
    4345    4345  0 +                                             ; 940   return;
    4346    4346  0 +  00002167  5E                                       pop     esi
    4347    4347  0 +
    4348    4348  0 +                                             ; 939   work->apEndPts[work->cEndPts++] = dsk;
    4349    4349  0 +  00002168  8D 4B [01]                               lea     ecx,[ebx+01h]
    4350    4350  0 +  0000216B  89 48 [1C]                               mov     [eax+01ch],ecx
    4351    4351  0 +  0000216E  8B 40 [18]                               mov     eax,[eax+018h]
    4352    4352  0 +
    4353    4353  0 +                                             ; 940   return;
    4354    4354  0 +  00002171  5F                                       pop     edi
    4355    4355  0 +
    4356    4356  0 +                                             ; 939   work->apEndPts[work->cEndPts++] = dsk;
    4357    4357  0 +  00002172  8B 4D [0C]                               mov     ecx,[ebp+0ch];  dsk
    4358    4358  0 +  00002175  89 0C/98                                 mov     dword ptr [eax+ebx*04h],ecx
    4359    4359  0 +
    4360    4360  0 +                                             ; 940   return;
    4361    4361  0 +  00002178  5B                                       pop     ebx
    4362    4362  0 +  00002179  83 C4 44                                 add     esp,044h
    4363    4363  0 +  0000217C  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4363:6): Warning ALP4511: Assuming segment width for operand size
    4364    4364  0 +  00002183  C9                                       leave
    4365    4365  0 +  00002184  C3                                       ret
    4366    4366  0 +  00002185                                   @BLBL517:
    4367    4367  0 +
    4368    4368  0 +                                             ; 946     for( j = 0; j < sec->u.s.children; ++j )
    4369    4369  0 +  00002185  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    4370    4370  0 +  00002188  66:C7 45 [CE] 0000                       mov     word ptr [ebp-032h],0h; j
    4371    4371  0 +  0000218E  66:83 78 [1C] 00                         cmp     word ptr [eax+01ch],0h
    4372    4372  0 +  00002193  0F 86 00002346:R                         jbe     @BLBL209
    4373    4373  0 +  00002199                                   @BLBL210:
    4374    4374  0 +
    4375    4375  0 +                                             ; 950   for( k = 0; k < work->cDskInfo; ++k )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   88
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4376    4376  0 +  00002199  8B 5D [08]                               mov     ebx,[ebp+08h];  work
    4377    4377  0 +
    4378    4378  0 +                                             ; 948   Boolean found = False;
    4379    4379  0 +  0000219C  C6 45 [CD] 00                            mov     byte ptr [ebp-033h],0h; found
    4380    4380  0 +
    4381    4381  0 +                                             ; 950   for( k = 0; k < work->cDskInfo; ++k )
    4382    4382  0 +  000021A0  83 7B [14] 00                            cmp     dword ptr [ebx+014h],0h
    4383    4383  0 +  000021A4  0F 86 000022C0:R                         jbe     @BLBL211
    4384    4384  0 +  000021AA  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    4385    4385  0 +  000021AD  0F B7 4D [CE]                            movzx   ecx,word ptr [ebp-032h];        j
    4386    4386  0 +  000021B1  C1 E1 04                                 sal     ecx,04h
    4387    4387  0 +  000021B4  03 C1                                    add     eax,ecx
    4388    4388  0 +  000021B6  89 45 [D0]                               mov     [ebp-030h],eax; @CBE134
    4389    4389  0 +  000021B9  83 C0 1E                                 add     eax,01eh
    4390    4390  0 +  000021BC  8B 75 [E4]                               mov     esi,[ebp-01ch]; result
    4391    4391  0 +  000021BF  89 45 [D4]                               mov     [ebp-02ch],eax; @CBE133
    4392    4392  0 +  000021C2  33 FF                                    xor     edi,edi
    4393    4393  0 +  000021C4                                   @BLBL212:
    4394    4394  0 +
    4395    4395  0 +                                             ; 952       if( work->apDskInfo[k] == NULL )
    4396    4396  0 +  000021C4  8B 4B [10]                               mov     ecx,[ebx+010h]
    4397    4397  0 +  000021C7  0F B7 D7                                 movzx   edx,di
    4398    4398  0 +  000021CA  8B 04/91                                 mov     eax,dword ptr [ecx+edx*04h]
    4399    4399  0 +  000021CD  89 55 [B4]                               mov     [ebp-04ch],edx; @CBE135
    4400    4400  0 +  000021D0  85 C0                                    test    eax,eax
    4401    4401  0 +  000021D2  0F 84 000022AD:R                         je      @BLBL214
    4402    4402  0 +
    4403    4403  0 +                                             ; 955       if( memcmp(work->apDskInfo[k]->queryID(),
    4404    4404  0 +  000021D8  83 EC 0C                                 sub     esp,0ch
    4405    4405  0 +  000021DB  8B 55 [D4]                               mov     edx,[ebp-02ch]; @CBE133
    4406    4406  0 +  000021DE  83 C0 08                                 add     eax,08h
    4407    4407  0 +  000021E1  B9 00000006                              mov     ecx,06h
    4408    4408  0 +  000021E6  E8 00000000:E                            call    memcmp
    4409    4409  0 +  000021EB  8B 4D [B4]                               mov     ecx,[ebp-04ch]; @CBE135
    4410    4410  0 +  000021EE  83 C4 0C                                 add     esp,0ch
    4411    4411  0 +  000021F1  85 C0                                    test    eax,eax
    4412    4412  0 +  000021F3  0F 85 000022AD:R                         jne     @BLBL214
    4413    4413  0 +
    4414    4414  0 +                                             ; 959           result = ValidateVSec2(work->apDskInfo[k], sec);
    4415    4415  0 +  000021F9  8B 43 [10]                               mov     eax,[ebx+010h]
    4416    4416  0 +  000021FC  83 EC 08                                 sub     esp,08h
    4417    4417  0 +  000021FF  8B 04/88                                 mov     eax,dword ptr [eax+ecx*04h]
    4418    4418  0 +  00002202  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    4419    4419  0 +  00002205  E8 00002542:R                            call    ValidateVSec2__FCP5VRDevCP11_SEC_VRDEV2
    4420    4420  0 +  0000220A  83 C4 08                                 add     esp,08h
    4421    4421  0 +  0000220D  8B F0                                    mov     esi,eax
    4422    4422  0 +
    4423    4423  0 +                                             ; 960           if( result < 0 )
    4424    4424  0 +  0000220F  85 F6                                    test    esi,esi
    4425    4425  0 +  00002211  0F 8D 00002264:R                         jge     @BLBL216
    4426    4426  0 +
    4427    4427  0 +                                             ; 962               Verbose(2,"DrvScan","MIRROR creation delayed");
    4428    4428  0 +  00002217  83 EC 0C                                 sub     esp,0ch
    4429    4429  0 +  0000221A  B9 00000334:R                            mov     ecx,offset FLAT:@CBE24


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   89
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4430    4430  0 +  0000221F  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    4431    4431  0 +  00002224  B8 00000002                              mov     eax,02h
    4432    4432  0 +  00002229  E8 00000000:E                            call    Verbose
    4433    4433  0 +  0000222E  83 C4 0C                                 add     esp,0ch
    4434    4434  0 +
    4435    4435  0 +                                             ; 963               delete newdrv;              /* don't create mirror */
    4436    4436  0 +  00002231  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4437    4437  0 +  00002234  85 C0                                    test    eax,eax
    4438    4438  0 +  00002236  0F 84 0000225C:R                         je      @BLBL515
    4439    4439  0 +  0000223C  89 75 [B4]                               mov     [ebp-04ch],esi; @CBE135
    4440    4440  0 +  0000223F  8B 18                                    mov     ebx,[eax]
    4441    4441  0 +  00002241  83 EC 0C                                 sub     esp,0ch
    4442    4442  0 +  00002244  8B 73 [2C]                               mov     esi,[ebx+02ch]
    4443    4443  0 +  00002247  03 C6                                    add     eax,esi
    4444    4444  0 +  00002249  8B 75 [B4]                               mov     esi,[ebp-04ch]; @CBE135
    4445    4445  0 +  0000224C  33 C9                                    xor     ecx,ecx
    4446    4446  0 +  0000224E  BA 00000003                              mov     edx,03h
    4447    4447  0 +  00002253  FF 53 [28]                               call    dword ptr [ebx+028h]
    4448    4448  0 +  00002256  8B 5D [08]                               mov     ebx,[ebp+08h];  work
    4449    4449  0 +  00002259  83 C4 0C                                 add     esp,0ch
    4450    4450  0 +  0000225C                                   @BLBL515:
    4451    4451  0 +  0000225C  89 75 [E4]                               mov     [ebp-01ch],esi; result
    4452    4452  0 +  0000225F  E9 0000252C:R                            jmp     @BLBL236
    4453    4453  0 +  00002264                                   @BLBL216:
    4454    4454  0 +
    4455    4455  0 +                                             ; 966           else if( result = 0 )
    4456    4456  0 +  00002264  85 F6                                    test    esi,esi
    4457    4457  0 +  00002266  0F 85 000022AD:R                         jne     @BLBL214
    4458    4458  0 +  0000226C  89 75 [B4]                               mov     [ebp-04ch],esi; @CBE135
    4459    4459  0 +
    4460    4460  0 +                                             ; 970           found = True;
    4461    4461  0 +  0000226F  C6 45 [CD] 01                            mov     byte ptr [ebp-033h],01h;        found
    4462    4462  0 +
    4463    4463  0 +                                             ; 971           newdrv->addChild(work->apDskInfo[k], Tr
    4464    4464  0 +                                             ; 971 ue,
    4465    4465  0 +  00002273  8B 53 [10]                               mov     edx,[ebx+010h]
    4466    4466  0 +  00002276  0F B7 C7                                 movzx   eax,di
    4467    4467  0 +  00002279  8B 14/82                                 mov     edx,dword ptr [edx+eax*04h]
    4468    4468  0 +  0000227C  8B 45 [D0]                               mov     eax,[ebp-030h]; @CBE134
    4469    4469  0 +  0000227F  B1 01                                    mov     cl,01h
    4470    4470  0 +  00002281  F6 40 [24] 01                            test    byte ptr [eax+024h],01h
    4471    4471  0 +  00002285  0F 95 C0                                 setne   al
    4472    4472  0 +  00002288  50                                       push    eax
    4473    4473  0 +  00002289  83 EC 0C                                 sub     esp,0ch
    4474    4474  0 +  0000228C  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4475    4475  0 +  0000228F  8B 18                                    mov     ebx,[eax]
    4476    4476  0 +  00002291  8B B3 [0000008C]                         mov     esi,[ebx+08ch]
    4477    4477  0 +  00002297  03 C6                                    add     eax,esi
    4478    4478  0 +  00002299  8B 75 [B4]                               mov     esi,[ebp-04ch]; @CBE135
    4479    4479  0 +  0000229C  FF 93 [00000088]                         call    dword ptr [ebx+088h]
    4480    4480  0 +  000022A2  8B 5D [08]                               mov     ebx,[ebp+08h];  work
    4481    4481  0 +  000022A5  83 C4 10                                 add     esp,010h
    4482    4482  0 +
    4483    4483  0 +                                             ; 974           break;


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   90
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4484    4484  0 +  000022A8  EB 13 90 90 90                           jmp     @BLBL514
    4485    4485  0 +  000022AD                                   @BLBL214:
    4486    4486  0 +
    4487    4487  0 +                                             ; 950   for( k = 0; k < work->cDskInfo; ++k )
    4488    4488  0 +  000022AD  0F B7 FF                                 movzx   edi,di
    4489    4489  0 +  000022B0  47                                       inc     edi
    4490    4490  0 +  000022B1  0F B7 C7                                 movzx   eax,di
    4491    4491  0 +  000022B4  39 43 [14]                               cmp     [ebx+014h],eax
    4492    4492  0 +  000022B7  0F 87 000021C4:R                         ja      @BLBL212
    4493    4493  0 +  000022BD                                   @BLBL514:
    4494    4494  0 +  000022BD  89 75 [E4]                               mov     [ebp-01ch],esi; result
    4495    4495  0 +  000022C0                                   @BLBL211:
    4496    4496  0 +
    4497    4497  0 +                                             ; 977   if( found == False )
    4498    4498  0 +  000022C0  80 7D [CD] 00                            cmp     byte ptr [ebp-033h],0h; found
    4499    4499  0 +  000022C4  0F 85 00002330:R                         jne     @BLBL237
    4500    4500  0 +
    4501    4501  0 +                                             ; 979       VRDev * dummy = new VMissing(sec->u.s.child[j].id,
    4502    4502  0 +  000022CA  83 EC 04                                 sub     esp,04h
    4503    4503  0 +  000022CD  B8 00000018                              mov     eax,018h
    4504    4504  0 +  000022D2  E8 00000000:E                            call    __nw__FUi
    4505    4505  0 +  000022D7  83 C4 04                                 add     esp,04h
    4506    4506  0 +  000022DA  89 45 [EC]                               mov     [ebp-014h],eax; __82
    4507    4507  0 +  000022DD  85 C0                                    test    eax,eax
    4508    4508  0 +  000022DF  0F 84 00002310:R                         je      @BLBL234
    4509    4509  0 +  000022E5  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    4510    4510  0 +  000022E8  C7 45 [B8] 00000002                      mov     dword ptr [ebp-048h],02h;       __es
    4511    4511  0 +  000022EF  83 EC 0C                                 sub     esp,0ch
    4512    4512  0 +  000022F2  0F B7 5D [CE]                            movzx   ebx,word ptr [ebp-032h];        j
    4513    4513  0 +  000022F6  C1 E3 04                                 sal     ebx,04h
    4514    4514  0 +  000022F9  03 D3                                    add     edx,ebx
    4515    4515  0 +  000022FB  8B 4A [2A]                               mov     ecx,[edx+02ah]
    4516    4516  0 +  000022FE  83 C2 1E                                 add     edx,01eh
    4517    4517  0 +  00002301  E8 00000000:E                            call    __ct__8VMissingFPUcUl
    4518    4518  0 +  00002306  83 C4 0C                                 add     esp,0ch
    4519    4519  0 +  00002309  C7 45 [B8] 00000000                      mov     dword ptr [ebp-048h],0h;        __es
    4520    4520  0 +  00002310                                   @BLBL234:
    4521    4521  0 +
    4522    4522  0 +                                             ; 981       newdrv->addChild(dummy, False, False);
    4523    4523  0 +  00002310  6A 00                                    push    0h
    4524    4524  0 +  00002312  33 C9                                    xor     ecx,ecx
    4525    4525  0 +  00002314  83 EC 0C                                 sub     esp,0ch
    4526    4526  0 +  00002317  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4527    4527  0 +  0000231A  8B 55 [EC]                               mov     edx,[ebp-014h]; __82
    4528    4528  0 +  0000231D  8B 18                                    mov     ebx,[eax]
    4529    4529  0 +  0000231F  8B BB [0000008C]                         mov     edi,[ebx+08ch]
    4530    4530  0 +  00002325  03 C7                                    add     eax,edi
    4531    4531  0 +  00002327  FF 93 [00000088]                         call    dword ptr [ebx+088h]
    4532    4532  0 +  0000232D  83 C4 10                                 add     esp,010h
    4533    4533  0 +
    4534    4534  0 +                                             ; 983     }
    4535    4535  0 +  00002330                                   @BLBL237:
    4536    4536  0 +
    4537    4537  0 +                                             ; 946     for( j = 0; j < sec->u.s.children; ++j )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   91
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4538    4538  0 +  00002330  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    4539    4539  0 +  00002333  0F B7 5D [CE]                            movzx   ebx,word ptr [ebp-032h];        j
    4540    4540  0 +  00002337  43                                       inc     ebx
    4541    4541  0 +  00002338  66:89 5D [CE]                            mov     [ebp-032h],bx;  j
    4542    4542  0 +  0000233C  66:39 58 [1C]                            cmp     [eax+01ch],bx
    4543    4543  0 +  00002340  0F 87 00002199:R                         ja      @BLBL210
    4544    4544  0 +  00002346                                   @BLBL209:
    4545    4545  0 +
    4546    4546  0 +                                             ; 989     for( j = 0; j < newdrv->queryChildren(); ++j )
    4547    4547  0 +  00002346  66:C7 45 [CE] 0000                       mov     word ptr [ebp-032h],0h; j
    4548    4548  0 +  0000234C  83 EC 04                                 sub     esp,04h
    4549    4549  0 +  0000234F  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4550    4550  0 +  00002352  8B 18                                    mov     ebx,[eax]
    4551    4551  0 +  00002354  8B 8B [00000094]                         mov     ecx,[ebx+094h]
    4552    4552  0 +  0000235A  03 C1                                    add     eax,ecx
    4553    4553  0 +  0000235C  FF 93 [00000090]                         call    dword ptr [ebx+090h]
    4554    4554  0 +  00002362  83 C4 04                                 add     esp,04h
    4555    4555  0 +  00002365  85 C0                                    test    eax,eax
    4556    4556  0 +  00002367  0F 8E 000023EE:R                         jle     @BLBL240
    4557    4557  0 +  0000236D  33 DB                                    xor     ebx,ebx
    4558    4558  0 +  0000236F                                   @BLBL241:
    4559    4559  0 +
    4560    4560  0 +                                             ; 991   VRDev * child = newdrv->getChild(j);
    4561    4561  0 +  0000236F  83 EC 08                                 sub     esp,08h
    4562    4562  0 +  00002372  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4563    4563  0 +  00002375  0F B7 D3                                 movzx   edx,bx
    4564    4564  0 +  00002378  8B 08                                    mov     ecx,[eax]
    4565    4565  0 +  0000237A  8B B9 [0000009C]                         mov     edi,[ecx+09ch]
    4566    4566  0 +  00002380  03 C7                                    add     eax,edi
    4567    4567  0 +  00002382  FF 91 [00000098]                         call    dword ptr [ecx+098h]
    4568    4568  0 +  00002388  8B C8                                    mov     ecx,eax
    4569    4569  0 +
    4570    4570  0 +                                             ; 993   for( k = 0; k < work->cDskInfo; ++k )
    4571    4571  0 +  0000238A  8B 45 [08]                               mov     eax,[ebp+08h];  work
    4572    4572  0 +
    4573    4573  0 +                                             ; 991   VRDev * child = newdrv->getChild(j);
    4574    4574  0 +  0000238D  83 C4 08                                 add     esp,08h
    4575    4575  0 +
    4576    4576  0 +                                             ; 993   for( k = 0; k < work->cDskInfo; ++k )
    4577    4577  0 +  00002390  83 78 [14] 00                            cmp     dword ptr [eax+014h],0h
    4578    4578  0 +  00002394  0F 86 000023C6:R                         jbe     @BLBL248
    4579    4579  0 +  0000239A  8B F1                                    mov     esi,ecx
    4580    4580  0 +  0000239C  33 FF                                    xor     edi,edi
    4581    4581  0 +  0000239E                                   @BLBL243:
    4582    4582  0 +
    4583    4583  0 +                                             ; 995       if( work->apDskInfo[k] == child )
    4584    4584  0 +  0000239E  8B 48 [10]                               mov     ecx,[eax+010h]
    4585    4585  0 +  000023A1  0F B7 D7                                 movzx   edx,di
    4586    4586  0 +  000023A4  8D 0C/91                                 lea     ecx,dword ptr [ecx+edx*04h]
    4587    4587  0 +  000023A7  39 31                                    cmp     [ecx],esi
    4588    4588  0 +  000023A9  0F 85 000023BA:R                         jne     @BLBL246
    4589    4589  0 +
    4590    4590  0 +                                             ; 997           work->apDskInfo[k] = NULL;
    4591    4591  0 +  000023AF  C7 01 00000000                           mov     dword ptr [ecx],0h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   92
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4592    4592  0 +
    4593    4593  0 +                                             ; 998           break;
    4594    4594  0 +  000023B5  EB 0F 90 90 90                           jmp     @BLBL516
    4595    4595  0 +  000023BA                                   @BLBL246:
    4596    4596  0 +
    4597    4597  0 +                                             ; 993   for( k = 0; k < work->cDskInfo; ++k )
    4598    4598  0 +  000023BA  0F B7 FF                                 movzx   edi,di
    4599    4599  0 +  000023BD  47                                       inc     edi
    4600    4600  0 +  000023BE  0F B7 CF                                 movzx   ecx,di
    4601    4601  0 +  000023C1  39 48 [14]                               cmp     [eax+014h],ecx
    4602    4602  0 +  000023C4  77 D8                                    ja      @BLBL243
    4603    4603  0 +  000023C6                                   @BLBL516:
    4604    4604  0 +  000023C6                                   @BLBL248:
    4605    4605  0 +
    4606    4606  0 +                                             ; 989     for( j = 0; j < newdrv->queryChildren(); ++j )
    4607    4607  0 +  000023C6  83 EC 04                                 sub     esp,04h
    4608    4608  0 +  000023C9  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4609    4609  0 +  000023CC  0F B7 DB                                 movzx   ebx,bx
    4610    4610  0 +  000023CF  8B 08                                    mov     ecx,[eax]
    4611    4611  0 +  000023D1  43                                       inc     ebx
    4612    4612  0 +  000023D2  8B 91 [00000094]                         mov     edx,[ecx+094h]
    4613    4613  0 +  000023D8  03 C2                                    add     eax,edx
    4614    4614  0 +  000023DA  FF 91 [00000090]                         call    dword ptr [ecx+090h]
    4615    4615  0 +  000023E0  0F B7 FB                                 movzx   edi,bx
    4616    4616  0 +  000023E3  83 C4 04                                 add     esp,04h
    4617    4617  0 +  000023E6  3B C7                                    cmp     eax,edi
    4618    4618  0 +  000023E8  7F 85                                    jg      @BLBL241
    4619    4619  0 +  000023EA  66:89 5D [CE]                            mov     [ebp-032h],bx;  j
    4620    4620  0 +  000023EE                                   @BLBL240:
    4621    4621  0 +
    4622    4622  0 +                                             ; 1004     if( (sec->u.s.flags & RDFLAG_BUILDING) )
    4623    4623  0 +  000023EE  8B 4D [10]                               mov     ecx,[ebp+010h]; sec
    4624    4624  0 +  000023F1  F6 41 [1B] 01                            test    byte ptr [ecx+01bh],01h
    4625    4625  0 +  000023F5  0F 84 00002479:R                         je      @BLBL251
    4626    4626  0 +
    4627    4627  0 +                                             ; 1006  ULONG   bdone = (ULONG)-1;
    4628    4628  0 +  000023FB  C7 45 [E0] FFFFFFFF                      mov     dword ptr [ebp-020h],0ffffffffh;        bdone
    4629    4629  0 +
    4630    4630  0 +                                             ; 1008  for( j = 0; j < sec->u.s.children; ++j )
    4631    4631  0 +  00002402  66:C7 45 [CE] 0000                       mov     word ptr [ebp-032h],0h; j
    4632    4632  0 +  00002408  66:83 79 [1C] 00                         cmp     word ptr [ecx+01ch],0h
    4633    4633  0 +  0000240D  0F 86 0000245D:R                         jbe     @BLBL252
    4634    4634  0 +  00002413  8B 75 [DC]                               mov     esi,[ebp-024h]; __83
    4635    4635  0 +  00002416  83 CB FF                                 or      ebx,0ffffffffh
    4636    4636  0 +  00002419  33 FF                                    xor     edi,edi
    4637    4637  0 +  0000241B                                   @BLBL253:
    4638    4638  0 +
    4639    4639  0 +                                             ; 1009      if( (sec->u.s.child[j].flags & 0x01) == 0 )
    4640    4640  0 +  0000241B  0F B7 C7                                 movzx   eax,di
    4641    4641  0 +  0000241E  C1 E0 04                                 sal     eax,04h
    4642    4642  0 +  00002421  03 C1                                    add     eax,ecx
    4643    4643  0 +  00002423  F6 40 [24] 01                            test    byte ptr [eax+024h],01h
    4644    4644  0 +  00002427  0F 85 00002449:R                         jne     @BLBL257
    4645    4645  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   93
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4646    4646  0 +                                             ; 1010          bdone = min(bdone,sec->u.s.child[j].valid);
    4647    4647  0 +  0000242D  39 58 [26]                               cmp     [eax+026h],ebx
    4648    4648  0 +  00002430  0F 86 0000243D:R                         jbe     @BLBL255
    4649    4649  0 +  00002436  8B F3                                    mov     esi,ebx
    4650    4650  0 +  00002438  EB 0D 90 90 90                           jmp     @BLBL256
    4651    4651  0 +  0000243D                                   @BLBL255:
    4652    4652  0 +  0000243D  0F B7 C7                                 movzx   eax,di
    4653    4653  0 +  00002440  C1 E0 04                                 sal     eax,04h
    4654    4654  0 +  00002443  8B 74/01 [26]                            mov     esi,dword ptr [ecx+eax+026h]
    4655    4655  0 +  00002447                                   @BLBL256:
    4656    4656  0 +  00002447  8B DE                                    mov     ebx,esi
    4657    4657  0 +  00002449                                   @BLBL257:
    4658    4658  0 +
    4659    4659  0 +                                             ; 1008  for( j = 0; j < sec->u.s.children; ++j )
    4660    4660  0 +  00002449  0F B7 FF                                 movzx   edi,di
    4661    4661  0 +  0000244C  47                                       inc     edi
    4662    4662  0 +  0000244D  66:39 79 [1C]                            cmp     [ecx+01ch],di
    4663    4663  0 +  00002451  77 C8                                    ja      @BLBL253
    4664    4664  0 +  00002453  89 5D [E0]                               mov     [ebp-020h],ebx; bdone
    4665    4665  0 +  00002456  89 75 [DC]                               mov     [ebp-024h],esi; __83
    4666    4666  0 +  00002459  66:89 7D [CE]                            mov     [ebp-032h],di;  j
    4667    4667  0 +  0000245D                                   @BLBL252:
    4668    4668  0 +
    4669    4669  0 +                                             ; 1011  newdrv->setBuild(bdone);                /* build in progress... */
    4670    4670  0 +  0000245D  83 EC 08                                 sub     esp,08h
    4671    4671  0 +  00002460  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4672    4672  0 +  00002463  8B 55 [E0]                               mov     edx,[ebp-020h]; bdone
    4673    4673  0 +  00002466  8B 18                                    mov     ebx,[eax]
    4674    4674  0 +  00002468  8B 8B [000000B4]                         mov     ecx,[ebx+0b4h]
    4675    4675  0 +  0000246E  03 C1                                    add     eax,ecx
    4676    4676  0 +  00002470  FF 93 [000000B0]                         call    dword ptr [ebx+0b0h]
    4677    4677  0 +  00002476  83 C4 08                                 add     esp,08h
    4678    4678  0 +
    4679    4679  0 +                                             ; 1012     }
    4680    4680  0 +  00002479                                   @BLBL251:
    4681    4681  0 +
    4682    4682  0 +                                             ; 1015     if( (sec->u.s.flags & RDFLAG_HOSTDRIVE) )
    4683    4683  0 +  00002479  8B 4D [10]                               mov     ecx,[ebp+010h]; sec
    4684    4684  0 +  0000247C  F6 41 [1B] 80                            test    byte ptr [ecx+01bh],080h
    4685    4685  0 +  00002480  0F 84 00002517:R                         je      @BLBL260
    4686    4686  0 +
    4687    4687  0 +                                             ; 1019  struct _OS2DEVID * const info = QueryArrayInfo(newdrv->queryID());
    4688    4688  0 +  00002486  83 EC 04                                 sub     esp,04h
    4689    4689  0 +  00002489  8B 75 [E8]                               mov     esi,[ebp-018h]; newdrv
    4690    4690  0 +  0000248C  8D 46 [08]                               lea     eax,[esi+08h]
    4691    4691  0 +  0000248F  E8 000033C6:R                            call    QueryArrayInfo__FCPA6_CUc
    4692    4692  0 +  00002494  83 C4 04                                 add     esp,04h
    4693    4693  0 +  00002497  89 45 [D8]                               mov     [ebp-028h],eax; info
    4694    4694  0 +
    4695    4695  0 +                                             ; 1021  if( info = 0 )
    4696    4696  0 +  0000249A  85 C0                                    test    eax,eax
    4697    4697  0 +  0000249C  0F 84 000024E1:R                         je      @BLBL261
    4698    4698  0 +
    4699    4699  0 +                                             ; 1023      if( info->avail == 0 )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   94
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4700    4700  0 +  000024A2  80 78 [05] 00                            cmp     byte ptr [eax+05h],0h
    4701    4701  0 +  000024A6  8B C6                                    mov     eax,esi
    4702    4702  0 +  000024A8  0F 85 000024BE:R                         jne     @BLBL262
    4703    4703  0 +
    4704    4704  0 +                                             ; 1024          newdrv->forceUnwritable();
    4705    4705  0 +  000024AE  8B 08                                    mov     ecx,[eax]
    4706    4706  0 +  000024B0  83 EC 04                                 sub     esp,04h
    4707    4707  0 +  000024B3  8B 51 [34]                               mov     edx,[ecx+034h]
    4708    4708  0 +  000024B6  03 C2                                    add     eax,edx
    4709    4709  0 +  000024B8  FF 51 [30]                               call    dword ptr [ecx+030h]
    4710    4710  0 +  000024BB  83 C4 04                                 add     esp,04h
    4711    4711  0 +  000024BE                                   @BLBL262:
    4712    4712  0 +
    4713    4713  0 +                                             ; 1025      newdrv->setHostdrive(info->os2idx);
    4714    4714  0 +  000024BE  83 EC 08                                 sub     esp,08h
    4715    4715  0 +  000024C1  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4716    4716  0 +  000024C4  8B 55 [D8]                               mov     edx,[ebp-028h]; info
    4717    4717  0 +  000024C7  8B 18                                    mov     ebx,[eax]
    4718    4718  0 +  000024C9  8B 12                                    mov     edx,[edx]
    4719    4719  0 +  000024CB  8B 8B [00000084]                         mov     ecx,[ebx+084h]
    4720    4720  0 +  000024D1  03 C1                                    add     eax,ecx
    4721    4721  0 +  000024D3  FF 93 [00000080]                         call    dword ptr [ebx+080h]
    4722    4722  0 +  000024D9  83 C4 08                                 add     esp,08h
    4723    4723  0 +
    4724    4724  0 +                                             ; 1026  }
    4725    4725  0 +  000024DC  EB 1F 90 90 90                           jmp     @BLBL263
    4726    4726  0 +  000024E1                                   @BLBL261:
    4727    4727  0 +
    4728    4728  0 +                                             ; 1028      newdrv->setHostdrive();
    4729    4729  0 +  000024E1  83 EC 08                                 sub     esp,08h
    4730    4730  0 +  000024E4  8B 45 [E8]                               mov     eax,[ebp-018h]; newdrv
    4731    4731  0 +  000024E7  83 CA FF                                 or      edx,0ffffffffh
    4732    4732  0 +  000024EA  8B 18                                    mov     ebx,[eax]
    4733    4733  0 +  000024EC  8B 8B [00000084]                         mov     ecx,[ebx+084h]
    4734    4734  0 +  000024F2  03 C1                                    add     eax,ecx
    4735    4735  0 +  000024F4  FF 93 [00000080]                         call    dword ptr [ebx+080h]
    4736    4736  0 +  000024FA  83 C4 08                                 add     esp,08h
    4737    4737  0 +  000024FD                                   @BLBL263:
    4738    4738  0 +
    4739    4739  0 +                                             ; 1029  work->apEndPts[work->cEndPts++] = newdrv;
    4740    4740  0 +  000024FD  8B 4D [08]                               mov     ecx,[ebp+08h];  work
    4741    4741  0 +  00002500  8B 59 [1C]                               mov     ebx,[ecx+01ch]
    4742    4742  0 +  00002503  8B 41 [18]                               mov     eax,[ecx+018h]
    4743    4743  0 +  00002506  8D 53 [01]                               lea     edx,[ebx+01h]
    4744    4744  0 +  00002509  89 51 [1C]                               mov     [ecx+01ch],edx
    4745    4745  0 +  0000250C  8B 4D [E8]                               mov     ecx,[ebp-018h]; newdrv
    4746    4746  0 +  0000250F  89 0C/98                                 mov     dword ptr [eax+ebx*04h],ecx
    4747    4747  0 +
    4748    4748  0 +                                             ; 1030     }
    4749    4749  0 +  00002512  EB 18 90 90 90                           jmp     @BLBL236
    4750    4750  0 +  00002517                                   @BLBL260:
    4751    4751  0 +
    4752    4752  0 +                                             ; 1032  work->apDskInfo[work->cDskInfo++] = newdrv;
    4753    4753  0 +  00002517  8B 4D [08]                               mov     ecx,[ebp+08h];  work


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   95
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4754    4754  0 +  0000251A  8B 59 [14]                               mov     ebx,[ecx+014h]
    4755    4755  0 +  0000251D  8B 41 [10]                               mov     eax,[ecx+010h]
    4756    4756  0 +  00002520  8D 53 [01]                               lea     edx,[ebx+01h]
    4757    4757  0 +  00002523  89 51 [14]                               mov     [ecx+014h],edx
    4758    4758  0 +  00002526  8B 4D [E8]                               mov     ecx,[ebp-018h]; newdrv
    4759    4759  0 +  00002529  89 0C/98                                 mov     dword ptr [eax+ebx*04h],ecx
    4760    4760  0 +
    4761    4761  0 +                                             ; 1034   XABORT:
    4762    4762  0 +  0000252C                                   @BLBL236:
    4763    4763  0 +
    4764    4764  0 +                                             ; 1035     return;
    4765    4765  0 +  0000252C  5E                                       pop     esi
    4766    4766  0 +
    4767    4767  0 +                                             ; 1034   XABORT:
    4768    4768  0 +  0000252D  C7 45 [B8] 00000000                      mov     dword ptr [ebp-048h],0h;        __es
    4769    4769  0 +
    4770    4770  0 +                                             ; 1035     return;
    4771    4771  0 +  00002534  5F                                       pop     edi
    4772    4772  0 +  00002535  5B                                       pop     ebx
    4773    4773  0 +  00002536  83 C4 44                                 add     esp,044h
    4774    4774  0 +  00002539  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(4774:6): Warning ALP4511: Assuming segment width for operand size
    4775    4775  0 +  00002540  C9                                       leave
    4776    4776  0 +  00002541  C3                                       ret
    4777    4777  0 +  00002542                                   AnalyseVRDev2__FCP5_WORKP5VRDevCP11_SEC_VRDEV2  endp
    4778    4778  0 +
    4779    4779  0 +                                             ; 805 ValidateVSec2(VRDev * const child,PSEC_VRDEV2 const sec)
    4780    4780  0 +
    4781    4781  0 +  00002542                                   ValidateVSec2__FCP5VRDevCP11_SEC_VRDEV2 proc
    4782    4782  0 +  00002542  55                                       push    ebp
    4783    4783  0 +  00002543  8B EC                                    mov     ebp,esp
    4784    4784  0 +  00002545  53                                       push    ebx
    4785    4785  0 +  00002546  8B D8                                    mov     ebx,eax
    4786    4786  0 +  00002548  57                                       push    edi
    4787    4787  0 +  00002549  89 55 [0C]                               mov     [ebp+0ch],edx;  sec
    4788    4788  0 +  0000254C  56                                       push    esi
    4789    4789  0 +
    4790    4790  0 +                                             ; 810     PSEC_VRDEV2 const     childsec = new SEC_VRDEV2;
    4791    4791  0 +  0000254D  B8 00000200                              mov     eax,0200h
    4792    4792  0 +
    4793    4793  0 +                                             ; 805 ValidateVSec2(VRDev * const child,PSEC_VRDEV2 const sec)
    4794    4794  0 +  00002552  83 EC 1C                                 sub     esp,01ch
    4795    4795  0 +  00002555  89 5D [08]                               mov     [ebp+08h],ebx;  child
    4796    4796  0 +
    4797    4797  0 +                                             ; 810     PSEC_VRDEV2 const     childsec = new SEC_VRDEV2;
    4798    4798  0 +  00002558  E8 00000000:E                            call    __nw__FUi
    4799    4799  0 +  0000255D  93                                       xchg    ebx,eax
    4800    4800  0 +
    4801    4801  0 +                                             ; 813     Verbose(3,"DrvScan","ValidateVSec2( child %p)",child);
    4802    4802  0 +  0000255E  50                                       push    eax
    4803    4803  0 +
    4804    4804  0 +                                             ; 810     PSEC_VRDEV2 const     childsec = new SEC_VRDEV2;
    4805    4805  0 +  0000255F  89 5D [EC]                               mov     [ebp-014h],ebx; childsec
    4806    4806  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   96
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4807    4807  0 +                                             ; 817   ++result;
    4808    4808  0 +  00002562  C7 45 [F0] 00000001                      mov     dword ptr [ebp-010h],01h;       result
    4809    4809  0 +
    4810    4810  0 +                                             ; 813     Verbose(3,"DrvScan","ValidateVSec2( child %p)",child);
    4811    4811  0 +  00002569  83 EC 0C                                 sub     esp,0ch
    4812    4812  0 +  0000256C  BF 00000000:R                            mov     edi,offset FLAT:@CBE1
    4813    4813  0 +  00002571  B9 0000028C:R                            mov     ecx,offset FLAT:@CBE19
    4814    4814  0 +  00002576  8B D7                                    mov     edx,edi
    4815    4815  0 +  00002578  B8 00000003                              mov     eax,03h
    4816    4816  0 +  0000257D  E8 00000000:E                            call    Verbose
    4817    4817  0 +  00002582  83 C4 10                                 add     esp,010h
    4818    4818  0 +  00002585  8B D7                                    mov     edx,edi
    4819    4819  0 +
    4820    4820  0 +                                             ; 818   if( childsec == NULL )
    4821    4821  0 +  00002587  85 DB                                    test    ebx,ebx
    4822    4822  0 +  00002589  0F 85 000025A0:R                         jne     @BLBL170
    4823    4823  0 +
    4824    4824  0 +                                             ; 820       Verbose(0, "DrvScan", "memory problem, can't validate child");
    4825    4825  0 +  0000258F  33 C0                                    xor     eax,eax
    4826    4826  0 +  00002591  B9 000002A8:R                            mov     ecx,offset FLAT:@CBE20
    4827    4827  0 +  00002596  E8 00000000:E                            call    Verbose
    4828    4828  0 +
    4829    4829  0 +                                             ; 821       break;
    4830    4830  0 +  0000259B  E9 00002704:R                            jmp     @BLBL200
    4831    4831  0 +  000025A0                                   @BLBL170:
    4832    4832  0 +
    4833    4833  0 +                                             ; 825   rc = child->read(1, 1, childsec);
    4834    4834  0 +  000025A0  8B 45 [08]                               mov     eax,[ebp+08h];  child
    4835    4835  0 +  000025A3  8B 7D [EC]                               mov     edi,[ebp-014h]; childsec
    4836    4836  0 +  000025A6  57                                       push    edi
    4837    4837  0 +
    4838    4838  0 +                                             ; 824   ++result;
    4839    4839  0 +  000025A7  FF 45 [F0]                               inc     dword ptr [ebp-010h];   result
    4840    4840  0 +
    4841    4841  0 +                                             ; 825   rc = child->read(1, 1, childsec);
    4842    4842  0 +  000025AA  8B 18                                    mov     ebx,[eax]
    4843    4843  0 +  000025AC  83 EC 0C                                 sub     esp,0ch
    4844    4844  0 +  000025AF  8B 73 [1C]                               mov     esi,[ebx+01ch]
    4845    4845  0 +  000025B2  B9 00000001                              mov     ecx,01h
    4846    4846  0 +  000025B7  BA 00000001                              mov     edx,01h
    4847    4847  0 +  000025BC  03 C6                                    add     eax,esi
    4848    4848  0 +  000025BE  FF 53 [18]                               call    dword ptr [ebx+018h]
    4849    4849  0 +  000025C1  83 C4 10                                 add     esp,010h
    4850    4850  0 +
    4851    4851  0 +                                             ; 826   if( rc = 0 )
    4852    4852  0 +  000025C4  85 C0                                    test    eax,eax
    4853    4853  0 +  000025C6  0F 84 000025E9:R                         je      @BLBL172
    4854    4854  0 +
    4855    4855  0 +                                             ; 828       Verbose(0, "DrvScan", "read error, can't validate child");
    4856    4856  0 +  000025CC  33 C0                                    xor     eax,eax
    4857    4857  0 +  000025CE  B9 000002D0:R                            mov     ecx,offset FLAT:@CBE21
    4858    4858  0 +  000025D3  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    4859    4859  0 +  000025D8  E8 00000000:E                            call    Verbose
    4860    4860  0 +  000025DD  8B C7                                    mov     eax,edi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   97
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4861    4861  0 +
    4862    4862  0 +                                             ; 829       delete childsec;
    4863    4863  0 +  000025DF  E8 00000000:E                            call    __dl__FPv
    4864    4864  0 +
    4865    4865  0 +                                             ; 830       break;
    4866    4866  0 +  000025E4  E9 00002704:R                            jmp     @BLBL200
    4867    4867  0 +  000025E9                                   @BLBL172:
    4868    4868  0 +
    4869    4869  0 +                                             ; 834   if( memcmp(sec, childsec, SECTOR_SIZE) = 0 )
    4870    4870  0 +  000025E9  8B 7D [EC]                               mov     edi,[ebp-014h]; childsec
    4871    4871  0 +  000025EC  8B 75 [0C]                               mov     esi,[ebp+0ch];  sec
    4872    4872  0 +  000025EF  B9 00000200                              mov     ecx,0200h
    4873    4873  0 +  000025F4  8B D7                                    mov     edx,edi
    4874    4874  0 +  000025F6  8B C6                                    mov     eax,esi
    4875    4875  0 +  000025F8  E8 00000000:E                            call    memcmp
    4876    4876  0 +
    4877    4877  0 +                                             ; 833   ++result;
    4878    4878  0 +  000025FD  8B 5D [F0]                               mov     ebx,[ebp-010h]; result
    4879    4879  0 +  00002600  43                                       inc     ebx
    4880    4880  0 +  00002601  89 5D [F0]                               mov     [ebp-010h],ebx; result
    4881    4881  0 +
    4882    4882  0 +                                             ; 834   if( memcmp(sec, childsec, SECTOR_SIZE) = 0 )
    4883    4883  0 +  00002604  85 C0                                    test    eax,eax
    4884    4884  0 +  00002606  0F 84 000026FD:R                         je      @BLBL173
    4885    4885  0 +
    4886    4886  0 +                                             ; 836       if( memcmp(childsec->sectype, "VRAIDDEVICE2    ", 16) = 0 )
    4887    4887  0 +  0000260C  8B C7                                    mov     eax,edi
    4888    4888  0 +  0000260E  B9 00000010                              mov     ecx,010h
    4889    4889  0 +  00002613  BA 000002F4:R                            mov     edx,offset FLAT:@CBE22
    4890    4890  0 +  00002618  E8 00000000:E                            call    memcmp
    4891    4891  0 +  0000261D  85 C0                                    test    eax,eax
    4892    4892  0 +  0000261F  0F 85 00002704:R                         jne     @BLBL200
    4893    4893  0 +
    4894    4894  0 +                                             ; 840       if( Crc16(childsec, SECTOR_SIZE-2) = childsec->crc )
    4895    4895  0 +  00002625  8B C7                                    mov     eax,edi
    4896    4896  0 +  00002627  66:BA 01FE                               mov     dx,01feh
    4897    4897  0 +  0000262B  E8 00000000:E                            call    Crc16__FPvUs
    4898    4898  0 +
    4899    4899  0 +                                             ; 839       ++result;
    4900    4900  0 +  00002630  43                                       inc     ebx
    4901    4901  0 +  00002631  89 5D [F0]                               mov     [ebp-010h],ebx; result
    4902    4902  0 +
    4903    4903  0 +                                             ; 840       if( Crc16(childsec, SECTOR_SIZE-2) = childsec->crc )
    4904    4904  0 +  00002634  66:39 87 [000001FE]                      cmp     [edi+01feh],ax
    4905    4905  0 +  0000263B  0F 85 00002704:R                         jne     @BLBL200
    4906    4906  0 +
    4907    4907  0 +                                             ; 848       ++result;
    4908    4908  0 +  00002641  43                                       inc     ebx
    4909    4909  0 +  00002642  89 5D [F0]                               mov     [ebp-010h],ebx; result
    4910    4910  0 +
    4911    4911  0 +                                             ; 849       if( childsec->timestamp > sec->timestamp )
    4912    4912  0 +  00002645  8B 4E [10]                               mov     ecx,[esi+010h]
    4913    4913  0 +  00002648  39 4F [10]                               cmp     [edi+010h],ecx
    4914    4914  0 +  0000264B  0F 86 0000265D:R                         jbe     @BLBL176


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   98
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4915    4915  0 +
    4916    4916  0 +                                             ; 856           result = -1;
    4917    4917  0 +  00002651  C7 45 [F0] FFFFFFFF                      mov     dword ptr [ebp-010h],0ffffffffh;        result
    4918    4918  0 +
    4919    4919  0 +                                             ; 857           break;
    4920    4920  0 +  00002658  E9 00002704:R                            jmp     @BLBL200
    4921    4921  0 +  0000265D                                   @BLBL176:
    4922    4922  0 +
    4923    4923  0 +                                             ; 860       if( memcmp(childsec->u.s.id, sec->u.s.id, sizeof(DEVID)) = 0 )
    4924    4924  0 +  0000265D  8B 5D [0C]                               mov     ebx,[ebp+0ch];  sec
    4925    4925  0 +  00002660  8B 7D [EC]                               mov     edi,[ebp-014h]; childsec
    4926    4926  0 +  00002663  B9 00000006                              mov     ecx,06h
    4927    4927  0 +  00002668  8D 53 [14]                               lea     edx,[ebx+014h]
    4928    4928  0 +  0000266B  8D 47 [14]                               lea     eax,[edi+014h]
    4929    4929  0 +  0000266E  E8 00000000:E                            call    memcmp
    4930    4930  0 +  00002673  85 C0                                    test    eax,eax
    4931    4931  0 +  00002675  0F 85 00002704:R                         jne     @BLBL200
    4932    4932  0 +
    4933    4933  0 +                                             ; 863       ++result;
    4934    4934  0 +  0000267B  8B 55 [F0]                               mov     edx,[ebp-010h]; result
    4935    4935  0 +  0000267E  42                                       inc     edx
    4936    4936  0 +  0000267F  89 55 [F0]                               mov     [ebp-010h],edx; result
    4937    4937  0 +
    4938    4938  0 +                                             ; 864       if( childsec->u.s.type = sec->u.s.type )
    4939    4939  0 +  00002682  8A 4B [1A]                               mov     cl,[ebx+01ah]
    4940    4940  0 +  00002685  38 4F [1A]                               cmp     [edi+01ah],cl
    4941    4941  0 +  00002688  0F 85 00002704:R                         jne     @BLBL200
    4942    4942  0 +
    4943    4943  0 +                                             ; 867       ++result;
    4944    4944  0 +  0000268E  42                                       inc     edx
    4945    4945  0 +  0000268F  89 55 [F0]                               mov     [ebp-010h],edx; result
    4946    4946  0 +
    4947    4947  0 +                                             ; 868       if( childsec->u.s.children = sec->u.s.children )
    4948    4948  0 +  00002692  66:8B 4B [1C]                            mov     cx,[ebx+01ch]
    4949    4949  0 +  00002696  66:39 4F [1C]                            cmp     [edi+01ch],cx
    4950    4950  0 +  0000269A  0F 85 00002704:R                         jne     @BLBL200
    4951    4951  0 +
    4952    4952  0 +                                             ; 871       ++result;
    4953    4953  0 +  000026A0  42                                       inc     edx
    4954    4954  0 +  000026A1  89 55 [F0]                               mov     [ebp-010h],edx; result
    4955    4955  0 +
    4956    4956  0 +                                             ; 872       for( i = 0; i < sec->u.s.children; ++i )
    4957    4957  0 +  000026A4  66:85 C9                                 test    cx,cx
    4958    4958  0 +  000026A7  0F 86 000026FD:R                         jbe     @BLBL173
    4959    4959  0 +  000026AD  8B F7                                    mov     esi,edi
    4960    4960  0 +  000026AF  33 FF                                    xor     edi,edi
    4961    4961  0 +  000026B1                                   @BLBL181:
    4962    4962  0 +  000026B1  8B C3                                    mov     eax,ebx
    4963    4963  0 +
    4964    4964  0 +                                             ; 874           if( memcmp(childsec->u.s.child[i].id, sec->u.s.child[i].id, sizeof(DEVID))
                                                                   = 0 )
    4965    4965  0 +  000026B3  0F B7 D7                                 movzx   edx,di
    4966    4966  0 +  000026B6  8B CA                                    mov     ecx,edx
    4967    4967  0 +  000026B8  C1 E1 04                                 sal     ecx,04h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:   99
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    4968    4968  0 +  000026BB  8D 1C/08                                 lea     ebx,dword ptr [eax+ecx]
    4969    4969  0 +  000026BE  03 CE                                    add     ecx,esi
    4970    4970  0 +  000026C0  89 55 [E4]                               mov     [ebp-01ch],edx; @CBE137
    4971    4971  0 +  000026C3  8D 41 [1E]                               lea     eax,[ecx+01eh]
    4972    4972  0 +  000026C6  89 4D [E8]                               mov     [ebp-018h],ecx; @CBE136
    4973    4973  0 +  000026C9  8D 53 [1E]                               lea     edx,[ebx+01eh]
    4974    4974  0 +  000026CC  B9 00000006                              mov     ecx,06h
    4975    4975  0 +  000026D1  E8 00000000:E                            call    memcmp
    4976    4976  0 +  000026D6  93                                       xchg    ebx,eax
    4977    4977  0 +  000026D7  85 DB                                    test    ebx,ebx
    4978    4978  0 +  000026D9  8B 55 [E4]                               mov     edx,[ebp-01ch]; @CBE137
    4979    4979  0 +  000026DC  8B 4D [E8]                               mov     ecx,[ebp-018h]; @CBE136
    4980    4980  0 +  000026DF  8B 5D [0C]                               mov     ebx,[ebp+0ch];  sec
    4981    4981  0 +  000026E2  0F 85 00002704:R                         jne     @BLBL200
    4982    4982  0 +
    4983    4983  0 +                                             ; 876           if( childsec->u.s.child[i].size = sec->u.s.child[i].size )
    4984    4984  0 +  000026E8  8B 40 [2A]                               mov     eax,[eax+02ah]
    4985    4985  0 +  000026EB  39 41 [2A]                               cmp     [ecx+02ah],eax
    4986    4986  0 +  000026EE  0F 85 00002704:R                         jne     @BLBL200
    4987    4987  0 +  000026F4  8B FA                                    mov     edi,edx
    4988    4988  0 +
    4989    4989  0 +                                             ; 872       for( i = 0; i < sec->u.s.children; ++i )
    4990    4990  0 +  000026F6  47                                       inc     edi
    4991    4991  0 +  000026F7  66:39 7B [1C]                            cmp     [ebx+01ch],di
    4992    4992  0 +  000026FB  77 B4                                    ja      @BLBL181
    4993    4993  0 +
    4994    4994  0 +                                             ; 879   }
    4995    4995  0 +  000026FD                                   @BLBL173:
    4996    4996  0 +
    4997    4997  0 +                                             ; 884   result = 0;
    4998    4998  0 +  000026FD  C7 45 [F0] 00000000                      mov     dword ptr [ebp-010h],0h;        result
    4999    4999  0 +
    5000    5000  0 +                                             ; 886     while( 0 );
    5001    5001  0 +  00002704                                   @BLBL200:
    5002    5002  0 +
    5003    5003  0 +                                             ; 889     delete childsec;
    5004    5004  0 +  00002704  8B 45 [EC]                               mov     eax,[ebp-014h]; childsec
    5005    5005  0 +  00002707  E8 00000000:E                            call    __dl__FPv
    5006    5006  0 +
    5007    5007  0 +                                             ; 890     return result;
    5008    5008  0 +  0000270C  8B 45 [F0]                               mov     eax,[ebp-010h]; result
    5009    5009  0 +  0000270F  83 C4 1C                                 add     esp,01ch
    5010    5010  0 +  00002712  5E                                       pop     esi
    5011    5011  0 +  00002713  5F                                       pop     edi
    5012    5012  0 +  00002714  5B                                       pop     ebx
    5013    5013  0 +  00002715  5D                                       pop     ebp
    5014    5014  0 +  00002716  C3                                       ret
    5015    5015  0 +  00002717                                   ValidateVSec2__FCP5VRDevCP11_SEC_VRDEV2 endp
    5016    5016  0 +
    5017    5017  0 +                                             ; 669 AnalyseVRDev(PWORK const work,VRDev * dsk,PSEC_VRDEV const sec)
    5018    5018  0 +
    5019    5019  0 +  00002717                                   AnalyseVRDev__FCP5_WORKP5VRDevCP10_SEC_VRDEV    proc
    5020    5020  0 +  00002717  55                                       push    ebp
    5021    5021  0 +  00002718  8B EC                                    mov     ebp,esp


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  100
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5022    5022  0 +  0000271A  68 00000000:E                            push    offset FLAT: _Exception_CPP
    5023    5023  0 +  0000271F  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5023:7): Warning ALP4511: Assuming segment width for operand size
    5024    5024  0 +  00002726  64:89 25 [00000000]                      mov     fs:[0h],esp
    5025    5025  0 +  0000272D  6A C4                                    push    0ffffffc4h
    5026    5026  0 +  0000272F  83 EC 3C                                 sub     esp,03ch
    5027    5027  0 +
    5028    5028  0 +                                             ; 670 {
    5029    5029  0 +  00002732  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5030    5030  0 +
    5031    5031  0 +                                             ; 669 AnalyseVRDev(PWORK const work,VRDev * dsk,PSEC_VRDEV const sec)
    5032    5032  0 +  00002739  53                                       push    ebx
    5033    5033  0 +  0000273A  8B DA                                    mov     ebx,edx
    5034    5034  0 +  0000273C  57                                       push    edi
    5035    5035  0 +  0000273D  8B F8                                    mov     edi,eax
    5036    5036  0 +  0000273F  56                                       push    esi
    5037    5037  0 +  00002740  8B F1                                    mov     esi,ecx
    5038    5038  0 +
    5039    5039  0 +                                             ; 673     crc = Crc16(sec, SECTOR_SIZE-2);
    5040    5040  0 +  00002742  83 EC 08                                 sub     esp,08h
    5041    5041  0 +
    5042    5042  0 +                                             ; 670 {
    5043    5043  0 +  00002745  C7 45 [CC]                               mov     dword ptr [ebp-034h],offset FLAT:@b5__fsm_tab;  __es
                                 00000038:R
    5044    5044  0 +
    5045    5045  0 +                                             ; 673     crc = Crc16(sec, SECTOR_SIZE-2);
    5046    5046  0 +  0000274C  66:BA 01FE                               mov     dx,01feh
    5047    5047  0 +  00002750  8B C6                                    mov     eax,esi
    5048    5048  0 +  00002752  E8 00000000:E                            call    Crc16__FPvUs
    5049    5049  0 +  00002757  8B CE                                    mov     ecx,esi
    5050    5050  0 +
    5051    5051  0 +                                             ; 669 AnalyseVRDev(PWORK const work,VRDev * dsk,PSEC_VRDEV const sec)
    5052    5052  0 +  00002759  89 75 [10]                               mov     [ebp+010h],esi; sec
    5053    5053  0 +  0000275C  89 5D [0C]                               mov     [ebp+0ch],ebx;  dsk
    5054    5054  0 +
    5055    5055  0 +                                             ; 673     crc = Crc16(sec, SECTOR_SIZE-2);
    5056    5056  0 +  0000275F  83 C4 08                                 add     esp,08h
    5057    5057  0 +
    5058    5058  0 +                                             ; 669 AnalyseVRDev(PWORK const work,VRDev * dsk,PSEC_VRDEV const sec)
    5059    5059  0 +  00002762  89 7D [08]                               mov     [ebp+08h],edi;  work
    5060    5060  0 +
    5061    5061  0 +                                             ; 674     if( crc = sec->crc )
    5062    5062  0 +  00002765  66:8B 89 [000001FE]                      mov     cx,[ecx+01feh]
    5063    5063  0 +  0000276C  66:3B C1                                 cmp     ax,cx
    5064    5064  0 +  0000276F  0F 84 000027B9:R                         je      @BLBL129
    5065    5065  0 +
    5066    5066  0 +                                             ; 676   Verbose(1, "DrvScan", "CRC error in VRAIDDEVICE sector (%#x, %#x)",
    5067    5067  0 +  00002775  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    5068    5068  0 +  0000277A  0F B7 C9                                 movzx   ecx,cx
    5069    5069  0 +  0000277D  51                                       push    ecx
    5070    5070  0 +  0000277E  0F B7 C0                                 movzx   eax,ax
    5071    5071  0 +  00002781  50                                       push    eax
    5072    5072  0 +  00002782  B9 00000248:R                            mov     ecx,offset FLAT:@CBE17
    5073    5073  0 +  00002787  83 EC 0C                                 sub     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  101
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5074    5074  0 +  0000278A  B8 00000001                              mov     eax,01h
    5075    5075  0 +  0000278F  E8 00000000:E                            call    Verbose
    5076    5076  0 +  00002794  83 C4 14                                 add     esp,014h
    5077    5077  0 +  00002797  8B C7                                    mov     eax,edi
    5078    5078  0 +
    5079    5079  0 +                                             ; 679   return;
    5080    5080  0 +  00002799  5E                                       pop     esi
    5081    5081  0 +
    5082    5082  0 +                                             ; 678   work->apEndPts[work->cEndPts++] = dsk;
    5083    5083  0 +  0000279A  8B 48 [1C]                               mov     ecx,[eax+01ch]
    5084    5084  0 +
    5085    5085  0 +                                             ; 679   return;
    5086    5086  0 +  0000279D  5F                                       pop     edi
    5087    5087  0 +
    5088    5088  0 +                                             ; 676   Verbose(1, "DrvScan", "CRC error in VRAIDDEVICE sector (%#x, %#x)",
    5089    5089  0 +  0000279E  8B D3                                    mov     edx,ebx
    5090    5090  0 +
    5091    5091  0 +                                             ; 678   work->apEndPts[work->cEndPts++] = dsk;
    5092    5092  0 +  000027A0  8D 59 [01]                               lea     ebx,[ecx+01h]
    5093    5093  0 +  000027A3  89 58 [1C]                               mov     [eax+01ch],ebx
    5094    5094  0 +  000027A6  8B 40 [18]                               mov     eax,[eax+018h]
    5095    5095  0 +
    5096    5096  0 +                                             ; 679   return;
    5097    5097  0 +  000027A9  5B                                       pop     ebx
    5098    5098  0 +
    5099    5099  0 +                                             ; 678   work->apEndPts[work->cEndPts++] = dsk;
    5100    5100  0 +  000027AA  89 14/88                                 mov     dword ptr [eax+ecx*04h],edx
    5101    5101  0 +
    5102    5102  0 +                                             ; 679   return;
    5103    5103  0 +  000027AD  83 C4 40                                 add     esp,040h
    5104    5104  0 +  000027B0  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5104:6): Warning ALP4511: Assuming segment width for operand size
    5105    5105  0 +  000027B7  C9                                       leave
    5106    5106  0 +  000027B8  C3                                       ret
    5107    5107  0 +  000027B9                                   @BLBL129:
    5108    5108  0 +
    5109    5109  0 +                                             ; 689     switch( sec->u.s.type )
    5110    5110  0 +  000027B9  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    5111    5111  0 +  000027BC  0F B6 40 [1A]                            movzx   eax,byte ptr [eax+01ah]
    5112    5112  0 +  000027C0  83 F8 01                                 cmp     eax,01h
    5113    5113  0 +  000027C3  0F 84 00002872:R                         je      @BLBL526
    5114    5114  0 +  000027C9  83 F8 02                                 cmp     eax,02h
    5115    5115  0 +  000027CC  0F 84 000027E0:R                         je      @BLBL524
    5116    5116  0 +  000027D2  83 F8 03                                 cmp     eax,03h
    5117    5117  0 +  000027D5  0F 84 00002829:R                         je      @BLBL525
    5118    5118  0 +  000027DB  E9 000028B7:R                            jmp     @BLBL527
    5119    5119  0 +  000027E0                                   @BLBL524:
    5120    5120  0 +
    5121    5121  0 +                                             ; 692   newdrv = new VChain(sec->u.s.id, sec->u.s.children);
    5122    5122  0 +  000027E0  83 EC 04                                 sub     esp,04h
    5123    5123  0 +  000027E3  B8 00000130                              mov     eax,0130h
    5124    5124  0 +  000027E8  E8 00000000:E                            call    __nw__FUi
    5125    5125  0 +  000027ED  83 C4 04                                 add     esp,04h
    5126    5126  0 +  000027F0  89 45 [F0]                               mov     [ebp-010h],eax; __68


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  102
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5127    5127  0 +  000027F3  85 C0                                    test    eax,eax
    5128    5128  0 +  000027F5  0F 84 0000281E:R                         je      @BLBL131
    5129    5129  0 +  000027FB  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    5130    5130  0 +  000027FE  83 EC 0C                                 sub     esp,0ch
    5131    5131  0 +  00002801  C7 45 [C4] 00000001                      mov     dword ptr [ebp-03ch],01h;       __es
    5132    5132  0 +  00002808  0F B7 4A [1C]                            movzx   ecx,word ptr [edx+01ch]
    5133    5133  0 +  0000280C  83 C2 14                                 add     edx,014h
    5134    5134  0 +  0000280F  E8 00000000:E                            call    __ct__6VChainFPUci
    5135    5135  0 +  00002814  83 C4 0C                                 add     esp,0ch
    5136    5136  0 +  00002817  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5137    5137  0 +  0000281E                                   @BLBL131:
    5138    5138  0 +  0000281E  8B 45 [F0]                               mov     eax,[ebp-010h]; __68
    5139    5139  0 +  00002821  89 45 [E0]                               mov     [ebp-020h],eax; newdrv
    5140    5140  0 +
    5141    5141  0 +                                             ; 693   break;
    5142    5142  0 +  00002824  E9 000028FD:R                            jmp     @BLBL523
    5143    5143  0 +  00002829                                   @BLBL525:
    5144    5144  0 +
    5145    5145  0 +                                             ; 696   newdrv = new VStripe(sec->u.s.id, sec->u.s.children);
    5146    5146  0 +  00002829  83 EC 04                                 sub     esp,04h
    5147    5147  0 +  0000282C  B8 00000130                              mov     eax,0130h
    5148    5148  0 +  00002831  E8 00000000:E                            call    __nw__FUi
    5149    5149  0 +  00002836  83 C4 04                                 add     esp,04h
    5150    5150  0 +  00002839  89 45 [EC]                               mov     [ebp-014h],eax; __69
    5151    5151  0 +  0000283C  85 C0                                    test    eax,eax
    5152    5152  0 +  0000283E  0F 84 00002867:R                         je      @BLBL133
    5153    5153  0 +  00002844  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    5154    5154  0 +  00002847  83 EC 0C                                 sub     esp,0ch
    5155    5155  0 +  0000284A  C7 45 [C4] 00000002                      mov     dword ptr [ebp-03ch],02h;       __es
    5156    5156  0 +  00002851  0F B7 4A [1C]                            movzx   ecx,word ptr [edx+01ch]
    5157    5157  0 +  00002855  83 C2 14                                 add     edx,014h
    5158    5158  0 +  00002858  E8 00000000:E                            call    __ct__7VStripeFPUci
    5159    5159  0 +  0000285D  83 C4 0C                                 add     esp,0ch
    5160    5160  0 +  00002860  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5161    5161  0 +  00002867                                   @BLBL133:
    5162    5162  0 +  00002867  8B 45 [EC]                               mov     eax,[ebp-014h]; __69
    5163    5163  0 +  0000286A  89 45 [E0]                               mov     [ebp-020h],eax; newdrv
    5164    5164  0 +
    5165    5165  0 +                                             ; 697   break;
    5166    5166  0 +  0000286D  E9 000028FD:R                            jmp     @BLBL523
    5167    5167  0 +  00002872                                   @BLBL526:
    5168    5168  0 +
    5169    5169  0 +                                             ; 700   newdrv = new VSingle(sec->u.s.id);
    5170    5170  0 +  00002872  83 EC 04                                 sub     esp,04h
    5171    5171  0 +  00002875  B8 00000030                              mov     eax,030h
    5172    5172  0 +  0000287A  E8 00000000:E                            call    __nw__FUi
    5173    5173  0 +  0000287F  83 C4 04                                 add     esp,04h
    5174    5174  0 +  00002882  89 45 [E8]                               mov     [ebp-018h],eax; __70
    5175    5175  0 +  00002885  85 C0                                    test    eax,eax
    5176    5176  0 +  00002887  0F 84 000028AC:R                         je      @BLBL135
    5177    5177  0 +  0000288D  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    5178    5178  0 +  00002890  83 EC 08                                 sub     esp,08h
    5179    5179  0 +  00002893  C7 45 [C4] 00000003                      mov     dword ptr [ebp-03ch],03h;       __es
    5180    5180  0 +  0000289A  83 C2 14                                 add     edx,014h


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  103
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5181    5181  0 +  0000289D  E8 00000000:E                            call    __ct__7VSingleFPUc
    5182    5182  0 +  000028A2  83 C4 08                                 add     esp,08h
    5183    5183  0 +  000028A5  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5184    5184  0 +  000028AC                                   @BLBL135:
    5185    5185  0 +  000028AC  8B 45 [E8]                               mov     eax,[ebp-018h]; __70
    5186    5186  0 +  000028AF  89 45 [E0]                               mov     [ebp-020h],eax; newdrv
    5187    5187  0 +
    5188    5188  0 +                                             ; 701   break;
    5189    5189  0 +  000028B2  EB 49 90 90 90                           jmp     @BLBL523
    5190    5190  0 +  000028B7                                   @BLBL527:
    5191    5191  0 +
    5192    5192  0 +                                             ; 704   Verbose(1, "DrvScan", "Unknown VRAID type %u", sec->u.s.type);
    5193    5193  0 +  000028B7  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    5194    5194  0 +  000028BA  B9 00000274:R                            mov     ecx,offset FLAT:@CBE18
    5195    5195  0 +  000028BF  0F B6 40 [1A]                            movzx   eax,byte ptr [eax+01ah]
    5196    5196  0 +  000028C3  50                                       push    eax
    5197    5197  0 +  000028C4  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    5198    5198  0 +  000028C9  83 EC 0C                                 sub     esp,0ch
    5199    5199  0 +  000028CC  B8 00000001                              mov     eax,01h
    5200    5200  0 +  000028D1  E8 00000000:E                            call    Verbose
    5201    5201  0 +
    5202    5202  0 +                                             ; 705   work->apEndPts[work->cEndPts++] = dsk;
    5203    5203  0 +  000028D6  8B 45 [08]                               mov     eax,[ebp+08h];  work
    5204    5204  0 +
    5205    5205  0 +                                             ; 704   Verbose(1, "DrvScan", "Unknown VRAID type %u", sec->u.s.type);
    5206    5206  0 +  000028D9  83 C4 10                                 add     esp,010h
    5207    5207  0 +
    5208    5208  0 +                                             ; 705   work->apEndPts[work->cEndPts++] = dsk;
    5209    5209  0 +  000028DC  8B 58 [1C]                               mov     ebx,[eax+01ch]
    5210    5210  0 +
    5211    5211  0 +                                             ; 706   return;
    5212    5212  0 +  000028DF  5E                                       pop     esi
    5213    5213  0 +
    5214    5214  0 +                                             ; 705   work->apEndPts[work->cEndPts++] = dsk;
    5215    5215  0 +  000028E0  8D 4B [01]                               lea     ecx,[ebx+01h]
    5216    5216  0 +  000028E3  89 48 [1C]                               mov     [eax+01ch],ecx
    5217    5217  0 +  000028E6  8B 40 [18]                               mov     eax,[eax+018h]
    5218    5218  0 +
    5219    5219  0 +                                             ; 706   return;
    5220    5220  0 +  000028E9  5F                                       pop     edi
    5221    5221  0 +
    5222    5222  0 +                                             ; 705   work->apEndPts[work->cEndPts++] = dsk;
    5223    5223  0 +  000028EA  8B 4D [0C]                               mov     ecx,[ebp+0ch];  dsk
    5224    5224  0 +  000028ED  89 0C/98                                 mov     dword ptr [eax+ebx*04h],ecx
    5225    5225  0 +
    5226    5226  0 +                                             ; 706   return;
    5227    5227  0 +  000028F0  5B                                       pop     ebx
    5228    5228  0 +  000028F1  83 C4 40                                 add     esp,040h
    5229    5229  0 +  000028F4  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5229:6): Warning ALP4511: Assuming segment width for operand size
    5230    5230  0 +  000028FB  C9                                       leave
    5231    5231  0 +  000028FC  C3                                       ret
    5232    5232  0 +  000028FD                                   @BLBL523:
    5233    5233  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  104
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5234    5234  0 +                                             ; 712     for( j = 0; j < sec->u.s.children; ++j )
    5235    5235  0 +  000028FD  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    5236    5236  0 +  00002900  66:C7 45 [DA] 0000                       mov     word ptr [ebp-026h],0h; j
    5237    5237  0 +  00002906  66:83 78 [1C] 00                         cmp     word ptr [eax+01ch],0h
    5238    5238  0 +  0000290B  0F 86 00002A33:R                         jbe     @BLBL136
    5239    5239  0 +  00002911                                   @BLBL137:
    5240    5240  0 +
    5241    5241  0 +                                             ; 716   for( k = 0; k < work->cDskInfo; ++k )
    5242    5242  0 +  00002911  8B 75 [08]                               mov     esi,[ebp+08h];  work
    5243    5243  0 +
    5244    5244  0 +                                             ; 714   Boolean found = False;
    5245    5245  0 +  00002914  C6 45 [D9] 00                            mov     byte ptr [ebp-027h],0h; found
    5246    5246  0 +
    5247    5247  0 +                                             ; 716   for( k = 0; k < work->cDskInfo; ++k )
    5248    5248  0 +  00002918  83 7E [14] 00                            cmp     dword ptr [esi+014h],0h
    5249    5249  0 +  0000291C  0F 86 000029AD:R                         jbe     @BLBL138
    5250    5250  0 +  00002922  8B 5D [10]                               mov     ebx,[ebp+010h]; sec
    5251    5251  0 +  00002925  0F B7 45 [DA]                            movzx   eax,word ptr [ebp-026h];        j
    5252    5252  0 +  00002929  6B C0 0A                                 imul    eax,0ah
    5253    5253  0 +  0000292C  03 D8                                    add     ebx,eax
    5254    5254  0 +  0000292E  83 C3 1E                                 add     ebx,01eh
    5255    5255  0 +  00002931  89 5D [B8]                               mov     [ebp-048h],ebx; @CBE138
    5256    5256  0 +  00002934  33 FF                                    xor     edi,edi
    5257    5257  0 +  00002936                                   @BLBL139:
    5258    5258  0 +
    5259    5259  0 +                                             ; 718       if( work->apDskInfo[k] == NULL )
    5260    5260  0 +  00002936  8B 4E [10]                               mov     ecx,[esi+010h]
    5261    5261  0 +  00002939  0F B7 D7                                 movzx   edx,di
    5262    5262  0 +  0000293C  8B 04/91                                 mov     eax,dword ptr [ecx+edx*04h]
    5263    5263  0 +  0000293F  89 55 [BC]                               mov     [ebp-044h],edx; @CBE140
    5264    5264  0 +  00002942  85 C0                                    test    eax,eax
    5265    5265  0 +  00002944  0F 84 000029A1:R                         je      @BLBL141
    5266    5266  0 +
    5267    5267  0 +                                             ; 721       if( memcmp(work->apDskInfo[k]->queryID(),
    5268    5268  0 +  0000294A  8B D3                                    mov     edx,ebx
    5269    5269  0 +  0000294C  83 EC 0C                                 sub     esp,0ch
    5270    5270  0 +  0000294F  83 C0 08                                 add     eax,08h
    5271    5271  0 +  00002952  B9 00000006                              mov     ecx,06h
    5272    5272  0 +  00002957  E8 00000000:E                            call    memcmp
    5273    5273  0 +  0000295C  8B C8                                    mov     ecx,eax
    5274    5274  0 +  0000295E  8B 45 [BC]                               mov     eax,[ebp-044h]; @CBE140
    5275    5275  0 +  00002961  83 C4 0C                                 add     esp,0ch
    5276    5276  0 +  00002964  85 C9                                    test    ecx,ecx
    5277    5277  0 +  00002966  0F 85 000029A1:R                         jne     @BLBL141
    5278    5278  0 +  0000296C  89 7D [C0]                               mov     [ebp-040h],edi; @CBE139
    5279    5279  0 +
    5280    5280  0 +                                             ; 724           found = True;
    5281    5281  0 +  0000296F  C6 45 [D9] 01                            mov     byte ptr [ebp-027h],01h;        found
    5282    5282  0 +
    5283    5283  0 +                                             ; 725           newdrv->addChild(work->apDskInfo[k], True);
    5284    5284  0 +  00002973  8B 56 [10]                               mov     edx,[esi+010h]
    5285    5285  0 +  00002976  6A 01                                    push    01h
    5286    5286  0 +  00002978  8B 14/82                                 mov     edx,dword ptr [edx+eax*04h]
    5287    5287  0 +  0000297B  83 EC 0C                                 sub     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  105
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5288    5288  0 +  0000297E  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5289    5289  0 +  00002981  B1 01                                    mov     cl,01h
    5290    5290  0 +  00002983  8B 18                                    mov     ebx,[eax]
    5291    5291  0 +  00002985  8B BB [0000008C]                         mov     edi,[ebx+08ch]
    5292    5292  0 +  0000298B  03 C7                                    add     eax,edi
    5293    5293  0 +  0000298D  8B 7D [C0]                               mov     edi,[ebp-040h]; @CBE139
    5294    5294  0 +  00002990  FF 93 [00000088]                         call    dword ptr [ebx+088h]
    5295    5295  0 +  00002996  8B 5D [B8]                               mov     ebx,[ebp-048h]; @CBE138
    5296    5296  0 +  00002999  83 C4 10                                 add     esp,010h
    5297    5297  0 +
    5298    5298  0 +                                             ; 727           break;
    5299    5299  0 +  0000299C  EB 0F 90 90 90                           jmp     @BLBL138
    5300    5300  0 +  000029A1                                   @BLBL141:
    5301    5301  0 +
    5302    5302  0 +                                             ; 716   for( k = 0; k < work->cDskInfo; ++k )
    5303    5303  0 +  000029A1  0F B7 FF                                 movzx   edi,di
    5304    5304  0 +  000029A4  47                                       inc     edi
    5305    5305  0 +  000029A5  0F B7 C7                                 movzx   eax,di
    5306    5306  0 +  000029A8  39 46 [14]                               cmp     [esi+014h],eax
    5307    5307  0 +  000029AB  77 89                                    ja      @BLBL139
    5308    5308  0 +  000029AD                                   @BLBL138:
    5309    5309  0 +
    5310    5310  0 +                                             ; 730   if( found == False )
    5311    5311  0 +  000029AD  80 7D [D9] 00                            cmp     byte ptr [ebp-027h],0h; found
    5312    5312  0 +  000029B1  0F 85 00002A1D:R                         jne     @BLBL148
    5313    5313  0 +
    5314    5314  0 +                                             ; 732       VRDev *     dummy = new VMissing(sec->u.s.child[j].id,
    5315    5315  0 +  000029B7  83 EC 04                                 sub     esp,04h
    5316    5316  0 +  000029BA  B8 00000018                              mov     eax,018h
    5317    5317  0 +  000029BF  E8 00000000:E                            call    __nw__FUi
    5318    5318  0 +  000029C4  83 C4 04                                 add     esp,04h
    5319    5319  0 +  000029C7  89 45 [E4]                               mov     [ebp-01ch],eax; __72
    5320    5320  0 +  000029CA  85 C0                                    test    eax,eax
    5321    5321  0 +  000029CC  0F 84 000029FD:R                         je      @BLBL147
    5322    5322  0 +  000029D2  8B 55 [10]                               mov     edx,[ebp+010h]; sec
    5323    5323  0 +  000029D5  C7 45 [C4] 00000004                      mov     dword ptr [ebp-03ch],04h;       __es
    5324    5324  0 +  000029DC  83 EC 0C                                 sub     esp,0ch
    5325    5325  0 +  000029DF  0F B7 5D [DA]                            movzx   ebx,word ptr [ebp-026h];        j
    5326    5326  0 +  000029E3  6B DB 0A                                 imul    ebx,0ah
    5327    5327  0 +  000029E6  03 D3                                    add     edx,ebx
    5328    5328  0 +  000029E8  8B 4A [24]                               mov     ecx,[edx+024h]
    5329    5329  0 +  000029EB  83 C2 1E                                 add     edx,01eh
    5330    5330  0 +  000029EE  E8 00000000:E                            call    __ct__8VMissingFPUcUl
    5331    5331  0 +  000029F3  83 C4 0C                                 add     esp,0ch
    5332    5332  0 +  000029F6  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5333    5333  0 +  000029FD                                   @BLBL147:
    5334    5334  0 +
    5335    5335  0 +                                             ; 734       newdrv->addChild(dummy, False, False);
    5336    5336  0 +  000029FD  6A 00                                    push    0h
    5337    5337  0 +  000029FF  33 C9                                    xor     ecx,ecx
    5338    5338  0 +  00002A01  83 EC 0C                                 sub     esp,0ch
    5339    5339  0 +  00002A04  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5340    5340  0 +  00002A07  8B 55 [E4]                               mov     edx,[ebp-01ch]; __72
    5341    5341  0 +  00002A0A  8B 18                                    mov     ebx,[eax]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  106
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5342    5342  0 +  00002A0C  8B BB [0000008C]                         mov     edi,[ebx+08ch]
    5343    5343  0 +  00002A12  03 C7                                    add     eax,edi
    5344    5344  0 +  00002A14  FF 93 [00000088]                         call    dword ptr [ebx+088h]
    5345    5345  0 +  00002A1A  83 C4 10                                 add     esp,010h
    5346    5346  0 +
    5347    5347  0 +                                             ; 736     }
    5348    5348  0 +  00002A1D                                   @BLBL148:
    5349    5349  0 +
    5350    5350  0 +                                             ; 712     for( j = 0; j < sec->u.s.children; ++j )
    5351    5351  0 +  00002A1D  8B 45 [10]                               mov     eax,[ebp+010h]; sec
    5352    5352  0 +  00002A20  0F B7 5D [DA]                            movzx   ebx,word ptr [ebp-026h];        j
    5353    5353  0 +  00002A24  43                                       inc     ebx
    5354    5354  0 +  00002A25  66:89 5D [DA]                            mov     [ebp-026h],bx;  j
    5355    5355  0 +  00002A29  66:39 58 [1C]                            cmp     [eax+01ch],bx
    5356    5356  0 +  00002A2D  0F 87 00002911:R                         ja      @BLBL137
    5357    5357  0 +  00002A33                                   @BLBL136:
    5358    5358  0 +
    5359    5359  0 +                                             ; 742     for( j = 0; j < newdrv->queryChildren(); ++j )
    5360    5360  0 +  00002A33  66:C7 45 [DA] 0000                       mov     word ptr [ebp-026h],0h; j
    5361    5361  0 +  00002A39  83 EC 04                                 sub     esp,04h
    5362    5362  0 +  00002A3C  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5363    5363  0 +  00002A3F  8B 18                                    mov     ebx,[eax]
    5364    5364  0 +  00002A41  8B 8B [00000094]                         mov     ecx,[ebx+094h]
    5365    5365  0 +  00002A47  03 C1                                    add     eax,ecx
    5366    5366  0 +  00002A49  FF 93 [00000090]                         call    dword ptr [ebx+090h]
    5367    5367  0 +  00002A4F  83 C4 04                                 add     esp,04h
    5368    5368  0 +  00002A52  85 C0                                    test    eax,eax
    5369    5369  0 +  00002A54  0F 8E 00002ADB:R                         jle     @BLBL151
    5370    5370  0 +  00002A5A  33 DB                                    xor     ebx,ebx
    5371    5371  0 +  00002A5C                                   @BLBL152:
    5372    5372  0 +
    5373    5373  0 +                                             ; 744   VRDev * child = newdrv->getChild(j);
    5374    5374  0 +  00002A5C  83 EC 08                                 sub     esp,08h
    5375    5375  0 +  00002A5F  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5376    5376  0 +  00002A62  0F B7 D3                                 movzx   edx,bx
    5377    5377  0 +  00002A65  8B 08                                    mov     ecx,[eax]
    5378    5378  0 +  00002A67  8B B9 [0000009C]                         mov     edi,[ecx+09ch]
    5379    5379  0 +  00002A6D  03 C7                                    add     eax,edi
    5380    5380  0 +  00002A6F  FF 91 [00000098]                         call    dword ptr [ecx+098h]
    5381    5381  0 +  00002A75  8B C8                                    mov     ecx,eax
    5382    5382  0 +
    5383    5383  0 +                                             ; 746   for( k = 0; k < work->cDskInfo; ++k )
    5384    5384  0 +  00002A77  8B 45 [08]                               mov     eax,[ebp+08h];  work
    5385    5385  0 +
    5386    5386  0 +                                             ; 744   VRDev * child = newdrv->getChild(j);
    5387    5387  0 +  00002A7A  83 C4 08                                 add     esp,08h
    5388    5388  0 +
    5389    5389  0 +                                             ; 746   for( k = 0; k < work->cDskInfo; ++k )
    5390    5390  0 +  00002A7D  83 78 [14] 00                            cmp     dword ptr [eax+014h],0h
    5391    5391  0 +  00002A81  0F 86 00002AB3:R                         jbe     @BLBL159
    5392    5392  0 +  00002A87  8B F1                                    mov     esi,ecx
    5393    5393  0 +  00002A89  33 FF                                    xor     edi,edi
    5394    5394  0 +  00002A8B                                   @BLBL154:
    5395    5395  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  107
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5396    5396  0 +                                             ; 748       if( work->apDskInfo[k] == child )
    5397    5397  0 +  00002A8B  8B 48 [10]                               mov     ecx,[eax+010h]
    5398    5398  0 +  00002A8E  0F B7 D7                                 movzx   edx,di
    5399    5399  0 +  00002A91  8D 0C/91                                 lea     ecx,dword ptr [ecx+edx*04h]
    5400    5400  0 +  00002A94  39 31                                    cmp     [ecx],esi
    5401    5401  0 +  00002A96  0F 85 00002AA7:R                         jne     @BLBL157
    5402    5402  0 +
    5403    5403  0 +                                             ; 750           work->apDskInfo[k] = NULL;
    5404    5404  0 +  00002A9C  C7 01 00000000                           mov     dword ptr [ecx],0h
    5405    5405  0 +
    5406    5406  0 +                                             ; 751           break;
    5407    5407  0 +  00002AA2  EB 0F 90 90 90                           jmp     @BLBL522
    5408    5408  0 +  00002AA7                                   @BLBL157:
    5409    5409  0 +
    5410    5410  0 +                                             ; 746   for( k = 0; k < work->cDskInfo; ++k )
    5411    5411  0 +  00002AA7  0F B7 FF                                 movzx   edi,di
    5412    5412  0 +  00002AAA  47                                       inc     edi
    5413    5413  0 +  00002AAB  0F B7 CF                                 movzx   ecx,di
    5414    5414  0 +  00002AAE  39 48 [14]                               cmp     [eax+014h],ecx
    5415    5415  0 +  00002AB1  77 D8                                    ja      @BLBL154
    5416    5416  0 +  00002AB3                                   @BLBL522:
    5417    5417  0 +  00002AB3                                   @BLBL159:
    5418    5418  0 +
    5419    5419  0 +                                             ; 742     for( j = 0; j < newdrv->queryChildren(); ++j )
    5420    5420  0 +  00002AB3  83 EC 04                                 sub     esp,04h
    5421    5421  0 +  00002AB6  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5422    5422  0 +  00002AB9  0F B7 DB                                 movzx   ebx,bx
    5423    5423  0 +  00002ABC  8B 08                                    mov     ecx,[eax]
    5424    5424  0 +  00002ABE  43                                       inc     ebx
    5425    5425  0 +  00002ABF  8B 91 [00000094]                         mov     edx,[ecx+094h]
    5426    5426  0 +  00002AC5  03 C2                                    add     eax,edx
    5427    5427  0 +  00002AC7  FF 91 [00000090]                         call    dword ptr [ecx+090h]
    5428    5428  0 +  00002ACD  0F B7 FB                                 movzx   edi,bx
    5429    5429  0 +  00002AD0  83 C4 04                                 add     esp,04h
    5430    5430  0 +  00002AD3  3B C7                                    cmp     eax,edi
    5431    5431  0 +  00002AD5  7F 85                                    jg      @BLBL152
    5432    5432  0 +  00002AD7  66:89 5D [DA]                            mov     [ebp-026h],bx;  j
    5433    5433  0 +  00002ADB                                   @BLBL151:
    5434    5434  0 +
    5435    5435  0 +                                             ; 757     if( (sec->u.s.flags & RDFLAG_HOSTDRIVE) )
    5436    5436  0 +  00002ADB  8B 4D [10]                               mov     ecx,[ebp+010h]; sec
    5437    5437  0 +  00002ADE  F6 41 [1B] 80                            test    byte ptr [ecx+01bh],080h
    5438    5438  0 +  00002AE2  0F 84 00002B83:R                         je      @BLBL162
    5439    5439  0 +
    5440    5440  0 +                                             ; 761   struct _OS2DEVID * const info = QueryArrayInfo(newdrv->queryID());
    5441    5441  0 +  00002AE8  83 EC 04                                 sub     esp,04h
    5442    5442  0 +  00002AEB  8B 75 [E0]                               mov     esi,[ebp-020h]; newdrv
    5443    5443  0 +  00002AEE  8D 46 [08]                               lea     eax,[esi+08h]
    5444    5444  0 +  00002AF1  E8 000033C6:R                            call    QueryArrayInfo__FCPA6_CUc
    5445    5445  0 +  00002AF6  83 C4 04                                 add     esp,04h
    5446    5446  0 +  00002AF9  89 45 [DC]                               mov     [ebp-024h],eax; info
    5447    5447  0 +
    5448    5448  0 +                                             ; 763   if( info = 0 )
    5449    5449  0 +  00002AFC  85 C0                                    test    eax,eax


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  108
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5450    5450  0 +  00002AFE  0F 84 00002B43:R                         je      @BLBL163
    5451    5451  0 +
    5452    5452  0 +                                             ; 765       if( info->avail == 0 )
    5453    5453  0 +  00002B04  80 78 [05] 00                            cmp     byte ptr [eax+05h],0h
    5454    5454  0 +  00002B08  8B C6                                    mov     eax,esi
    5455    5455  0 +  00002B0A  0F 85 00002B20:R                         jne     @BLBL164
    5456    5456  0 +
    5457    5457  0 +                                             ; 766           newdrv->forceUnwritable();
    5458    5458  0 +  00002B10  8B 08                                    mov     ecx,[eax]
    5459    5459  0 +  00002B12  83 EC 04                                 sub     esp,04h
    5460    5460  0 +  00002B15  8B 51 [34]                               mov     edx,[ecx+034h]
    5461    5461  0 +  00002B18  03 C2                                    add     eax,edx
    5462    5462  0 +  00002B1A  FF 51 [30]                               call    dword ptr [ecx+030h]
    5463    5463  0 +  00002B1D  83 C4 04                                 add     esp,04h
    5464    5464  0 +  00002B20                                   @BLBL164:
    5465    5465  0 +
    5466    5466  0 +                                             ; 767       newdrv->setHostdrive(info->os2idx);
    5467    5467  0 +  00002B20  83 EC 08                                 sub     esp,08h
    5468    5468  0 +  00002B23  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5469    5469  0 +  00002B26  8B 55 [DC]                               mov     edx,[ebp-024h]; info
    5470    5470  0 +  00002B29  8B 18                                    mov     ebx,[eax]
    5471    5471  0 +  00002B2B  8B 12                                    mov     edx,[edx]
    5472    5472  0 +  00002B2D  8B 8B [00000084]                         mov     ecx,[ebx+084h]
    5473    5473  0 +  00002B33  03 C1                                    add     eax,ecx
    5474    5474  0 +  00002B35  FF 93 [00000080]                         call    dword ptr [ebx+080h]
    5475    5475  0 +  00002B3B  83 C4 08                                 add     esp,08h
    5476    5476  0 +
    5477    5477  0 +                                             ; 768   }
    5478    5478  0 +  00002B3E  EB 1F 90 90 90                           jmp     @BLBL165
    5479    5479  0 +  00002B43                                   @BLBL163:
    5480    5480  0 +
    5481    5481  0 +                                             ; 770       newdrv->setHostdrive();
    5482    5482  0 +  00002B43  83 EC 08                                 sub     esp,08h
    5483    5483  0 +  00002B46  8B 45 [E0]                               mov     eax,[ebp-020h]; newdrv
    5484    5484  0 +  00002B49  83 CA FF                                 or      edx,0ffffffffh
    5485    5485  0 +  00002B4C  8B 18                                    mov     ebx,[eax]
    5486    5486  0 +  00002B4E  8B 8B [00000084]                         mov     ecx,[ebx+084h]
    5487    5487  0 +  00002B54  03 C1                                    add     eax,ecx
    5488    5488  0 +  00002B56  FF 93 [00000080]                         call    dword ptr [ebx+080h]
    5489    5489  0 +  00002B5C  83 C4 08                                 add     esp,08h
    5490    5490  0 +  00002B5F                                   @BLBL165:
    5491    5491  0 +
    5492    5492  0 +                                             ; 771   work->apEndPts[work->cEndPts++] = newdrv;
    5493    5493  0 +  00002B5F  8B 4D [08]                               mov     ecx,[ebp+08h];  work
    5494    5494  0 +
    5495    5495  0 +                                             ; 772     }
    5496    5496  0 +  00002B62  5E                                       pop     esi
    5497    5497  0 +
    5498    5498  0 +                                             ; 771   work->apEndPts[work->cEndPts++] = newdrv;
    5499    5499  0 +  00002B63  8B 59 [1C]                               mov     ebx,[ecx+01ch]
    5500    5500  0 +  00002B66  8B 41 [18]                               mov     eax,[ecx+018h]
    5501    5501  0 +
    5502    5502  0 +                                             ; 772     }
    5503    5503  0 +  00002B69  5F                                       pop     edi


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  109
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5504    5504  0 +
    5505    5505  0 +                                             ; 771   work->apEndPts[work->cEndPts++] = newdrv;
    5506    5506  0 +  00002B6A  8D 53 [01]                               lea     edx,[ebx+01h]
    5507    5507  0 +  00002B6D  89 51 [1C]                               mov     [ecx+01ch],edx
    5508    5508  0 +  00002B70  8B 4D [E0]                               mov     ecx,[ebp-020h]; newdrv
    5509    5509  0 +  00002B73  89 0C/98                                 mov     dword ptr [eax+ebx*04h],ecx
    5510    5510  0 +
    5511    5511  0 +                                             ; 772     }
    5512    5512  0 +  00002B76  5B                                       pop     ebx
    5513    5513  0 +  00002B77  83 C4 40                                 add     esp,040h
    5514    5514  0 +  00002B7A  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5514:6): Warning ALP4511: Assuming segment width for operand size
    5515    5515  0 +  00002B81  C9                                       leave
    5516    5516  0 +  00002B82  C3                                       ret
    5517    5517  0 +  00002B83                                   @BLBL162:
    5518    5518  0 +
    5519    5519  0 +                                             ; 774   work->apDskInfo[work->cDskInfo++] = newdrv;
    5520    5520  0 +  00002B83  8B 4D [08]                               mov     ecx,[ebp+08h];  work
    5521    5521  0 +
    5522    5522  0 +                                             ; 776     return;
    5523    5523  0 +  00002B86  5E                                       pop     esi
    5524    5524  0 +
    5525    5525  0 +                                             ; 774   work->apDskInfo[work->cDskInfo++] = newdrv;
    5526    5526  0 +  00002B87  8B 59 [14]                               mov     ebx,[ecx+014h]
    5527    5527  0 +  00002B8A  8B 41 [10]                               mov     eax,[ecx+010h]
    5528    5528  0 +
    5529    5529  0 +                                             ; 776     return;
    5530    5530  0 +  00002B8D  5F                                       pop     edi
    5531    5531  0 +
    5532    5532  0 +                                             ; 774   work->apDskInfo[work->cDskInfo++] = newdrv;
    5533    5533  0 +  00002B8E  8D 53 [01]                               lea     edx,[ebx+01h]
    5534    5534  0 +  00002B91  89 51 [14]                               mov     [ecx+014h],edx
    5535    5535  0 +  00002B94  8B 4D [E0]                               mov     ecx,[ebp-020h]; newdrv
    5536    5536  0 +  00002B97  89 0C/98                                 mov     dword ptr [eax+ebx*04h],ecx
    5537    5537  0 +
    5538    5538  0 +                                             ; 776     return;
    5539    5539  0 +  00002B9A  5B                                       pop     ebx
    5540    5540  0 +  00002B9B  83 C4 40                                 add     esp,040h
    5541    5541  0 +  00002B9E  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5541:6): Warning ALP4511: Assuming segment width for operand size
    5542    5542  0 +  00002BA5  C9                                       leave
    5543    5543  0 +  00002BA6  C3                                       ret
    5544    5544  0 +  00002BA7                                   AnalyseVRDev__FCP5_WORKP5VRDevCP10_SEC_VRDEV    endp
    5545    5545  0 +
    5546    5546  0 +                                             ; 541 AllocateOs2Devices(PWORK const work)
    5547    5547  0 +
    5548    5548  0 +  00002BA7                                   AllocateOs2Devices__FCP5_WORK   proc
    5549    5549  0 +  00002BA7  55                                       push    ebp
    5550    5550  0 +
    5551    5551  0 +                                             ; 552     Verbose(3, "DrvScan", "AllocateOs2Devices");
    5552    5552  0 +  00002BA8  B9 0000011C:R                            mov     ecx,offset FLAT:@CBE12
    5553    5553  0 +
    5554    5554  0 +                                             ; 541 AllocateOs2Devices(PWORK const work)
    5555    5555  0 +  00002BAD  8B EC                                    mov     ebp,esp


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  110
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5556    5556  0 +  00002BAF  68 00000000:E                            push    offset FLAT: _Exception_CPP
    5557    5557  0 +
    5558    5558  0 +                                             ; 552     Verbose(3, "DrvScan", "AllocateOs2Devices");
    5559    5559  0 +  00002BB4  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    5560    5560  0 +
    5561    5561  0 +                                             ; 541 AllocateOs2Devices(PWORK const work)
    5562    5562  0 +  00002BB9  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5562:7): Warning ALP4511: Assuming segment width for operand size
    5563    5563  0 +  00002BC0  64:89 25 [00000000]                      mov     fs:[0h],esp
    5564    5564  0 +  00002BC7  6A C4                                    push    0ffffffc4h
    5565    5565  0 +  00002BC9  89 45 [08]                               mov     [ebp+08h],eax;  work
    5566    5566  0 +  00002BCC  83 EC 30                                 sub     esp,030h
    5567    5567  0 +
    5568    5568  0 +                                             ; 552     Verbose(3, "DrvScan", "AllocateOs2Devices");
    5569    5569  0 +  00002BCF  B8 00000003                              mov     eax,03h
    5570    5570  0 +
    5571    5571  0 +                                             ; 541 AllocateOs2Devices(PWORK const work)
    5572    5572  0 +  00002BD4  53                                       push    ebx
    5573    5573  0 +  00002BD5  57                                       push    edi
    5574    5574  0 +  00002BD6  56                                       push    esi
    5575    5575  0 +
    5576    5576  0 +                                             ; 552     Verbose(3, "DrvScan", "AllocateOs2Devices");
    5577    5577  0 +  00002BD7  83 EC 0C                                 sub     esp,0ch
    5578    5578  0 +
    5579    5579  0 +                                             ; 542 {
    5580    5580  0 +  00002BDA  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5581    5581  0 +  00002BE1  C7 45 [CC]                               mov     dword ptr [ebp-034h],offset FLAT:@7d__fsm_tab;  __es
                                 0000001C:R
    5582    5582  0 +
    5583    5583  0 +                                             ; 546     USHORT                arraycnt = 0;
    5584    5584  0 +  00002BE8  66:C7 45 [DA] 0000                       mov     word ptr [ebp-026h],0h; arraycnt
    5585    5585  0 +
    5586    5586  0 +                                             ; 547     PUSHORT               arrayhd = NULL;
    5587    5587  0 +  00002BEE  C7 45 [E8] 00000000                      mov     dword ptr [ebp-018h],0h;        arrayhd
    5588    5588  0 +
    5589    5589  0 +                                             ; 548     USHORT                physcnt = 0;
    5590    5590  0 +  00002BF5  66:C7 45 [D8] 0000                       mov     word ptr [ebp-028h],0h; physcnt
    5591    5591  0 +
    5592    5592  0 +                                             ; 549     PUSHORT               physhd = NULL;
    5593    5593  0 +  00002BFB  C7 45 [E4] 00000000                      mov     dword ptr [ebp-01ch],0h;        physhd
    5594    5594  0 +
    5595    5595  0 +                                             ; 552     Verbose(3, "DrvScan", "AllocateOs2Devices");
    5596    5596  0 +  00002C02  E8 00000000:E                            call    Verbose
    5597    5597  0 +  00002C07  83 C4 0C                                 add     esp,0ch
    5598    5598  0 +
    5599    5599  0 +                                             ; 560     if( (fSetupMode & SM_FLTAVAIL) )
    5600    5600  0 +  00002C0A  F6 05 [00000000]:E                       test    byte ptr  fSetupMode,01h
                                 01
    5601    5601  0 +  00002C11  0F 84 00002C8B:R                         je      @BLBL103
    5602    5602  0 +
    5603    5603  0 +                                             ; 564       rc = DriverArraylist(&arraycnt, &arrayhd);
    5604    5604  0 +  00002C17  8D 55 [E8]                               lea     edx,[ebp-018h]; arrayhd
    5605    5605  0 +  00002C1A  83 EC 08                                 sub     esp,08h
    5606    5606  0 +  00002C1D  8D 45 [DA]                               lea     eax,[ebp-026h]; arraycnt


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  111
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5607    5607  0 +  00002C20  E8 00000000:E                            call    DriverArraylist__FPUsPPUs
    5608    5608  0 +  00002C25  83 C4 08                                 add     esp,08h
    5609    5609  0 +
    5610    5610  0 +                                             ; 565       if( rc )
    5611    5611  0 +  00002C28  85 C0                                    test    eax,eax
    5612    5612  0 +  00002C2A  0F 84 00002C51:R                         je      @BLBL109
    5613    5613  0 +
    5614    5614  0 +                                             ; 567           Verbose(1, "DrvSetup", "DriverArraylist - rc %lu", rc);
    5615    5615  0 +  00002C30  50                                       push    eax
    5616    5616  0 +  00002C31  B9 00000130:R                            mov     ecx,offset FLAT:@CBE13
    5617    5617  0 +  00002C36  83 EC 0C                                 sub     esp,0ch
    5618    5618  0 +  00002C39  BA 000000D8:R                            mov     edx,offset FLAT:@CBE9
    5619    5619  0 +  00002C3E  B8 00000001                              mov     eax,01h
    5620    5620  0 +  00002C43  E8 00000000:E                            call    Verbose
    5621    5621  0 +  00002C48  83 C4 10                                 add     esp,010h
    5622    5622  0 +
    5623    5623  0 +                                             ; 568           arraycnt = 0;
    5624    5624  0 +  00002C4B  66:C7 45 [DA] 0000                       mov     word ptr [ebp-026h],0h; arraycnt
    5625    5625  0 +
    5626    5626  0 +                                             ; 569           break;
    5627    5627  0 +  00002C51                                   @BLBL109:
    5628    5628  0 +
    5629    5629  0 +                                             ; 576       rc = DriverPhyslist(&physcnt, &physhd);
    5630    5630  0 +  00002C51  8D 55 [E4]                               lea     edx,[ebp-01ch]; physhd
    5631    5631  0 +  00002C54  83 EC 08                                 sub     esp,08h
    5632    5632  0 +  00002C57  8D 45 [D8]                               lea     eax,[ebp-028h]; physcnt
    5633    5633  0 +  00002C5A  E8 00000000:E                            call    DriverPhyslist__FPUsPPUs
    5634    5634  0 +  00002C5F  83 C4 08                                 add     esp,08h
    5635    5635  0 +
    5636    5636  0 +                                             ; 577       if( rc )
    5637    5637  0 +  00002C62  85 C0                                    test    eax,eax
    5638    5638  0 +  00002C64  0F 84 00002C8B:R                         je      @BLBL103
    5639    5639  0 +
    5640    5640  0 +                                             ; 579           Verbose(1, "DrvSetup", "DriverPhyslist - rc %lu", rc);
    5641    5641  0 +  00002C6A  50                                       push    eax
    5642    5642  0 +  00002C6B  B9 000000E4:R                            mov     ecx,offset FLAT:@CBE10
    5643    5643  0 +  00002C70  83 EC 0C                                 sub     esp,0ch
    5644    5644  0 +  00002C73  BA 000000D8:R                            mov     edx,offset FLAT:@CBE9
    5645    5645  0 +  00002C78  B8 00000001                              mov     eax,01h
    5646    5646  0 +  00002C7D  E8 00000000:E                            call    Verbose
    5647    5647  0 +  00002C82  83 C4 10                                 add     esp,010h
    5648    5648  0 +
    5649    5649  0 +                                             ; 580           physcnt = 0;
    5650    5650  0 +  00002C85  66:C7 45 [D8] 0000                       mov     word ptr [ebp-028h],0h; physcnt
    5651    5651  0 +
    5652    5652  0 +                                             ; 581           break;
    5653    5653  0 +  00002C8B                                   @BLBL103:
    5654    5654  0 +
    5655    5655  0 +                                             ; 589     rc = PDskEnum(&os2cnt);
    5656    5656  0 +  00002C8B  8D 45 [EC]                               lea     eax,[ebp-014h]; os2cnt
    5657    5657  0 +  00002C8E  83 EC 04                                 sub     esp,04h
    5658    5658  0 +  00002C91  E8 00000000:E                            call    PDskEnum
    5659    5659  0 +  00002C96  83 C4 04                                 add     esp,04h
    5660    5660  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  112
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5661    5661  0 +                                             ; 590     if( rc )
    5662    5662  0 +  00002C99  85 C0                                    test    eax,eax
    5663    5663  0 +  00002C9B  0F 84 00002CC3:R                         je      @BLBL114
    5664    5664  0 +
    5665    5665  0 +                                             ; 592   Verbose(1, "DrvSetup", "PDskEnum - rc %lu", rc);
    5666    5666  0 +  00002CA1  50                                       push    eax
    5667    5667  0 +  00002CA2  B9 0000014C:R                            mov     ecx,offset FLAT:@CBE14
    5668    5668  0 +  00002CA7  83 EC 0C                                 sub     esp,0ch
    5669    5669  0 +  00002CAA  BA 000000D8:R                            mov     edx,offset FLAT:@CBE9
    5670    5670  0 +  00002CAF  B8 00000001                              mov     eax,01h
    5671    5671  0 +  00002CB4  E8 00000000:E                            call    Verbose
    5672    5672  0 +  00002CB9  83 C4 10                                 add     esp,010h
    5673    5673  0 +
    5674    5674  0 +                                             ; 593   os2cnt = 0;
    5675    5675  0 +  00002CBC  C7 45 [EC] 00000000                      mov     dword ptr [ebp-014h],0h;        os2cnt
    5676    5676  0 +
    5677    5677  0 +                                             ; 594     }
    5678    5678  0 +  00002CC3                                   @BLBL114:
    5679    5679  0 +
    5680    5680  0 +                                             ; 595     for( i = 0; i < os2cnt; ++i )
    5681    5681  0 +  00002CC3  83 7D [EC] 00                            cmp     dword ptr [ebp-014h],0h;        os2cnt
    5682    5682  0 +  00002CC7  0F 86 00002DCB:R                         jbe     @BLBL115
    5683    5683  0 +  00002CCD  8B 5D [F0]                               mov     ebx,[ebp-010h]; __66
    5684    5684  0 +  00002CD0  8B 75 [DC]                               mov     esi,[ebp-024h]; newdev
    5685    5685  0 +  00002CD3  33 FF                                    xor     edi,edi
    5686    5686  0 +  00002CD5                                   @BLBL116:
    5687    5687  0 +
    5688    5688  0 +                                             ; 600   rc = PDskOpen(i, &handle);
    5689    5689  0 +  00002CD5  8D 55 [E0]                               lea     edx,[ebp-020h]; handle
    5690    5690  0 +  00002CD8  83 EC 08                                 sub     esp,08h
    5691    5691  0 +  00002CDB  8B C7                                    mov     eax,edi
    5692    5692  0 +  00002CDD  E8 00000000:E                            call    PDskOpen
    5693    5693  0 +  00002CE2  83 C4 08                                 add     esp,08h
    5694    5694  0 +
    5695    5695  0 +                                             ; 601   if( rc = 0 )
    5696    5696  0 +  00002CE5  85 C0                                    test    eax,eax
    5697    5697  0 +  00002CE7  0F 84 00002D25:R                         je      @BLBL117
    5698    5698  0 +
    5699    5699  0 +                                             ; 603       Verbose(1, "DrvScan", "PDskOpen(%lu) - rc %lu", i, rc);
    5700    5700  0 +  00002CED  50                                       push    eax
    5701    5701  0 +  00002CEE  B9 00000160:R                            mov     ecx,offset FLAT:@CBE15
    5702    5702  0 +  00002CF3  57                                       push    edi
    5703    5703  0 +  00002CF4  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    5704    5704  0 +  00002CF9  83 EC 0C                                 sub     esp,0ch
    5705    5705  0 +  00002CFC  B8 00000001                              mov     eax,01h
    5706    5706  0 +  00002D01  E8 00000000:E                            call    Verbose
    5707    5707  0 +  00002D06  83 C4 08                                 add     esp,08h
    5708    5708  0 +
    5709    5709  0 +                                             ; 604       MyMessageBox(2, HWND_DESKTOP,
    5710    5710  0 +  00002D09  B9 00000178:R                            mov     ecx,offset FLAT:@CBE16
    5711    5711  0 +  00002D0E  BA 00000001                              mov     edx,01h
    5712    5712  0 +  00002D13  B8 00000002                              mov     eax,02h
    5713    5713  0 +  00002D18  E8 00000000:E                            call    MyMessageBox__FCiCUlPce
    5714    5714  0 +  00002D1D  83 C4 0C                                 add     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  113
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5715    5715  0 +
    5716    5716  0 +                                             ; 610       continue;
    5717    5717  0 +  00002D20  E9 00002DBE:R                            jmp     @BLBL118
    5718    5718  0 +  00002D25                                   @BLBL117:
    5719    5719  0 +
    5720    5720  0 +                                             ; 613   VOS2Disk * newdev = new VOS2Disk(i, handle);
    5721    5721  0 +  00002D25  83 EC 04                                 sub     esp,04h
    5722    5722  0 +  00002D28  B8 00000020                              mov     eax,020h
    5723    5723  0 +  00002D2D  E8 00000000:E                            call    __nw__FUi
    5724    5724  0 +  00002D32  83 C4 04                                 add     esp,04h
    5725    5725  0 +  00002D35  8B D8                                    mov     ebx,eax
    5726    5726  0 +  00002D37  85 DB                                    test    ebx,ebx
    5727    5727  0 +  00002D39  0F 84 00002D5D:R                         je      @BLBL120
    5728    5728  0 +  00002D3F  8B D7                                    mov     edx,edi
    5729    5729  0 +  00002D41  C7 45 [C4] 00000001                      mov     dword ptr [ebp-03ch],01h;       __es
    5730    5730  0 +  00002D48  83 EC 0C                                 sub     esp,0ch
    5731    5731  0 +  00002D4B  8B 4D [E0]                               mov     ecx,[ebp-020h]; handle
    5732    5732  0 +  00002D4E  E8 00000000:E                            call    __ct__8VOS2DiskFUlT1
    5733    5733  0 +  00002D53  83 C4 0C                                 add     esp,0ch
    5734    5734  0 +  00002D56  C7 45 [C4] 00000000                      mov     dword ptr [ebp-03ch],0h;        __es
    5735    5735  0 +  00002D5D                                   @BLBL120:
    5736    5736  0 +  00002D5D  8B F3                                    mov     esi,ebx
    5737    5737  0 +
    5738    5738  0 +                                             ; 624   if( (fSetupMode & SM_FLTAVAIL) )
    5739    5739  0 +  00002D5F  F6 05 [00000000]:E                       test    byte ptr  fSetupMode,01h
                                 01
    5740    5740  0 +  00002D66  0F 84 00002DAF:R                         je      @BLBL121
    5741    5741  0 +
    5742    5742  0 +                                             ; 625       if( IsProvidedByFlt(newdev, arraycnt, arrayhd, physcnt, physhd) )
    5743    5743  0 +  00002D6C  FF 75 [E4]                               push    dword ptr [ebp-01ch];   physhd
    5744    5744  0 +  00002D6F  66:8B 45 [D8]                            mov     ax,[ebp-028h];  physcnt
    5745    5745  0 +  00002D73  50                                       push    eax
    5746    5746  0 +  00002D74  8B 4D [E8]                               mov     ecx,[ebp-018h]; arrayhd
    5747    5747  0 +  00002D77  83 EC 0C                                 sub     esp,0ch
    5748    5748  0 +  00002D7A  66:8B 55 [DA]                            mov     dx,[ebp-026h];  arraycnt
    5749    5749  0 +  00002D7E  8B C6                                    mov     eax,esi
    5750    5750  0 +  00002D80  E8 00002F29:R                            call    IsProvidedByFlt__FCP8VOS2DiskUsPUsT2T3
    5751    5751  0 +  00002D85  83 C4 14                                 add     esp,014h
    5752    5752  0 +  00002D88  85 C0                                    test    eax,eax
    5753    5753  0 +  00002D8A  0F 84 00002DAF:R                         je      @BLBL121
    5754    5754  0 +
    5755    5755  0 +                                             ; 627           delete newdev;
    5756    5756  0 +  00002D90  85 F6                                    test    esi,esi
    5757    5757  0 +  00002D92  0F 84 00002DBE:R                         je      @BLBL118
    5758    5758  0 +  00002D98  8B C6                                    mov     eax,esi
    5759    5759  0 +  00002D9A  83 EC 08                                 sub     esp,08h
    5760    5760  0 +  00002D9D  BA 00000003                              mov     edx,03h
    5761    5761  0 +  00002DA2  E8 00000000:E                            call    __dt__8VOS2DiskFv
    5762    5762  0 +  00002DA7  83 C4 08                                 add     esp,08h
    5763    5763  0 +  00002DAA  EB 12 90 90 90                           jmp     @BLBL118
    5764    5764  0 +  00002DAF                                   @BLBL121:
    5765    5765  0 +
    5766    5766  0 +                                             ; 635   work->apOs2Dsk[work->cOs2Dsk] = newdev;
    5767    5767  0 +  00002DAF  8B 45 [08]                               mov     eax,[ebp+08h];  work


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  114
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5768    5768  0 +  00002DB2  8B 48 [08]                               mov     ecx,[eax+08h]
    5769    5769  0 +  00002DB5  8B 50 [0C]                               mov     edx,[eax+0ch]
    5770    5770  0 +  00002DB8  89 34/91                                 mov     dword ptr [ecx+edx*04h],esi
    5771    5771  0 +
    5772    5772  0 +                                             ; 636   ++work->cOs2Dsk;
    5773    5773  0 +  00002DBB  FF 40 [0C]                               inc     dword ptr [eax+0ch]
    5774    5774  0 +
    5775    5775  0 +                                             ; 638     } /* end[for(every device)] */
    5776    5776  0 +  00002DBE                                   @BLBL118:
    5777    5777  0 +
    5778    5778  0 +                                             ; 595     for( i = 0; i < os2cnt; ++i )
    5779    5779  0 +  00002DBE  47                                       inc     edi
    5780    5780  0 +  00002DBF  39 7D [EC]                               cmp     [ebp-014h],edi; os2cnt
    5781    5781  0 +  00002DC2  0F 87 00002CD5:R                         ja      @BLBL116
    5782    5782  0 +  00002DC8  89 5D [F0]                               mov     [ebp-010h],ebx; __66
    5783    5783  0 +  00002DCB                                   @BLBL115:
    5784    5784  0 +
    5785    5785  0 +                                             ; 641     return os2cnt;
    5786    5786  0 +  00002DCB  5E                                       pop     esi
    5787    5787  0 +  00002DCC  8B 45 [EC]                               mov     eax,[ebp-014h]; os2cnt
    5788    5788  0 +  00002DCF  5F                                       pop     edi
    5789    5789  0 +  00002DD0  5B                                       pop     ebx
    5790    5790  0 +  00002DD1  83 C4 34                                 add     esp,034h
    5791    5791  0 +  00002DD4  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5791:6): Warning ALP4511: Assuming segment width for operand size
    5792    5792  0 +  00002DDB  C9                                       leave
    5793    5793  0 +  00002DDC  C3                                       ret
    5794    5794  0 +  00002DDD                                   AllocateOs2Devices__FCP5_WORK   endp
    5795    5795  0 +
    5796    5796  0 +                                             ; 484 AllocateFltDevices(PWORK const work)
    5797    5797  0 +
    5798    5798  0 +  00002DDD                                   AllocateFltDevices__FCP5_WORK   proc
    5799    5799  0 +  00002DDD  55                                       push    ebp
    5800    5800  0 +
    5801    5801  0 +                                             ; 491     Verbose(3, "DrvScan", "AllocateFltDevices");
    5802    5802  0 +  00002DDE  B9 000000C4:R                            mov     ecx,offset FLAT:@CBE8
    5803    5803  0 +
    5804    5804  0 +                                             ; 484 AllocateFltDevices(PWORK const work)
    5805    5805  0 +  00002DE3  8B EC                                    mov     ebp,esp
    5806    5806  0 +  00002DE5  68 00000000:E                            push    offset FLAT: _Exception_CPP
    5807    5807  0 +
    5808    5808  0 +                                             ; 491     Verbose(3, "DrvScan", "AllocateFltDevices");
    5809    5809  0 +  00002DEA  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    5810    5810  0 +
    5811    5811  0 +                                             ; 484 AllocateFltDevices(PWORK const work)
    5812    5812  0 +  00002DEF  64:FF 35 [00000000]                      push    fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5812:7): Warning ALP4511: Assuming segment width for operand size
    5813    5813  0 +  00002DF6  64:89 25 [00000000]                      mov     fs:[0h],esp
    5814    5814  0 +  00002DFD  6A CC                                    push    0ffffffcch
    5815    5815  0 +  00002DFF  83 EC 28                                 sub     esp,028h
    5816    5816  0 +  00002E02  53                                       push    ebx
    5817    5817  0 +  00002E03  8B D8                                    mov     ebx,eax
    5818    5818  0 +  00002E05  57                                       push    edi
    5819    5819  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  115
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5820    5820  0 +                                             ; 491     Verbose(3, "DrvScan", "AllocateFltDevices");
    5821    5821  0 +  00002E06  B8 00000003                              mov     eax,03h
    5822    5822  0 +
    5823    5823  0 +                                             ; 484 AllocateFltDevices(PWORK const work)
    5824    5824  0 +  00002E0B  56                                       push    esi
    5825    5825  0 +  00002E0C  89 5D [08]                               mov     [ebp+08h],ebx;  work
    5826    5826  0 +
    5827    5827  0 +                                             ; 491     Verbose(3, "DrvScan", "AllocateFltDevices");
    5828    5828  0 +  00002E0F  83 EC 0C                                 sub     esp,0ch
    5829    5829  0 +
    5830    5830  0 +                                             ; 485 {
    5831    5831  0 +  00002E12  C7 45 [CC] 00000000                      mov     dword ptr [ebp-034h],0h;        __es
    5832    5832  0 +  00002E19  C7 45 [D4]                               mov     dword ptr [ebp-02ch],offset FLAT:@59__fsm_tab;  __es
                                 00000000:R
    5833    5833  0 +
    5834    5834  0 +                                             ; 491     Verbose(3, "DrvScan", "AllocateFltDevices");
    5835    5835  0 +  00002E20  E8 00000000:E                            call    Verbose
    5836    5836  0 +  00002E25  8B C3                                    mov     eax,ebx
    5837    5837  0 +  00002E27  83 C4 04                                 add     esp,04h
    5838    5838  0 +
    5839    5839  0 +                                             ; 493     idx = work->cDskInfo;                 /* new index: behind already found
    5840    5840  0 +  00002E2A  8B 40 [14]                               mov     eax,[eax+014h]
    5841    5841  0 +  00002E2D  89 45 [EC]                               mov     [ebp-014h],eax; idx
    5842    5842  0 +
    5843    5843  0 +                                             ; 497   rc = DriverPhyslist(&cnt, &list);
    5844    5844  0 +  00002E30  8D 55 [E8]                               lea     edx,[ebp-018h]; list
    5845    5845  0 +  00002E33  8D 45 [E2]                               lea     eax,[ebp-01eh]; cnt
    5846    5846  0 +  00002E36  E8 00000000:E                            call    DriverPhyslist__FPUsPPUs
    5847    5847  0 +  00002E3B  83 C4 08                                 add     esp,08h
    5848    5848  0 +
    5849    5849  0 +                                             ; 498   if( rc )
    5850    5850  0 +  00002E3E  85 C0                                    test    eax,eax
    5851    5851  0 +  00002E40  0F 84 00002E6C:R                         je      @BLBL90
    5852    5852  0 +
    5853    5853  0 +                                             ; 500       Verbose(1, "DrvSetup", "DriverPhyslist - rc %lu", rc);
    5854    5854  0 +  00002E46  50                                       push    eax
    5855    5855  0 +  00002E47  B9 000000E4:R                            mov     ecx,offset FLAT:@CBE10
    5856    5856  0 +  00002E4C  83 EC 0C                                 sub     esp,0ch
    5857    5857  0 +  00002E4F  BA 000000D8:R                            mov     edx,offset FLAT:@CBE9
    5858    5858  0 +  00002E54  B8 00000001                              mov     eax,01h
    5859    5859  0 +  00002E59  E8 00000000:E                            call    Verbose
    5860    5860  0 +  00002E5E  83 C4 10                                 add     esp,010h
    5861    5861  0 +
    5862    5862  0 +                                             ; 501       cnt = 0;
    5863    5863  0 +  00002E61  66:C7 45 [E2] 0000                       mov     word ptr [ebp-01eh],0h; cnt
    5864    5864  0 +
    5865    5865  0 +                                             ; 502       break;
    5866    5866  0 +  00002E67  E9 00002F17:R                            jmp     @BLBL91
    5867    5867  0 +  00002E6C                                   @BLBL90:
    5868    5868  0 +
    5869    5869  0 +                                             ; 505   for( i = 0; i < cnt; ++i )
    5870    5870  0 +  00002E6C  66:83 7D [E2] 00                         cmp     word ptr [ebp-01eh],0h; cnt
    5871    5871  0 +  00002E71  0F 86 00002F17:R                         jbe     @BLBL91
    5872    5872  0 +  00002E77  8B 75 [EC]                               mov     esi,[ebp-014h]; idx


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  116
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5873    5873  0 +  00002E7A  33 FF                                    xor     edi,edi
    5874    5874  0 +  00002E7C                                   @BLBL93:
    5875    5875  0 +
    5876    5876  0 +                                             ; 507       work->apDskInfo[idx] = new VFRDev(list[i]);
    5877    5877  0 +  00002E7C  8B 45 [08]                               mov     eax,[ebp+08h];  work
    5878    5878  0 +  00002E7F  83 EC 04                                 sub     esp,04h
    5879    5879  0 +  00002E82  8B 40 [10]                               mov     eax,[eax+010h]
    5880    5880  0 +  00002E85  8D 04/B0                                 lea     eax,dword ptr [eax+esi*04h]
    5881    5881  0 +  00002E88  89 45 [E4]                               mov     [ebp-01ch],eax; @CBE68
    5882    5882  0 +  00002E8B  B8 0000002C                              mov     eax,02ch
    5883    5883  0 +  00002E90  E8 00000000:E                            call    __nw__FUi
    5884    5884  0 +  00002E95  83 C4 04                                 add     esp,04h
    5885    5885  0 +  00002E98  8B D8                                    mov     ebx,eax
    5886    5886  0 +  00002E9A  85 DB                                    test    ebx,ebx
    5887    5887  0 +  00002E9C  0F 84 00002EC2:R                         je      @BLBL95
    5888    5888  0 +  00002EA2  C7 45 [CC] 00000001                      mov     dword ptr [ebp-034h],01h;       __es
    5889    5889  0 +  00002EA9  83 EC 08                                 sub     esp,08h
    5890    5890  0 +  00002EAC  8B 55 [E8]                               mov     edx,[ebp-018h]; list
    5891    5891  0 +  00002EAF  66:8B 14/7A                              mov     dx,word ptr [edx+edi*02h]
    5892    5892  0 +  00002EB3  E8 00000000:E                            call    __ct__6VFRDevFUs
    5893    5893  0 +  00002EB8  83 C4 08                                 add     esp,08h
    5894    5894  0 +  00002EBB  C7 45 [CC] 00000000                      mov     dword ptr [ebp-034h],0h;        __es
    5895    5895  0 +  00002EC2                                   @BLBL95:
    5896    5896  0 +
    5897    5897  0 +                                             ; 505   for( i = 0; i < cnt; ++i )
    5898    5898  0 +  00002EC2  47                                       inc     edi
    5899    5899  0 +
    5900    5900  0 +                                             ; 511       Verbose(2, "DrvSetup", "FLT drive capacity: %lu MBytes",
    5901    5901  0 +  00002EC3  83 EC 04                                 sub     esp,04h
    5902    5902  0 +
    5903    5903  0 +                                             ; 507       work->apDskInfo[idx] = new VFRDev(list[i]);
    5904    5904  0 +  00002EC6  8B 45 [E4]                               mov     eax,[ebp-01ch]; @CBE68
    5905    5905  0 +  00002EC9  89 18                                    mov     [eax],ebx
    5906    5906  0 +
    5907    5907  0 +                                             ; 509       ++work->cDskInfo;                   /* keep this device */
    5908    5908  0 +  00002ECB  8B 45 [08]                               mov     eax,[ebp+08h];  work
    5909    5909  0 +  00002ECE  FF 40 [14]                               inc     dword ptr [eax+014h]
    5910    5910  0 +
    5911    5911  0 +                                             ; 511       Verbose(2, "DrvSetup", "FLT drive capacity: %lu MBytes",
    5912    5912  0 +  00002ED1  8B 40 [10]                               mov     eax,[eax+010h]
    5913    5913  0 +  00002ED4  8B 04/B0                                 mov     eax,dword ptr [eax+esi*04h]
    5914    5914  0 +
    5915    5915  0 +                                             ; 514       ++idx;
    5916    5916  0 +  00002ED7  46                                       inc     esi
    5917    5917  0 +
    5918    5918  0 +                                             ; 511       Verbose(2, "DrvSetup", "FLT drive capacity: %lu MBytes",
    5919    5919  0 +  00002ED8  8B 08                                    mov     ecx,[eax]
    5920    5920  0 +  00002EDA  8B 51 [14]                               mov     edx,[ecx+014h]
    5921    5921  0 +  00002EDD  03 C2                                    add     eax,edx
    5922    5922  0 +  00002EDF  FF 51 [10]                               call    dword ptr [ecx+010h]
    5923    5923  0 +  00002EE2  83 C4 04                                 add     esp,04h
    5924    5924  0 +  00002EE5  D1 E8                                    shr     eax,01h
    5925    5925  0 +  00002EE7  C1 E8 0A                                 shr     eax,0ah
    5926    5926  0 +  00002EEA  50                                       push    eax


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  117
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5927    5927  0 +  00002EEB  B9 000000FC:R                            mov     ecx,offset FLAT:@CBE11
    5928    5928  0 +  00002EF0  83 EC 0C                                 sub     esp,0ch
    5929    5929  0 +  00002EF3  BA 000000D8:R                            mov     edx,offset FLAT:@CBE9
    5930    5930  0 +  00002EF8  B8 00000002                              mov     eax,02h
    5931    5931  0 +  00002EFD  E8 00000000:E                            call    Verbose
    5932    5932  0 +  00002F02  83 C4 10                                 add     esp,010h
    5933    5933  0 +
    5934    5934  0 +                                             ; 505   for( i = 0; i < cnt; ++i )
    5935    5935  0 +  00002F05  0F B7 45 [E2]                            movzx   eax,word ptr [ebp-01eh];        cnt
    5936    5936  0 +  00002F09  3B C7                                    cmp     eax,edi
    5937    5937  0 +  00002F0B  0F 87 00002E7C:R                         ja      @BLBL93
    5938    5938  0 +  00002F11  89 5D [F0]                               mov     [ebp-010h],ebx; __63
    5939    5939  0 +  00002F14  89 75 [EC]                               mov     [ebp-014h],esi; idx
    5940    5940  0 +
    5941    5941  0 +                                             ; 517     while(0);                                     /* end[OS/2 devices] */
    5942    5942  0 +  00002F17                                   @BLBL91:
    5943    5943  0 +
    5944    5944  0 +                                             ; 519     return idx;
    5945    5945  0 +  00002F17  5E                                       pop     esi
    5946    5946  0 +  00002F18  8B 45 [EC]                               mov     eax,[ebp-014h]; idx
    5947    5947  0 +  00002F1B  5F                                       pop     edi
    5948    5948  0 +  00002F1C  5B                                       pop     ebx
    5949    5949  0 +  00002F1D  83 C4 2C                                 add     esp,02ch
    5950    5950  0 +  00002F20  64:8F 05 [00000000]                      pop     fs:[0h]
    R:\SOURCE\driver\raid\SETUP\list\drvscan.asm(5950:6): Warning ALP4511: Assuming segment width for operand size
    5951    5951  0 +  00002F27  C9                                       leave
    5952    5952  0 +  00002F28  C3                                       ret
    5953    5953  0 +  00002F29                                   AllocateFltDevices__FCP5_WORK   endp
    5954    5954  0 +
    5955    5955  0 +                                             ; 319 IsProvidedByFlt(VOS2Disk * const newdev,
    5956    5956  0 +
    5957    5957  0 +  00002F29                                   IsProvidedByFlt__FCP8VOS2DiskUsPUsT2T3  proc
    5958    5958  0 +  00002F29  55                                       push    ebp
    5959    5959  0 +  00002F2A  91                                       xchg    ecx,eax
    5960    5960  0 +  00002F2B  8B EC                                    mov     ebp,esp
    5961    5961  0 +  00002F2D  53                                       push    ebx
    5962    5962  0 +  00002F2E  8B DA                                    mov     ebx,edx
    5963    5963  0 +  00002F30  57                                       push    edi
    5964    5964  0 +  00002F31  89 45 [10]                               mov     [ebp+010h],eax; ahd
    5965    5965  0 +  00002F34  56                                       push    esi
    5966    5966  0 +
    5967    5967  0 +                                             ; 334     ainfo = new PVRAID_ARRAYINFO_DATA[acnt];
    5968    5968  0 +  00002F35  0F B7 C3                                 movzx   eax,bx
    5969    5969  0 +
    5970    5970  0 +                                             ; 319 IsProvidedByFlt(VOS2Disk * const newdev,
    5971    5971  0 +  00002F38  83 EC 60                                 sub     esp,060h
    5972    5972  0 +
    5973    5973  0 +                                             ; 334     ainfo = new PVRAID_ARRAYINFO_DATA[acnt];
    5974    5974  0 +  00002F3B  C1 E0 02                                 sal     eax,02h
    5975    5975  0 +
    5976    5976  0 +                                             ; 319 IsProvidedByFlt(VOS2Disk * const newdev,
    5977    5977  0 +  00002F3E  89 4D [08]                               mov     [ebp+08h],ecx;  newdev
    5978    5978  0 +
    5979    5979  0 +                                             ; 334     ainfo = new PVRAID_ARRAYINFO_DATA[acnt];


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  118
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    5980    5980  0 +  00002F41  E8 00000000:E                            call    __vn__FUi
    5981    5981  0 +  00002F46  8B D3                                    mov     edx,ebx
    5982    5982  0 +
    5983    5983  0 +                                             ; 319 IsProvidedByFlt(VOS2Disk * const newdev,
    5984    5984  0 +  00002F48  66:89 5D [0C]                            mov     [ebp+0ch],bx;   acnt
    5985    5985  0 +
    5986    5986  0 +                                             ; 326     BOOL  isarray = FALSE;
    5987    5987  0 +  00002F4C  C7 45 [F0] 00000000                      mov     dword ptr [ebp-010h],0h;        isarray
    5988    5988  0 +
    5989    5989  0 +                                             ; 335     for( j = 0; j < acnt; ++j )
    5990    5990  0 +  00002F53  66:85 D2                                 test    dx,dx
    5991    5991  0 +
    5992    5992  0 +                                             ; 328     BOOL  isphys = FALSE;
    5993    5993  0 +  00002F56  C7 45 [DC] 00000000                      mov     dword ptr [ebp-024h],0h;        isphys
    5994    5994  0 +
    5995    5995  0 +                                             ; 334     ainfo = new PVRAID_ARRAYINFO_DATA[acnt];
    5996    5996  0 +  00002F5D  89 45 [EC]                               mov     [ebp-014h],eax; ainfo
    5997    5997  0 +
    5998    5998  0 +                                             ; 335     for( j = 0; j < acnt; ++j )
    5999    5999  0 +  00002F60  0F 86 00002F98:R                         jbe     @BLBL19
    6000    6000  0 +  00002F66  8B D8                                    mov     ebx,eax
    6001    6001  0 +  00002F68  66:8B F2                                 mov     si,dx
    6002    6002  0 +  00002F6B  33 FF                                    xor     edi,edi
    6003    6003  0 +  00002F6D                                   @BLBL20:
    6004    6004  0 +
    6005    6005  0 +                                             ; 337   ainfo[j] = new VRAID_ARRAYINFO_DATA;
    6006    6006  0 +  00002F6D  0F B7 C7                                 movzx   eax,di
    6007    6007  0 +  00002F70  89 45 [A0]                               mov     [ebp-060h],eax; @CBE141
    6008    6008  0 +  00002F73  B8 0000000E                              mov     eax,0eh
    6009    6009  0 +  00002F78  E8 00000000:E                            call    __nw__FUi
    6010    6010  0 +  00002F7D  8B 4D [A0]                               mov     ecx,[ebp-060h]; @CBE141
    6011    6011  0 +  00002F80  89 04/8B                                 mov     dword ptr [ebx+ecx*04h],eax
    6012    6012  0 +
    6013    6013  0 +                                             ; 338   memset(ainfo[j], 0, sizeof(VRAID_ARRAYINFO_DATA));
    6014    6014  0 +  00002F83  B9 0000000E                              mov     ecx,0eh
    6015    6015  0 +  00002F88  33 D2                                    xor     edx,edx
    6016    6016  0 +  00002F8A  E8 00000000:E                            call    memset
    6017    6017  0 +
    6018    6018  0 +                                             ; 335     for( j = 0; j < acnt; ++j )
    6019    6019  0 +  00002F8F  0F B7 FF                                 movzx   edi,di
    6020    6020  0 +  00002F92  47                                       inc     edi
    6021    6021  0 +  00002F93  66:3B FE                                 cmp     di,si
    6022    6022  0 +  00002F96  72 D5                                    jb      @BLBL20
    6023    6023  0 +  00002F98                                   @BLBL19:
    6024    6024  0 +
    6025    6025  0 +                                             ; 341     pinfo = new PVRAID_PHYSINFO_DATA[pcnt];
    6026    6026  0 +  00002F98  66:8B 5D [14]                            mov     bx,[ebp+014h];  pcnt
    6027    6027  0 +  00002F9C  0F B7 C3                                 movzx   eax,bx
    6028    6028  0 +  00002F9F  C1 E0 02                                 sal     eax,02h
    6029    6029  0 +  00002FA2  E8 00000000:E                            call    __vn__FUi
    6030    6030  0 +  00002FA7  8B CB                                    mov     ecx,ebx
    6031    6031  0 +  00002FA9  89 45 [E0]                               mov     [ebp-020h],eax; pinfo
    6032    6032  0 +
    6033    6033  0 +                                             ; 342     for( j = 0; j < pcnt; ++j )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  119
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6034    6034  0 +  00002FAC  66:85 C9                                 test    cx,cx
    6035    6035  0 +  00002FAF  0F 86 00002FE7:R                         jbe     @BLBL24
    6036    6036  0 +  00002FB5  8B D8                                    mov     ebx,eax
    6037    6037  0 +  00002FB7  66:8B F1                                 mov     si,cx
    6038    6038  0 +  00002FBA  33 FF                                    xor     edi,edi
    6039    6039  0 +  00002FBC                                   @BLBL25:
    6040    6040  0 +
    6041    6041  0 +                                             ; 344   pinfo[j] = new VRAID_PHYSINFO_DATA;
    6042    6042  0 +  00002FBC  0F B7 C7                                 movzx   eax,di
    6043    6043  0 +  00002FBF  89 45 [A0]                               mov     [ebp-060h],eax; @CBE141
    6044    6044  0 +  00002FC2  B8 00000011                              mov     eax,011h
    6045    6045  0 +  00002FC7  E8 00000000:E                            call    __nw__FUi
    6046    6046  0 +  00002FCC  8B 4D [A0]                               mov     ecx,[ebp-060h]; @CBE141
    6047    6047  0 +  00002FCF  89 04/8B                                 mov     dword ptr [ebx+ecx*04h],eax
    6048    6048  0 +
    6049    6049  0 +                                             ; 345   memset(pinfo[j], 0, sizeof(VRAID_PHYSINFO_DATA));
    6050    6050  0 +  00002FD2  B9 00000011                              mov     ecx,011h
    6051    6051  0 +  00002FD7  33 D2                                    xor     edx,edx
    6052    6052  0 +  00002FD9  E8 00000000:E                            call    memset
    6053    6053  0 +
    6054    6054  0 +                                             ; 342     for( j = 0; j < pcnt; ++j )
    6055    6055  0 +  00002FDE  0F B7 FF                                 movzx   edi,di
    6056    6056  0 +  00002FE1  47                                       inc     edi
    6057    6057  0 +  00002FE2  66:3B FE                                 cmp     di,si
    6058    6058  0 +  00002FE5  72 D5                                    jb      @BLBL25
    6059    6059  0 +  00002FE7                                   @BLBL24:
    6060    6060  0 +
    6061    6061  0 +                                             ; 349     if( acnt = 0 )
    6062    6062  0 +  00002FE7  66:8B 5D [0C]                            mov     bx,[ebp+0ch];   acnt
    6063    6063  0 +  00002FEB  66:85 DB                                 test    bx,bx
    6064    6064  0 +  00002FEE  0F 84 0000317B:R                         je      @BLBL29
    6065    6065  0 +
    6066    6066  0 +                                             ; 353   PUCHAR          dummybuffer = new UCHAR[SECTOR_SIZE];
    6067    6067  0 +  00002FF4  B8 00000200                              mov     eax,0200h
    6068    6068  0 +  00002FF9  E8 00000000:E                            call    __vn__FUi
    6069    6069  0 +
    6070    6070  0 +                                             ; 355   for( retry = 0; retry < 3; ++retry )
    6071    6071  0 +  00002FFE  66:8B F3                                 mov     si,bx
    6072    6072  0 +  00003001  8B 5D [10]                               mov     ebx,[ebp+010h]; ahd
    6073    6073  0 +  00003004  8B 4D [EC]                               mov     ecx,[ebp-014h]; ainfo
    6074    6074  0 +
    6075    6075  0 +                                             ; 352   unsigned        flt_changes = 0;
    6076    6076  0 +  00003007  C7 45 [E8] 00000000                      mov     dword ptr [ebp-018h],0h;        flt_changes
    6077    6077  0 +
    6078    6078  0 +                                             ; 355   for( retry = 0; retry < 3; ++retry )
    6079    6079  0 +  0000300E  C7 45 [D4] 00000000                      mov     dword ptr [ebp-02ch],0h;        retry
    6080    6080  0 +
    6081    6081  0 +                                             ; 353   PUCHAR          dummybuffer = new UCHAR[SECTOR_SIZE];
    6082    6082  0 +  00003015  89 45 [D8]                               mov     [ebp-028h],eax; dummybuffer
    6083    6083  0 +
    6084    6084  0 +                                             ; 355   for( retry = 0; retry < 3; ++retry )
    6085    6085  0 +  00003018                                   @BLBL31:
    6086    6086  0 +
    6087    6087  0 +                                             ; 360       for( j = 0; j < acnt; ++j )


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  120
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6088    6088  0 +  00003018  66:85 F6                                 test    si,si
    6089    6089  0 +  0000301B  0F 86 00003043:R                         jbe     @BLBL32
    6090    6090  0 +  00003021  8B C1                                    mov     eax,ecx
    6091    6091  0 +  00003023  89 45 [EC]                               mov     [ebp-014h],eax; ainfo
    6092    6092  0 +  00003026  33 FF                                    xor     edi,edi
    6093    6093  0 +  00003028                                   @BLBL33:
    6094    6094  0 +
    6095    6095  0 +                                             ; 361           rc = DriverArrayinfo(ahd[j], ainfo[j]);
    6096    6096  0 +  00003028  0F B7 C7                                 movzx   eax,di
    6097    6097  0 +  0000302B  8B 14/81                                 mov     edx,dword ptr [ecx+eax*04h]
    6098    6098  0 +  0000302E  66:8B 04/43                              mov     ax,word ptr [ebx+eax*02h]
    6099    6099  0 +  00003032  E8 00000000:E                            call    DriverArrayinfo__FUsP21_VRAID_ARRAYINFO_DATA
    6100    6100  0 +
    6101    6101  0 +                                             ; 360       for( j = 0; j < acnt; ++j )
    6102    6102  0 +  00003037  0F B7 FF                                 movzx   edi,di
    6103    6103  0 +  0000303A  47                                       inc     edi
    6104    6104  0 +
    6105    6105  0 +                                             ; 361           rc = DriverArrayinfo(ahd[j], ainfo[j]);
    6106    6106  0 +  0000303B  8B 4D [EC]                               mov     ecx,[ebp-014h]; ainfo
    6107    6107  0 +
    6108    6108  0 +                                             ; 360       for( j = 0; j < acnt; ++j )
    6109    6109  0 +  0000303E  66:3B FE                                 cmp     di,si
    6110    6110  0 +  00003041  72 E5                                    jb      @BLBL33
    6111    6111  0 +  00003043                                   @BLBL32:
    6112    6112  0 +
    6113    6113  0 +                                             ; 363       rc = newdev->read(0, 1, dummybuffer);
    6114    6114  0 +  00003043  FF 75 [D8]                               push    dword ptr [ebp-028h];   dummybuffer
    6115    6115  0 +  00003046  8B 45 [08]                               mov     eax,[ebp+08h];  newdev
    6116    6116  0 +
    6117    6117  0 +                                             ; 360       for( j = 0; j < acnt; ++j )
    6118    6118  0 +  00003049  89 75 [A0]                               mov     [ebp-060h],esi; @CBE141
    6119    6119  0 +
    6120    6120  0 +                                             ; 363       rc = newdev->read(0, 1, dummybuffer);
    6121    6121  0 +  0000304C  8B 38                                    mov     edi,[eax]
    6122    6122  0 +  0000304E  83 EC 0C                                 sub     esp,0ch
    6123    6123  0 +  00003051  8B 77 [1C]                               mov     esi,[edi+01ch]
    6124    6124  0 +  00003054  03 C6                                    add     eax,esi
    6125    6125  0 +  00003056  8B 75 [A0]                               mov     esi,[ebp-060h]; @CBE141
    6126    6126  0 +  00003059  B9 00000001                              mov     ecx,01h
    6127    6127  0 +  0000305E  33 D2                                    xor     edx,edx
    6128    6128  0 +  00003060  FF 57 [18]                               call    dword ptr [edi+018h]
    6129    6129  0 +  00003063  8B 4D [EC]                               mov     ecx,[ebp-014h]; ainfo
    6130    6130  0 +  00003066  83 C4 10                                 add     esp,010h
    6131    6131  0 +
    6132    6132  0 +                                             ; 365       for( j = 0; j < acnt; ++j )
    6133    6133  0 +  00003069  66:85 F6                                 test    si,si
    6134    6134  0 +  0000306C  0F 86 00003132:R                         jbe     @BLBL37
    6135    6135  0 +  00003072  33 FF                                    xor     edi,edi
    6136    6136  0 +  00003074  66:89 75 [0C]                            mov     [ebp+0ch],si;   acnt
    6137    6137  0 +  00003078                                   @BLBL38:
    6138    6138  0 +
    6139    6139  0 +                                             ; 367           Verbose(3, "DrvScan", "Testing array %u", j);
    6140    6140  0 +  00003078  B8 00000000:R                            mov     eax,offset FLAT:@CBE1
    6141    6141  0 +  0000307D  0F B7 F7                                 movzx   esi,di


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  121
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6142    6142  0 +  00003080  56                                       push    esi
    6143    6143  0 +  00003081  8B D0                                    mov     edx,eax
    6144    6144  0 +  00003083  83 EC 0C                                 sub     esp,0ch
    6145    6145  0 +  00003086  B9 00000008:R                            mov     ecx,offset FLAT:@CBE2
    6146    6146  0 +  0000308B  B8 00000003                              mov     eax,03h
    6147    6147  0 +  00003090  E8 00000000:E                            call    Verbose
    6148    6148  0 +
    6149    6149  0 +                                             ; 368           rc = DriverArrayinfo(ahd[j], &this_info);
    6150    6150  0 +  00003095  66:8B 04/73                              mov     ax,word ptr [ebx+esi*02h]
    6151    6151  0 +  00003099  8D 55 [B8]                               lea     edx,[ebp-048h]; this_info
    6152    6152  0 +  0000309C  E8 00000000:E                            call    DriverArrayinfo__FUsP21_VRAID_ARRAYINFO_DATA
    6153    6153  0 +  000030A1  8B 4D [EC]                               mov     ecx,[ebp-014h]; ainfo
    6154    6154  0 +  000030A4  96                                       xchg    esi,eax
    6155    6155  0 +  000030A5  83 C4 10                                 add     esp,010h
    6156    6156  0 +
    6157    6157  0 +                                             ; 369           if( rc = 0 )
    6158    6158  0 +  000030A8  85 F6                                    test    esi,esi
    6159    6159  0 +  000030AA  89 75 [A0]                               mov     [ebp-060h],esi; @CBE141
    6160    6160  0 +  000030AD  8B 75 [0C]                               mov     esi,[ebp+0ch];  acnt
    6161    6161  0 +
    6162    6162  0 +                                             ; 368           rc = DriverArrayinfo(ahd[j], &this_info);
    6163    6163  0 +  000030B0  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    6164    6164  0 +
    6165    6165  0 +                                             ; 369           if( rc = 0 )
    6166    6166  0 +  000030B5  0F 84 000030DD:R                         je      @BLBL39
    6167    6167  0 +  000030BB  8B 4D [A0]                               mov     ecx,[ebp-060h]; @CBE141
    6168    6168  0 +
    6169    6169  0 +                                             ; 370               Verbose(1, "DrvScan", "Array Info %u - rc %lu", j, rc);
    6170    6170  0 +  000030BE  51                                       push    ecx
    6171    6171  0 +  000030BF  B9 0000001C:R                            mov     ecx,offset FLAT:@CBE3
    6172    6172  0 +  000030C4  50                                       push    eax
    6173    6173  0 +  000030C5  B8 00000001                              mov     eax,01h
    6174    6174  0 +  000030CA  83 EC 0C                                 sub     esp,0ch
    6175    6175  0 +  000030CD  E8 00000000:E                            call    Verbose
    6176    6176  0 +  000030D2  8B 4D [EC]                               mov     ecx,[ebp-014h]; ainfo
    6177    6177  0 +  000030D5  83 C4 14                                 add     esp,014h
    6178    6178  0 +  000030D8  EB 4B 90 90 90                           jmp     @BLBL42
    6179    6179  0 +  000030DD                                   @BLBL39:
    6180    6180  0 +
    6181    6181  0 +                                             ; 371           else if( this_info.reqcnt > ainfo[j]->reqcnt )
    6182    6182  0 +  000030DD  0F B7 D7                                 movzx   edx,di
    6183    6183  0 +  000030E0  8B 04/91                                 mov     eax,dword ptr [ecx+edx*04h]
    6184    6184  0 +  000030E3  89 55 [A0]                               mov     [ebp-060h],edx; @CBE141
    6185    6185  0 +  000030E6  66:8B 55 [C0]                            mov     dx,[ebp-040h];  this_info
    6186    6186  0 +  000030EA  66:39 50 [08]                            cmp     [eax+08h],dx
    6187    6187  0 +  000030EE  0F 83 00003125:R                         jae     @BLBL42
    6188    6188  0 +
    6189    6189  0 +                                             ; 373               Verbose(2, "DrvScan",
    6190    6190  0 +  000030F4  8B 45 [08]                               mov     eax,[ebp+08h];  newdev
    6191    6191  0 +  000030F7  E8 00000000:E                            call    queryIndex__8VOS2DiskFv
    6192    6192  0 +  000030FC  50                                       push    eax
    6193    6193  0 +  000030FD  8B 55 [A0]                               mov     edx,[ebp-060h]; @CBE141
    6194    6194  0 +  00003100  52                                       push    edx
    6195    6195  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  122
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6196    6196  0 +                                             ; 376               ++flt_changes;
    6197    6197  0 +  00003101  FF 45 [E8]                               inc     dword ptr [ebp-018h];   flt_changes
    6198    6198  0 +
    6199    6199  0 +                                             ; 377               accessed_array = j;
    6200    6200  0 +  00003104  66:89 7D [C6]                            mov     [ebp-03ah],di;  accessed_array
    6201    6201  0 +
    6202    6202  0 +                                             ; 373               Verbose(2, "DrvScan",
    6203    6203  0 +  00003108  83 EC 0C                                 sub     esp,0ch
    6204    6204  0 +  0000310B  B9 00000034:R                            mov     ecx,offset FLAT:@CBE4
    6205    6205  0 +  00003110  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    6206    6206  0 +  00003115  B8 00000002                              mov     eax,02h
    6207    6207  0 +  0000311A  E8 00000000:E                            call    Verbose
    6208    6208  0 +  0000311F  8B 4D [EC]                               mov     ecx,[ebp-014h]; ainfo
    6209    6209  0 +  00003122  83 C4 14                                 add     esp,014h
    6210    6210  0 +
    6211    6211  0 +                                             ; 379       }
    6212    6212  0 +  00003125                                   @BLBL42:
    6213    6213  0 +
    6214    6214  0 +                                             ; 365       for( j = 0; j < acnt; ++j )
    6215    6215  0 +  00003125  0F B7 FF                                 movzx   edi,di
    6216    6216  0 +  00003128  47                                       inc     edi
    6217    6217  0 +  00003129  66:3B FE                                 cmp     di,si
    6218    6218  0 +  0000312C  0F 82 00003078:R                         jb      @BLBL38
    6219    6219  0 +  00003132                                   @BLBL37:
    6220    6220  0 +
    6221    6221  0 +                                             ; 380       if( flt_changes == 1 )
    6222    6222  0 +  00003132  83 7D [E8] 01                            cmp     dword ptr [ebp-018h],01h;       flt_changes
    6223    6223  0 +  00003136  0F 85 00003148:R                         jne     @BLBL45
    6224    6224  0 +
    6225    6225  0 +                                             ; 382           isarray = TRUE;
    6226    6226  0 +  0000313C  C7 45 [F0] 00000001                      mov     dword ptr [ebp-010h],01h;       isarray
    6227    6227  0 +
    6228    6228  0 +                                             ; 384           break;
    6229    6229  0 +  00003143  EB 2E 90 90 90                           jmp     @BLBL30
    6230    6230  0 +  00003148                                   @BLBL45:
    6231    6231  0 +
    6232    6232  0 +                                             ; 386       else if( flt_changes == 0 )
    6233    6233  0 +  00003148  83 7D [E8] 00                            cmp     dword ptr [ebp-018h],0h;        flt_changes
    6234    6234  0 +  0000314C  0F 84 00003173:R                         je      @BLBL30
    6235    6235  0 +
    6236    6236  0 +                                             ; 389       DosSleep(1000);             /* wait for peace :-) */
    6237    6237  0 +  00003152  68 000003E8                              push    03e8h
    6238    6238  0 +
    6239    6239  0 +                                             ; 386       else if( flt_changes == 0 )
    6240    6240  0 +  00003157  8B F9                                    mov     edi,ecx
    6241    6241  0 +
    6242    6242  0 +                                             ; 389       DosSleep(1000);             /* wait for peace :-) */
    6243    6243  0 +  00003159  E8 00000000:E                            call    DosSleep
    6244    6244  0 +  0000315E  83 C4 04                                 add     esp,04h
    6245    6245  0 +
    6246    6246  0 +                                             ; 355   for( retry = 0; retry < 3; ++retry )
    6247    6247  0 +  00003161  8B 55 [D4]                               mov     edx,[ebp-02ch]; retry
    6248    6248  0 +  00003164  42                                       inc     edx
    6249    6249  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  123
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6250    6250  0 +                                             ; 389       DosSleep(1000);             /* wait for peace :-) */
    6251    6251  0 +  00003165  8B CF                                    mov     ecx,edi
    6252    6252  0 +
    6253    6253  0 +                                             ; 355   for( retry = 0; retry < 3; ++retry )
    6254    6254  0 +  00003167  89 55 [D4]                               mov     [ebp-02ch],edx; retry
    6255    6255  0 +  0000316A  83 FA 03                                 cmp     edx,03h
    6256    6256  0 +  0000316D  0F 82 00003018:R                         jb      @BLBL31
    6257    6257  0 +  00003173                                   @BLBL30:
    6258    6258  0 +
    6259    6259  0 +                                             ; 391   delete[] dummybuffer;
    6260    6260  0 +  00003173  8B 45 [D8]                               mov     eax,[ebp-028h]; dummybuffer
    6261    6261  0 +  00003176  E8 00000000:E                            call    __vd__FPv
    6262    6262  0 +
    6263    6263  0 +                                             ; 392     }
    6264    6264  0 +  0000317B                                   @BLBL29:
    6265    6265  0 +
    6266    6266  0 +                                             ; 394     if( isarray )
    6267    6267  0 +  0000317B  83 7D [F0] 00                            cmp     dword ptr [ebp-010h],0h;        isarray
    6268    6268  0 +  0000317F  0F 85 00003309:R                         jne     @BLBL51
    6269    6269  0 +
    6270    6270  0 +                                             ; 400   for( retry = 0; retry < 3; ++retry )
    6271    6271  0 +  00003185  8B 5D [18]                               mov     ebx,[ebp+018h]; phd
    6272    6272  0 +
    6273    6273  0 +                                             ; 398   PUCHAR          dummybuffer = new UCHAR[SECTOR_SIZE];
    6274    6274  0 +  00003188  B8 00000200                              mov     eax,0200h
    6275    6275  0 +  0000318D  E8 00000000:E                            call    __vn__FUi
    6276    6276  0 +
    6277    6277  0 +                                             ; 400   for( retry = 0; retry < 3; ++retry )
    6278    6278  0 +  00003192  66:8B 75 [14]                            mov     si,[ebp+014h];  pcnt
    6279    6279  0 +  00003196  8B 4D [E0]                               mov     ecx,[ebp-020h]; pinfo
    6280    6280  0 +
    6281    6281  0 +                                             ; 397   unsigned        flt_changes = 0;
    6282    6282  0 +  00003199  C7 45 [E4] 00000000                      mov     dword ptr [ebp-01ch],0h;        flt_changes
    6283    6283  0 +
    6284    6284  0 +                                             ; 400   for( retry = 0; retry < 3; ++retry )
    6285    6285  0 +  000031A0  C7 45 [CC] 00000000                      mov     dword ptr [ebp-034h],0h;        retry
    6286    6286  0 +
    6287    6287  0 +                                             ; 398   PUCHAR          dummybuffer = new UCHAR[SECTOR_SIZE];
    6288    6288  0 +  000031A7  89 45 [D0]                               mov     [ebp-030h],eax; dummybuffer
    6289    6289  0 +
    6290    6290  0 +                                             ; 400   for( retry = 0; retry < 3; ++retry )
    6291    6291  0 +  000031AA                                   @BLBL53:
    6292    6292  0 +
    6293    6293  0 +                                             ; 405       for( j = 0; j < pcnt; ++j )
    6294    6294  0 +  000031AA  66:85 F6                                 test    si,si
    6295    6295  0 +  000031AD  0F 86 000031D5:R                         jbe     @BLBL54
    6296    6296  0 +  000031B3  8B C1                                    mov     eax,ecx
    6297    6297  0 +  000031B5  89 45 [E0]                               mov     [ebp-020h],eax; pinfo
    6298    6298  0 +  000031B8  33 FF                                    xor     edi,edi
    6299    6299  0 +  000031BA                                   @BLBL55:
    6300    6300  0 +
    6301    6301  0 +                                             ; 406           rc = DriverPhysinfo(phd[j], pinfo[j]);
    6302    6302  0 +  000031BA  0F B7 C7                                 movzx   eax,di
    6303    6303  0 +  000031BD  8B 14/81                                 mov     edx,dword ptr [ecx+eax*04h]


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  124
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6304    6304  0 +  000031C0  66:8B 04/43                              mov     ax,word ptr [ebx+eax*02h]
    6305    6305  0 +  000031C4  E8 00000000:E                            call    DriverPhysinfo__FUsP20_VRAID_PHYSINFO_DATA
    6306    6306  0 +
    6307    6307  0 +                                             ; 405       for( j = 0; j < pcnt; ++j )
    6308    6308  0 +  000031C9  0F B7 FF                                 movzx   edi,di
    6309    6309  0 +  000031CC  47                                       inc     edi
    6310    6310  0 +
    6311    6311  0 +                                             ; 406           rc = DriverPhysinfo(phd[j], pinfo[j]);
    6312    6312  0 +  000031CD  8B 4D [E0]                               mov     ecx,[ebp-020h]; pinfo
    6313    6313  0 +
    6314    6314  0 +                                             ; 405       for( j = 0; j < pcnt; ++j )
    6315    6315  0 +  000031D0  66:3B FE                                 cmp     di,si
    6316    6316  0 +  000031D3  72 E5                                    jb      @BLBL55
    6317    6317  0 +  000031D5                                   @BLBL54:
    6318    6318  0 +
    6319    6319  0 +                                             ; 408       rc = newdev->read(0, 1, dummybuffer);
    6320    6320  0 +  000031D5  FF 75 [D0]                               push    dword ptr [ebp-030h];   dummybuffer
    6321    6321  0 +  000031D8  8B 45 [08]                               mov     eax,[ebp+08h];  newdev
    6322    6322  0 +
    6323    6323  0 +                                             ; 405       for( j = 0; j < pcnt; ++j )
    6324    6324  0 +  000031DB  89 75 [A0]                               mov     [ebp-060h],esi; @CBE141
    6325    6325  0 +
    6326    6326  0 +                                             ; 408       rc = newdev->read(0, 1, dummybuffer);
    6327    6327  0 +  000031DE  8B 38                                    mov     edi,[eax]
    6328    6328  0 +  000031E0  83 EC 0C                                 sub     esp,0ch
    6329    6329  0 +  000031E3  8B 77 [1C]                               mov     esi,[edi+01ch]
    6330    6330  0 +  000031E6  03 C6                                    add     eax,esi
    6331    6331  0 +  000031E8  8B 75 [A0]                               mov     esi,[ebp-060h]; @CBE141
    6332    6332  0 +  000031EB  B9 00000001                              mov     ecx,01h
    6333    6333  0 +  000031F0  33 D2                                    xor     edx,edx
    6334    6334  0 +  000031F2  FF 57 [18]                               call    dword ptr [edi+018h]
    6335    6335  0 +  000031F5  8B 4D [E0]                               mov     ecx,[ebp-020h]; pinfo
    6336    6336  0 +  000031F8  83 C4 10                                 add     esp,010h
    6337    6337  0 +
    6338    6338  0 +                                             ; 410       for( j = 0; j < pcnt; ++j )
    6339    6339  0 +  000031FB  66:85 F6                                 test    si,si
    6340    6340  0 +  000031FE  0F 86 000032C0:R                         jbe     @BLBL59
    6341    6341  0 +  00003204  33 FF                                    xor     edi,edi
    6342    6342  0 +  00003206  66:89 75 [14]                            mov     [ebp+014h],si;  pcnt
    6343    6343  0 +  0000320A                                   @BLBL60:
    6344    6344  0 +
    6345    6345  0 +                                             ; 412           Verbose(3, "DrvScan", "Testing Physdev %u", j);
    6346    6346  0 +  0000320A  B8 00000000:R                            mov     eax,offset FLAT:@CBE1
    6347    6347  0 +  0000320F  0F B7 F7                                 movzx   esi,di
    6348    6348  0 +  00003212  56                                       push    esi
    6349    6349  0 +  00003213  8B D0                                    mov     edx,eax
    6350    6350  0 +  00003215  83 EC 0C                                 sub     esp,0ch
    6351    6351  0 +  00003218  B9 00000064:R                            mov     ecx,offset FLAT:@CBE5
    6352    6352  0 +  0000321D  B8 00000003                              mov     eax,03h
    6353    6353  0 +  00003222  E8 00000000:E                            call    Verbose
    6354    6354  0 +
    6355    6355  0 +                                             ; 413           rc = DriverPhysinfo(phd[j], &this_info);
    6356    6356  0 +  00003227  66:8B 04/73                              mov     ax,word ptr [ebx+esi*02h]
    6357    6357  0 +  0000322B  8D 55 [A4]                               lea     edx,[ebp-05ch]; this_info


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  125
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6358    6358  0 +  0000322E  E8 00000000:E                            call    DriverPhysinfo__FUsP20_VRAID_PHYSINFO_DATA
    6359    6359  0 +  00003233  8B 4D [E0]                               mov     ecx,[ebp-020h]; pinfo
    6360    6360  0 +  00003236  96                                       xchg    esi,eax
    6361    6361  0 +  00003237  83 C4 10                                 add     esp,010h
    6362    6362  0 +
    6363    6363  0 +                                             ; 414           if( rc = 0 )
    6364    6364  0 +  0000323A  85 F6                                    test    esi,esi
    6365    6365  0 +  0000323C  89 75 [A0]                               mov     [ebp-060h],esi; @CBE141
    6366    6366  0 +  0000323F  8B 75 [14]                               mov     esi,[ebp+014h]; pcnt
    6367    6367  0 +
    6368    6368  0 +                                             ; 413           rc = DriverPhysinfo(phd[j], &this_info);
    6369    6369  0 +  00003242  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    6370    6370  0 +
    6371    6371  0 +                                             ; 414           if( rc = 0 )
    6372    6372  0 +  00003247  0F 84 0000326F:R                         je      @BLBL61
    6373    6373  0 +  0000324D  8B 4D [A0]                               mov     ecx,[ebp-060h]; @CBE141
    6374    6374  0 +
    6375    6375  0 +                                             ; 415               Verbose(1, "DrvScan", "Physdev Info %u - rc %lu", j, rc);
    6376    6376  0 +  00003250  51                                       push    ecx
    6377    6377  0 +  00003251  B9 00000078:R                            mov     ecx,offset FLAT:@CBE6
    6378    6378  0 +  00003256  50                                       push    eax
    6379    6379  0 +  00003257  B8 00000001                              mov     eax,01h
    6380    6380  0 +  0000325C  83 EC 0C                                 sub     esp,0ch
    6381    6381  0 +  0000325F  E8 00000000:E                            call    Verbose
    6382    6382  0 +  00003264  8B 4D [E0]                               mov     ecx,[ebp-020h]; pinfo
    6383    6383  0 +  00003267  83 C4 14                                 add     esp,014h
    6384    6384  0 +  0000326A  EB 47 90 90 90                           jmp     @BLBL64
    6385    6385  0 +  0000326F                                   @BLBL61:
    6386    6386  0 +
    6387    6387  0 +                                             ; 416           else if( this_info.reqcnt > pinfo[j]->reqcnt )
    6388    6388  0 +  0000326F  0F B7 D7                                 movzx   edx,di
    6389    6389  0 +  00003272  8B 04/91                                 mov     eax,dword ptr [ecx+edx*04h]
    6390    6390  0 +  00003275  89 55 [A0]                               mov     [ebp-060h],edx; @CBE141
    6391    6391  0 +  00003278  66:8B 55 [B1]                            mov     dx,[ebp-04fh];  this_info
    6392    6392  0 +  0000327C  66:39 50 [0D]                            cmp     [eax+0dh],dx
    6393    6393  0 +  00003280  0F 83 000032B3:R                         jae     @BLBL64
    6394    6394  0 +
    6395    6395  0 +                                             ; 418               Verbose(2, "DrvScan",
    6396    6396  0 +  00003286  8B 45 [08]                               mov     eax,[ebp+08h];  newdev
    6397    6397  0 +  00003289  E8 00000000:E                            call    queryIndex__8VOS2DiskFv
    6398    6398  0 +  0000328E  50                                       push    eax
    6399    6399  0 +  0000328F  8B 55 [A0]                               mov     edx,[ebp-060h]; @CBE141
    6400    6400  0 +  00003292  52                                       push    edx
    6401    6401  0 +
    6402    6402  0 +                                             ; 421               ++flt_changes;
    6403    6403  0 +  00003293  FF 45 [E4]                               inc     dword ptr [ebp-01ch];   flt_changes
    6404    6404  0 +
    6405    6405  0 +                                             ; 418               Verbose(2, "DrvScan",
    6406    6406  0 +  00003296  83 EC 0C                                 sub     esp,0ch
    6407    6407  0 +  00003299  B9 00000094:R                            mov     ecx,offset FLAT:@CBE7
    6408    6408  0 +  0000329E  BA 00000000:R                            mov     edx,offset FLAT:@CBE1
    6409    6409  0 +  000032A3  B8 00000002                              mov     eax,02h
    6410    6410  0 +  000032A8  E8 00000000:E                            call    Verbose
    6411    6411  0 +  000032AD  8B 4D [E0]                               mov     ecx,[ebp-020h]; pinfo


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  126
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6412    6412  0 +  000032B0  83 C4 14                                 add     esp,014h
    6413    6413  0 +
    6414    6414  0 +                                             ; 424       }
    6415    6415  0 +  000032B3                                   @BLBL64:
    6416    6416  0 +
    6417    6417  0 +                                             ; 410       for( j = 0; j < pcnt; ++j )
    6418    6418  0 +  000032B3  0F B7 FF                                 movzx   edi,di
    6419    6419  0 +  000032B6  47                                       inc     edi
    6420    6420  0 +  000032B7  66:3B FE                                 cmp     di,si
    6421    6421  0 +  000032BA  0F 82 0000320A:R                         jb      @BLBL60
    6422    6422  0 +  000032C0                                   @BLBL59:
    6423    6423  0 +
    6424    6424  0 +                                             ; 425       if( flt_changes == 1 )
    6425    6425  0 +  000032C0  83 7D [E4] 01                            cmp     dword ptr [ebp-01ch],01h;       flt_changes
    6426    6426  0 +  000032C4  0F 85 000032D6:R                         jne     @BLBL67
    6427    6427  0 +
    6428    6428  0 +                                             ; 427           isphys = TRUE;
    6429    6429  0 +  000032CA  C7 45 [DC] 00000001                      mov     dword ptr [ebp-024h],01h;       isphys
    6430    6430  0 +
    6431    6431  0 +                                             ; 428           break;
    6432    6432  0 +  000032D1  EB 2E 90 90 90                           jmp     @BLBL52
    6433    6433  0 +  000032D6                                   @BLBL67:
    6434    6434  0 +
    6435    6435  0 +                                             ; 430       else if( flt_changes == 0 )
    6436    6436  0 +  000032D6  83 7D [E4] 00                            cmp     dword ptr [ebp-01ch],0h;        flt_changes
    6437    6437  0 +  000032DA  0F 84 00003301:R                         je      @BLBL52
    6438    6438  0 +
    6439    6439  0 +                                             ; 433       DosSleep(1000);             /* wait for peace :-) */
    6440    6440  0 +  000032E0  68 000003E8                              push    03e8h
    6441    6441  0 +
    6442    6442  0 +                                             ; 430       else if( flt_changes == 0 )
    6443    6443  0 +  000032E5  8B F9                                    mov     edi,ecx
    6444    6444  0 +
    6445    6445  0 +                                             ; 433       DosSleep(1000);             /* wait for peace :-) */
    6446    6446  0 +  000032E7  E8 00000000:E                            call    DosSleep
    6447    6447  0 +  000032EC  83 C4 04                                 add     esp,04h
    6448    6448  0 +
    6449    6449  0 +                                             ; 400   for( retry = 0; retry < 3; ++retry )
    6450    6450  0 +  000032EF  8B 55 [CC]                               mov     edx,[ebp-034h]; retry
    6451    6451  0 +  000032F2  42                                       inc     edx
    6452    6452  0 +
    6453    6453  0 +                                             ; 433       DosSleep(1000);             /* wait for peace :-) */
    6454    6454  0 +  000032F3  8B CF                                    mov     ecx,edi
    6455    6455  0 +
    6456    6456  0 +                                             ; 400   for( retry = 0; retry < 3; ++retry )
    6457    6457  0 +  000032F5  89 55 [CC]                               mov     [ebp-034h],edx; retry
    6458    6458  0 +  000032F8  83 FA 03                                 cmp     edx,03h
    6459    6459  0 +  000032FB  0F 82 000031AA:R                         jb      @BLBL53
    6460    6460  0 +  00003301                                   @BLBL52:
    6461    6461  0 +
    6462    6462  0 +                                             ; 435   delete[] dummybuffer;
    6463    6463  0 +  00003301  8B 45 [D0]                               mov     eax,[ebp-030h]; dummybuffer
    6464    6464  0 +  00003304  E8 00000000:E                            call    __vd__FPv
    6465    6465  0 +


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  127
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6466    6466  0 +                                             ; 436     }
    6467    6467  0 +  00003309                                   @BLBL51:
    6468    6468  0 +
    6469    6469  0 +                                             ; 438     if( isarray  ||  isphys )
    6470    6470  0 +  00003309  83 7D [F0] 00                            cmp     dword ptr [ebp-010h],0h;        isarray
    6471    6471  0 +  0000330D  0F 85 0000331D:R                         jne     @BLBL73
    6472    6472  0 +  00003313  83 7D [DC] 00                            cmp     dword ptr [ebp-024h],0h;        isphys
    6473    6473  0 +  00003317  0F 84 0000335A:R                         je      @BLBL74
    6474    6474  0 +  0000331D                                   @BLBL73:
    6475    6475  0 +
    6476    6476  0 +                                             ; 440   if( isarray )
    6477    6477  0 +  0000331D  83 7D [F0] 00                            cmp     dword ptr [ebp-010h],0h;        isarray
    6478    6478  0 +  00003321  0F 84 00003350:R                         je      @BLBL75
    6479    6479  0 +
    6480    6480  0 +                                             ; 441       SetArrayInfo(ainfo[accessed_array]->id,
    6481    6481  0 +  00003327  8B 5D [08]                               mov     ebx,[ebp+08h];  newdev
    6482    6482  0 +  0000332A  8B 0B                                    mov     ecx,[ebx]
    6483    6483  0 +  0000332C  8B 41 [0C]                               mov     eax,[ecx+0ch]
    6484    6484  0 +  0000332F  03 C3                                    add     eax,ebx
    6485    6485  0 +  00003331  FF 51 [08]                               call    dword ptr [ecx+08h]
    6486    6486  0 +  00003334  93                                       xchg    ebx,eax
    6487    6487  0 +  00003335  E8 00000000:E                            call    queryIndex__8VOS2DiskFv
    6488    6488  0 +  0000333A  8B D0                                    mov     edx,eax
    6489    6489  0 +  0000333C  8B 45 [EC]                               mov     eax,[ebp-014h]; ainfo
    6490    6490  0 +  0000333F  0F B7 7D [C6]                            movzx   edi,word ptr [ebp-03ah];        accessed_array
    6491    6491  0 +  00003343  8B 04/B8                                 mov     eax,dword ptr [eax+edi*04h]
    6492    6492  0 +  00003346  8B CB                                    mov     ecx,ebx
    6493    6493  0 +  00003348  83 C0 02                                 add     eax,02h
    6494    6494  0 +  0000334B  E8 00003420:R                            call    SetArrayInfo__FPCUcCUlCUc
    6495    6495  0 +
    6496    6496  0 +                                             ; 442                    newdev->queryIndex(), newdev->isWritable());
    6497    6497  0 +  00003350                                   @BLBL75:
    6498    6498  0 +
    6499    6499  0 +                                             ; 445   result = TRUE;                          /* accessable through VRAID.FLT */
    6500    6500  0 +  00003350  B8 00000001                              mov     eax,01h
    6501    6501  0 +
    6502    6502  0 +                                             ; 446     }
    6503    6503  0 +  00003355  EB 05 90 90 90                           jmp     @BLBL76
    6504    6504  0 +  0000335A                                   @BLBL74:
    6505    6505  0 +
    6506    6506  0 +                                             ; 449   result = FALSE;
    6507    6507  0 +  0000335A  33 C0                                    xor     eax,eax
    6508    6508  0 +
    6509    6509  0 +                                             ; 450     }
    6510    6510  0 +  0000335C                                   @BLBL76:
    6511    6511  0 +  0000335C  89 45 [C8]                               mov     [ebp-038h],eax; result
    6512    6512  0 +
    6513    6513  0 +                                             ; 455     for( j = 0; j < acnt; ++j )
    6514    6514  0 +  0000335F  66:8B 75 [0C]                            mov     si,[ebp+0ch];   acnt
    6515    6515  0 +  00003363  66:85 F6                                 test    si,si
    6516    6516  0 +  00003366  0F 86 00003385:R                         jbe     @BLBL77
    6517    6517  0 +  0000336C  8B 5D [EC]                               mov     ebx,[ebp-014h]; ainfo
    6518    6518  0 +  0000336F  33 FF                                    xor     edi,edi
    6519    6519  0 +  00003371                                   @BLBL78:


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  128
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6520    6520  0 +
    6521    6521  0 +                                             ; 456   delete ainfo[j];
    6522    6522  0 +  00003371  0F B7 C7                                 movzx   eax,di
    6523    6523  0 +  00003374  8B 04/83                                 mov     eax,dword ptr [ebx+eax*04h]
    6524    6524  0 +  00003377  E8 00000000:E                            call    __dl__FPv
    6525    6525  0 +
    6526    6526  0 +                                             ; 455     for( j = 0; j < acnt; ++j )
    6527    6527  0 +  0000337C  0F B7 FF                                 movzx   edi,di
    6528    6528  0 +  0000337F  47                                       inc     edi
    6529    6529  0 +  00003380  66:3B FE                                 cmp     di,si
    6530    6530  0 +  00003383  72 EC                                    jb      @BLBL78
    6531    6531  0 +  00003385                                   @BLBL77:
    6532    6532  0 +
    6533    6533  0 +                                             ; 457     delete[] ainfo;
    6534    6534  0 +  00003385  8B 45 [EC]                               mov     eax,[ebp-014h]; ainfo
    6535    6535  0 +  00003388  E8 00000000:E                            call    __vd__FPv
    6536    6536  0 +
    6537    6537  0 +                                             ; 458     for( j = 0; j < pcnt; ++j )
    6538    6538  0 +  0000338D  66:8B 75 [14]                            mov     si,[ebp+014h];  pcnt
    6539    6539  0 +  00003391  66:85 F6                                 test    si,si
    6540    6540  0 +  00003394  0F 86 000033B3:R                         jbe     @BLBL82
    6541    6541  0 +  0000339A  8B 5D [E0]                               mov     ebx,[ebp-020h]; pinfo
    6542    6542  0 +  0000339D  33 FF                                    xor     edi,edi
    6543    6543  0 +  0000339F                                   @BLBL83:
    6544    6544  0 +
    6545    6545  0 +                                             ; 459   delete pinfo[j];
    6546    6546  0 +  0000339F  0F B7 C7                                 movzx   eax,di
    6547    6547  0 +  000033A2  8B 04/83                                 mov     eax,dword ptr [ebx+eax*04h]
    6548    6548  0 +  000033A5  E8 00000000:E                            call    __dl__FPv
    6549    6549  0 +
    6550    6550  0 +                                             ; 458     for( j = 0; j < pcnt; ++j )
    6551    6551  0 +  000033AA  0F B7 FF                                 movzx   edi,di
    6552    6552  0 +  000033AD  47                                       inc     edi
    6553    6553  0 +  000033AE  66:3B FE                                 cmp     di,si
    6554    6554  0 +  000033B1  72 EC                                    jb      @BLBL83
    6555    6555  0 +  000033B3                                   @BLBL82:
    6556    6556  0 +
    6557    6557  0 +                                             ; 460     delete[] pinfo;
    6558    6558  0 +  000033B3  8B 45 [E0]                               mov     eax,[ebp-020h]; pinfo
    6559    6559  0 +  000033B6  E8 00000000:E                            call    __vd__FPv
    6560    6560  0 +
    6561    6561  0 +                                             ; 462     return result;
    6562    6562  0 +  000033BB  8B 45 [C8]                               mov     eax,[ebp-038h]; result
    6563    6563  0 +  000033BE  83 C4 60                                 add     esp,060h
    6564    6564  0 +  000033C1  5E                                       pop     esi
    6565    6565  0 +  000033C2  5F                                       pop     edi
    6566    6566  0 +  000033C3  5B                                       pop     ebx
    6567    6567  0 +  000033C4  5D                                       pop     ebp
    6568    6568  0 +  000033C5  C3                                       ret
    6569    6569  0 +  000033C6                                   IsProvidedByFlt__FCP8VOS2DiskUsPUsT2T3  endp
    6570    6570  0 +
    6571    6571  0 +                                             ; 282 PRIVATE struct _OS2DEVID *
    6572    6572  0 +
    6573    6573  0 +  000033C6                                   QueryArrayInfo__FCPA6_CUc       proc


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  129
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6574    6574  0 +  000033C6  53                                       push    ebx
    6575    6575  0 +
    6576    6576  0 +                                             ; 287     for( i = 0; i < MAXDRIVES; ++i )
    6577    6577  0 +  000033C7  8B D8                                    mov     ebx,eax
    6578    6578  0 +
    6579    6579  0 +                                             ; 282 PRIVATE struct _OS2DEVID *
    6580    6580  0 +  000033C9  57                                       push    edi
    6581    6581  0 +
    6582    6582  0 +                                             ; 287     for( i = 0; i < MAXDRIVES; ++i )
    6583    6583  0 +  000033CA  33 FF                                    xor     edi,edi
    6584    6584  0 +
    6585    6585  0 +                                             ; 282 PRIVATE struct _OS2DEVID *
    6586    6586  0 +  000033CC  56                                       push    esi
    6587    6587  0 +
    6588    6588  0 +                                             ; 287     for( i = 0; i < MAXDRIVES; ++i )
    6589    6589  0 +  000033CD  33 F6                                    xor     esi,esi
    6590    6590  0 +
    6591    6591  0 +                                             ; 282 PRIVATE struct _OS2DEVID *
    6592    6592  0 +  000033CF  83 EC 10                                 sub     esp,010h
    6593    6593  0 +
    6594    6594  0 +                                             ; 287     for( i = 0; i < MAXDRIVES; ++i )
    6595    6595  0 +  000033D2  89 44/24 [20]                            mov     [esp+020h],eax; array_devid
    6596    6596  0 +  000033D6                                   @BLBL12:
    6597    6597  0 +
    6598    6598  0 +                                             ; 288   if( ahsOs2Devid[i].fl = 0
    6599    6599  0 +  000033D6  8D 8F 00000004:R                         lea     ecx,dword ptr [edi+ @3ahsOs2Devid]
    6600    6600  0 +  000033DC  80 79 [04] 00                            cmp     byte ptr [ecx+04h],0h;  @3ahsOs2Devid
    6601    6601  0 +  000033E0  0F 84 0000340E:R                         je      @BLBL14
    6602    6602  0 +  000033E6  8D 41 [06]                               lea     eax,[ecx+06h]
    6603    6603  0 +  000033E9  89 4C/24 [0C]                            mov     [esp+0ch],ecx;  @CBE143
    6604    6604  0 +  000033ED  8B D3                                    mov     edx,ebx
    6605    6605  0 +  000033EF  B9 00000004                              mov     ecx,04h
    6606    6606  0 +  000033F4  E8 00000000:E                            call    memcmp
    6607    6607  0 +  000033F9  8B C8                                    mov     ecx,eax
    6608    6608  0 +  000033FB  8B 44/24 [0C]                            mov     eax,[esp+0ch];  @CBE143
    6609    6609  0 +  000033FF  85 C9                                    test    ecx,ecx
    6610    6610  0 +  00003401  0F 85 0000340E:R                         jne     @BLBL14
    6611    6611  0 +
    6612    6612  0 +                                             ; 291       return &ahsOs2Devid[i];
    6613    6613  0 +  00003407  83 C4 10                                 add     esp,010h
    6614    6614  0 +  0000340A  5E                                       pop     esi
    6615    6615  0 +  0000340B  5F                                       pop     edi
    6616    6616  0 +  0000340C  5B                                       pop     ebx
    6617    6617  0 +  0000340D  C3                                       ret
    6618    6618  0 +  0000340E                                   @BLBL14:
    6619    6619  0 +
    6620    6620  0 +                                             ; 287     for( i = 0; i < MAXDRIVES; ++i )
    6621    6621  0 +  0000340E  46                                       inc     esi
    6622    6622  0 +  0000340F  83 C7 0C                                 add     edi,0ch
    6623    6623  0 +  00003412  83 FE 40                                 cmp     esi,040h
    6624    6624  0 +  00003415  72 BF                                    jb      @BLBL12
    6625    6625  0 +
    6626    6626  0 +                                             ; 294     return NULL;
    6627    6627  0 +  00003417  33 C0                                    xor     eax,eax


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  130
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6628    6628  0 +  00003419  83 C4 10                                 add     esp,010h
    6629    6629  0 +  0000341C  5E                                       pop     esi
    6630    6630  0 +  0000341D  5F                                       pop     edi
    6631    6631  0 +  0000341E  5B                                       pop     ebx
    6632    6632  0 +  0000341F  C3                                       ret
    6633    6633  0 +  00003420                                   QueryArrayInfo__FCPA6_CUc       endp
    6634    6634  0 +
    6635    6635  0 +                                             ; 246 SetArrayInfo(DEVID const array_devid,ULONG const os2idx,UCHAR const avail)
    6636    6636  0 +
    6637    6637  0 +  00003420                                   SetArrayInfo__FPCUcCUlCUc       proc
    6638    6638  0 +  00003420  53                                       push    ebx
    6639    6639  0 +  00003421  57                                       push    edi
    6640    6640  0 +
    6641    6641  0 +                                             ; 250     for( i = 0; i < MAXDRIVES; ++i )
    6642    6642  0 +  00003422  33 FF                                    xor     edi,edi
    6643    6643  0 +
    6644    6644  0 +                                             ; 246 SetArrayInfo(DEVID const array_devid,ULONG const os2idx,UCHAR const avail)
    6645    6645  0 +  00003424  56                                       push    esi
    6646    6646  0 +
    6647    6647  0 +                                             ; 250     for( i = 0; i < MAXDRIVES; ++i )
    6648    6648  0 +  00003425  33 F6                                    xor     esi,esi
    6649    6649  0 +
    6650    6650  0 +                                             ; 246 SetArrayInfo(DEVID const array_devid,ULONG const os2idx,UCHAR const avail)
    6651    6651  0 +  00003427  83 EC 0C                                 sub     esp,0ch
    6652    6652  0 +  0000342A  88 4C/24 [24]                            mov     [esp+024h],cl;  avail
    6653    6653  0 +
    6654    6654  0 +                                             ; 250     for( i = 0; i < MAXDRIVES; ++i )
    6655    6655  0 +  0000342E                                   @BLBL4:
    6656    6656  0 +
    6657    6657  0 +                                             ; 251   if( ahsOs2Devid[i].fl == 0 )
    6658    6658  0 +  0000342E  8D 9F 00000004:R                         lea     ebx,dword ptr [edi+ @3ahsOs2Devid]
    6659    6659  0 +  00003434  80 7B [04] 00                            cmp     byte ptr [ebx+04h],0h;  @3ahsOs2Devid
    6660    6660  0 +  00003438  0F 85 00003461:R                         jne     @BLBL7
    6661    6661  0 +
    6662    6662  0 +                                             ; 254       ahsOs2Devid[i].os2idx = os2idx;
    6663    6663  0 +  0000343E  89 13                                    mov     [ebx],edx
    6664    6664  0 +
    6665    6665  0 +                                             ; 255       memcpy(ahsOs2Devid[i].id, array_devid, sizeof(array_devid));
    6666    6666  0 +  00003440  8B D0                                    mov     edx,eax
    6667    6667  0 +
    6668    6668  0 +                                             ; 253       ahsOs2Devid[i].fl = 1;
    6669    6669  0 +  00003442  C6 43 [04] 01                            mov     byte ptr [ebx+04h],01h
    6670    6670  0 +
    6671    6671  0 +                                             ; 255       memcpy(ahsOs2Devid[i].id, array_devid, sizeof(array_devid));
    6672    6672  0 +  00003446  B9 00000004                              mov     ecx,04h
    6673    6673  0 +  0000344B  8D 43 [06]                               lea     eax,[ebx+06h]
    6674    6674  0 +  0000344E  E8 00000000:E                            call    memcpy
    6675    6675  0 +
    6676    6676  0 +                                             ; 256       ahsOs2Devid[i].avail = avail;
    6677    6677  0 +  00003453  8A 4C/24 [24]                            mov     cl,[esp+024h];  avail
    6678    6678  0 +  00003457  88 4B [05]                               mov     [ebx+05h],cl
    6679    6679  0 +
    6680    6680  0 +                                             ; 257       break;
    6681    6681  0 +  0000345A  83 C4 0C                                 add     esp,0ch


    File: drvscan.asm  Pass: 2   ALP: Assembly Language Processor  Ver 4.00.004   Page:  131
    drvscan.cpp

    xxxx-ii-yyyy-cc-f--oooooooo--gggggggggggggggggggg-zzz-mm-ddd--ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss


    6682    6682  0 +  0000345D  5E                                       pop     esi
    6683    6683  0 +  0000345E  5F                                       pop     edi
    6684    6684  0 +  0000345F  5B                                       pop     ebx
    6685    6685  0 +  00003460  C3                                       ret
    6686    6686  0 +  00003461                                   @BLBL7:
    6687    6687  0 +
    6688    6688  0 +                                             ; 250     for( i = 0; i < MAXDRIVES; ++i )
    6689    6689  0 +  00003461  46                                       inc     esi
    6690    6690  0 +  00003462  83 C7 0C                                 add     edi,0ch
    6691    6691  0 +  00003465  83 FE 40                                 cmp     esi,040h
    6692    6692  0 +  00003468  72 C4                                    jb      @BLBL4
    6693    6693  0 +
    6694    6694  0 +                                             ; 260     return;
    6695    6695  0 +  0000346A  83 C4 0C                                 add     esp,0ch
    6696    6696  0 +  0000346D  5E                                       pop     esi
    6697    6697  0 +  0000346E  5F                                       pop     edi
    6698    6698  0 +  0000346F  5B                                       pop     ebx
    6699    6699  0 +  00003470  C3                                       ret
    6700    6700  0 +  00003471                                   SetArrayInfo__FPCUcCUlCUc       endp
    6701    6701  0 +  00003471                                   CODE32  ends
    6702    6702  0 +                                             EH_CODE segment
    6703    6703  0 +
    6704    6704  0 +  00000000                                   __dftdt__9PartTableFv   proc
    6705    6705  0 +  00000000  83 EC 08                                 sub     esp,08h
    6706    6706  0 +  00000003  BA 00000002                              mov     edx,02h
    6707    6707  0 +  00000008  E8 00000000:E                            call    __dt__9PartTableFv
    6708    6708  0 +  0000000D  83 C4 08                                 add     esp,08h
    6709    6709  0 +  00000010  C3                                       ret
    6710    6710  0 +  00000011                                   __dftdt__9PartTableFv   endp
    6711    6711  0 +  00000011                                   EH_CODE ends
    6712    6712  0 +                                             end
