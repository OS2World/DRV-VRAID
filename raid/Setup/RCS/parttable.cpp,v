head	1.5;
access;
symbols
	VSETUPv0_84:1.5
	VSETUP_82:1.4;
locks; strict;
comment	@// @;


1.5
date	2000.05.28.17.37.22;	author vitus;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.10.01.33.40;	author vitus;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.17.02.06.47;	author vitus;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.09.23.14.57;	author vitus;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.14.00.48.58;	author vitus;	state Exp;
branches;
next	;


desc
@Class PartTable to read/modify partition tables
@


1.5
log
@- adjusted verbosity levels
@
text
@/*
 * $Source: r:/source/driver/raid/setup/RCS/parttable.cpp,v $
 * $Revision: 1.4 $
 * $Date: 2000/04/10 01:33:40 $
 * $Locker: vitus $
 *
 *	Class PartTable to read/modify partition tables.
 *
 * $Log: parttable.cpp,v $
 * Revision 1.4  2000/04/10 01:33:40  vitus
 * - *all* messages display disk no
 *
 * Revision 1.3  2000/03/17 02:06:47  vitus
 * - addForeign: handle positions above 1023 cylinder.
 * - addForeign: calculates cyl, hd, sec instead of using first/last hd,sec
 *
 * Revision 1.2  2000/03/09 23:14:57  vitus
 * - another constructor and other changes to keep and reference the position of
 *   the first extended partition.
 * - method clear()
 *
 * Revision 1.1  2000/02/14 00:48:58  vitus
 * Initial revision
 * ----------------------------------------
 * This code is Copyright Vitus Jensen 2000
 */
static char const vcid[]="$Id: parttable.cpp,v 1.4 2000/04/10 01:33:40 vitus Exp vitus $";
static char const modname[]="PartTable";

#include <assert.h>
#include <string.h>

#define INCL_DOS
#define INCL_DOSDEVIOCTL
#include <os2.h>

extern "C" {
#include "../../../Lib/defines.h"
#include "../../../Lib/verbose.h"
}
#include "../dsklayout.h"
#include "dskinfo.hpp"

#include "PartTable.hpp"





/*# ----------------------------------------------------------------------
 * PartTable::PartTable(d,n,rd)
 *
 * PARAMETER
 *	d		disk where partition table is located
 *	n		psn where it's located
 *	rd		read only?
 *
 * RETURNS
 *	(constructor)
 *
 * DESCRIPTION
 * REMARKS
 */
PartTable::PartTable(VOS2Disk * d,ULONG n,Boolean rd)
{
    disk = d;
    secno = n;
    rderr = 0;
    modified = FALSE;
    valid = TRUE;
    extstart = 0;				/* not an extended partition */

    entry = bootrecord.PartitionTable;

    Verbose(2, modname, "disk %lu, psn %lu", disk->queryIndex(), secno);

    readRecord();
    if( rd == true )
	rderr = 0xFFFF;				/* any error will inhibit writing */
    return;
}




/*# ----------------------------------------------------------------------
 * PartTable::PartTable(d,n,first_extended_start)
 *
 * PARAMETER
 *	d			disk where partition table is located
 *	n			psn where it's located
 *	first_extended_start	start of first extended partition
 *
 * RETURNS
 *	(constructor)
 *
 * DESCRIPTION
 * REMARKS
 */
PartTable::PartTable(VOS2Disk * d,ULONG n,ULONG first_extended_start)
{
    disk = d;
    secno = n;
    rderr = 0;
    modified = FALSE;
    valid = TRUE;
    extstart = first_extended_start;
    assert( secno != 0 );

    entry = bootrecord.PartitionTable;

    Verbose(2, modname, "disk %lu, psn %lu", disk->queryIndex(), secno);

    readRecord();

    return;
}




/*# ----------------------------------------------------------------------
 * PartTable::~PartTable()
 *
 * PARAMETER
 *	(none)
 * RETURNS
 *	(nothing)
 *
 * DESCRIPTION
 *	Destructor
 *
 * REMARKS
 */
PartTable::~PartTable()
{
    flush();
}




void
PartTable::clear(void)
{
    if( rderr != 0 )
	return;

    memset(&bootrecord, 0, sizeof(bootrecord));
    bootrecord.Signature = 0xAA55;
    valid = FALSE;				/* only write if modified */
}




/*# ----------------------------------------------------------------------
 * PartTable::readRecord(void)
 *
 * PARAMETER
 *	(none)
 *
 * RETURNS
 *	(nothing)
 *
 * DESCRIPTION
 *	Reads partition table from disk.
 *
 * REMARKS
 */
void
PartTable::readRecord(void)
{
    DEVICEPARAMETERBLOCK dpb = disk->queryDPB();
    USHORT const	spt = dpb.cSectorsPerTrack;
    ULONG const		cylsize = dpb.cHeads * spt;

    if( (secno % cylsize) != 0 )
    {
	secno /= cylsize;
	secno *= cylsize;
    }

    rderr = disk->read(secno, 1, &bootrecord);
    if( rderr != 0 )
    {
	/* 'rderr' is now /0,  the disk will never be written to. */

	Verbose(1, modname, "can't read disk %lu, psn %lu - rc %lu",
		disk->queryIndex(), secno, rderr);
    }

    if( bootrecord.Signature != 0xAA55 )
    {
	Verbose(1, modname,
		"clearing invalid partition table (disk %lu, psn %lu)",
		disk->queryIndex(), secno);
	memset(&bootrecord, 0, sizeof(bootrecord));
	bootrecord.Signature = 0xAA55;
	valid = FALSE;				/* only write if modified */
    }
}




/*# ----------------------------------------------------------------------
 * PartTable::flush()
 *
 * PARAMETER
 *	(none)
 *
 * RETURNS
 *	APIRET
 *
 * DESCRIPTION
 *	Writes any modified data back to disk.
 *
 * REMARKS
 */
APIRET
PartTable::flush()
{
    if( rderr != 0 )
	return rderr;				/* don't write if not read! */

    APIRET	rc = 0;
    if( modified )
    {
	rc = disk->write(secno, 1, &bootrecord);
	if( rc != 0 )
	{
	    Verbose(1, modname, "can't write disk %lu, psn %lu - rc %lu",
		    disk->queryIndex(), secno, rc);
	}
	else
	{
	    modified = FALSE;
	    valid = TRUE;
	}
    }
    return rc;
}




/*# ----------------------------------------------------------------------
 * PartTable::delPE(partentry)
 *
 * PARAMETER
 *	partentry	points to partition entry to clear
 *
 * RETURNS
 *	TRUE		did as caller wanted
 *	FALSE		Some error.  Probably invalid pointer passed.
 *
 * DESCRIPTION
 *	Clears the requested partition entry.
 *
 * REMARKS
 */
BOOL
PartTable::delPE(PPARTITIONENTRY partentry)
{
    Verbose(2, modname, "delPE(disk %lu, table %lu, type %#x, rel %lu, size %lu)",
	    disk->queryIndex(), secno,
	    partentry->SysIndicator,
	    partentry->RelativeSectors, partentry->NumSectors);

    if( rderr != 0 )
	return FALSE;

    BOOL	done = FALSE;
    for( int i = 0; i < 4; ++i )
    {
	if( partentry == &bootrecord.PartitionTable[i] )
	{
	    memset(&bootrecord.PartitionTable[i], 0, sizeof(*partentry));
	    modified = TRUE;
	    done = TRUE;
	    break;
	}
    }
    return done;
}




/*# ----------------------------------------------------------------------
 * PartTable::addPE(partentry)
 *
 * PARAMETER
 *	partentry	partition entry to add
 *
 * RETURNS
 *	TRUE		did as caller wanted
 *	FALSE		Some error.  Probably invalid pointer passed.
 *
 * DESCRIPTION
 *	Copies 'partentry' to partition sector.
 *
 * REMARKS
 */
BOOL
PartTable::addPE(PARTITIONENTRY const &partentry)
{
    Verbose(2, modname, "addPE(disk %lu, table %lu, type %#x, rel %lu, size %lu)",
	    disk->queryIndex(), secno,
	    partentry.SysIndicator,
	    partentry.RelativeSectors, partentry.NumSectors);

    if( rderr != 0 )
	return FALSE;

    int		free = -1;
    for( int i = 0; i < 4; ++i )
	if( bootrecord.PartitionTable[i].SysIndicator == 0 )
	{
	    free = i;
	    break;
	}
    if( free == -1 )
    {
	Verbose(1, modname, "addPE(disk %lu, table %lu) - no free entry",
		disk->queryIndex(), secno);
	return FALSE;				/* scanning assured a free entry? */
    }

    bootrecord.PartitionTable[i] = partentry;
    modified = TRUE;
    return TRUE;
}




/*# ----------------------------------------------------------------------
 * PartTable::addForeign(type,bootable,start,size)
 *
 * PARAMETER
 *	type
 *	bootable
 *	start		start of partition [absolute]
 *	size		size of partition [sectors]
 *
 * RETURNS
 *	TRUE		OK, all done
 *	FALSE		some error occurred
 *
 * DESCRIPTION
 * REMARKS
 */
BOOL
PartTable::addForeign(UCHAR type,UCHAR bootable,ULONG start,ULONG size)
{
    Verbose(2, modname, "addForeign(disk %lu, table %lu, type %#x,"
	    " start %lu, size %lu)",
	    disk->queryIndex(), secno, type, start, size);

    if( rderr != 0 )
	return FALSE;

    DEVICEPARAMETERBLOCK dpb = disk->queryDPB();
    USHORT const	spt = dpb.cSectorsPerTrack;
    ULONG const		cylsize = dpb.cHeads * spt;

    USHORT cyl;
    UCHAR  sc, hd;

    PARTITIONENTRY	pe;

    pe.BootIndicator = bootable;

    cyl = (USHORT)(start / cylsize);
    sc = (start % spt) + 1;
    hd = (start / spt) % dpb.cHeads;
    if( cyl >= 1024 )
    {
	pe.BegHead = dpb.cHeads - 1;
	pe.BegSector = 0xE0;
	pe.BegCylinder = 0xFF;			/* Cylinder 1023, Sector 0 */
    }
    else
    {
	pe.BegHead = hd;
	pe.BegSector = (UCHAR)((HIUCHAR(cyl) << 6) | sc);
	pe.BegCylinder = LOUCHAR(cyl);
    }

    pe.SysIndicator = type;

    ULONG	last = start + size - 1;
    cyl = (USHORT)(last / cylsize);
    sc = (last % spt) + 1;
    hd = (last / spt) % dpb.cHeads;
    if( cyl >= 1024 )
    {
	pe.EndHead = dpb.cHeads - 1;
	pe.EndSector = 0xE0;
	pe.EndCylinder = 0xFF;			/* Cylinder 1023, Sector 0 */
    }
    else
    {
	pe.EndHead = hd;
	pe.EndSector = (UCHAR)((HIUCHAR(cyl) << 6) | sc);
	pe.EndCylinder = LOUCHAR(cyl);
    }
    if( type == EXTENDED_PARTTYPE )
	pe.RelativeSectors = start - extstart;	/* extended refer to the first */
    else
	pe.RelativeSectors = start - secno;
    pe.NumSectors = size;

    return addPE(pe);
}




/*# ----------------------------------------------------------------------
 * PartTable::addOwn(type,bootable,start,size)
 *
 * PARAMETER
 *	type
 *	bootable	0 or 0x80
 *	start		start of partition [absolute]
 *	size		size of partition [sectors]
 *
 * RETURNS
 *	TRUE		did as you requested
 *	FALSE		something went wrong, nothing changed
 *
 * DESCRIPTION
 *	Adjust size according to geometry and update partition table(s).
 *
 * REMARKS
 */
BOOL
PartTable::addOwn(UCHAR type,UCHAR bootable,ULONG start,ULONG size)
{
    Verbose(2, modname, "addOwn(disk %lu, table %lu, type %#x,"
	    " start %lu, size %lu)",
	    disk->queryIndex(), secno, type, start, size);

    if( rderr != 0 )
	return FALSE;

    /* Normalize ending point to last sector of cylinder!
     * .start is already correct. xxx */

    DEVICEPARAMETERBLOCK dpb = disk->queryDPB();
    ULONG const		cylsize = dpb.cHeads * dpb.cSectorsPerTrack;
    ULONG		end = size + start;

    if( (end % cylsize) != 0 )
    {
	end /= cylsize;
	end *= cylsize;
	Verbose(2, modname, "size adjusted to %lu", end - start);
	size = end - start;
    }
    return addForeign(type, bootable, start, size);
}
@


1.4
log
@- *all* messages display disk no
@
text
@d3 2
a4 2
 * $Revision: 1.3 $
 * $Date: 2000/03/17 02:06:47 $
d10 3
d27 2
a28 1
static char const vcid[]="$Id: parttable.cpp,v 1.3 2000/03/17 02:06:47 vitus Exp vitus $";
d55 1
a55 1
 *	n		sector where it's located
d75 1
a75 1
    Verbose(2, "PartTable", "disk %lu, sector %lu", disk->queryIndex(), secno);
d91 1
a91 1
 *	n			sector where it's located
d112 1
a112 1
    Verbose(2, "PartTable", "disk %lu, sector %lu", disk->queryIndex(), secno);
d189 1
a189 1
	Verbose(1, "PartTable", "can't read disk %lu, sector %lu - rc %lu",
d195 2
a196 2
	Verbose(1, "PartTable",
		"clearing invalid partition table (disk %lu, sector %lu)",
d233 1
a233 1
	    Verbose(1, "PartTable", "can't write disk %lu, sector %lu - rc %lu",
d266 1
a266 1
    Verbose(2,"PartTable","delPE(disk %lu, table %lu, type %#x, rel %lu, size %lu)",
d309 1
a309 1
    Verbose(2,"PartTable","addPE(disk %lu, table %lu, type %#x, rel %lu, size %lu)",
d326 1
a326 1
	Verbose(1, "PartTable", "addPE(disk %lu, table %lu) - no free entry",
d358 1
a358 1
    Verbose(2,"PartTable","addForeign(disk %lu, table %lu, type %#x,"
d443 1
a443 1
    Verbose(2,"PartTable","addOwn(disk %lu, table %lu, type %#x,"
d461 1
a461 1
	Verbose(2, "PartTable", "size adjusted to %lu", end - start);
@


1.3
log
@- addForeign: handle positions above 1023 cylinder.
- addForeign: calculates cyl, hd, sec instead of using first/last hd,sec
@
text
@d3 2
a4 2
 * $Revision: 1.2 $
 * $Date: 2000/03/09 23:14:57 $
d10 4
d24 1
a24 1
static char const vcid[]="$Id: parttable.cpp,v 1.2 2000/03/09 23:14:57 vitus Exp vitus $";
d71 1
a71 1
    Verbose(2, "PartTable", "drive %lu, sector %lu", disk->queryIndex(), secno);
d108 1
a108 1
    Verbose(2, "PartTable", "drive %lu, sector %lu", disk->queryIndex(), secno);
d183 4
a186 1
	Verbose(1, "PartTable", "can't read sector %lu - rc %lu", secno, rderr);
d192 2
a193 1
		"clearing invalid partition table in sector %lu", secno);
d229 2
a230 1
	    Verbose(1, "PartTable", "can't write sector %lu - rc %lu", secno, rc);
d262 1
a262 1
    Verbose(2,"PartTable","delPE(drive %lu, table %lu, type %#x, rel %lu, size %lu)",
d305 1
a305 1
    Verbose(2,"PartTable","addPE(drive %lu, table %lu, type %#x, rel %lu, size %lu)",
d322 2
a323 1
	Verbose(1, "PartTable", "addPE() - no free entry");
d354 1
a354 1
    Verbose(2,"PartTable","addForeign(drive %lu, table %lu, type %#x,"
d439 1
a439 1
    Verbose(2,"PartTable","addOwn(drive %lu, table %lu, type %#x,"
@


1.2
log
@- another constructor and other changes to keep and reference the position of
  the first extended partition.
- method clear()
@
text
@d3 2
a4 2
 * $Revision: 1.1 $
 * $Date: 2000/02/14 00:48:58 $
d10 5
d20 1
a20 1
static char const vcid[]="$Id: parttable.cpp,v 1.1 2000/02/14 00:48:58 vitus Exp vitus $";
d344 4
d355 3
d362 15
a376 4
    USHORT us = (USHORT)(start / cylsize);
    pe.BegHead = (UCHAR)((start % cylsize) / spt);
    pe.BegSector = (UCHAR)((HIUCHAR(us) << 6) | 0x01);
    pe.BegCylinder = LOUCHAR(us);
d380 16
a395 4
    us = (USHORT)((start + size) / cylsize - 1);
    pe.EndHead = (UCHAR)(dpb.cHeads - 0x01);
    pe.EndSector = (UCHAR)((HIUCHAR(us) << 6) | spt);
    pe.EndCylinder = LOUCHAR(us);
d429 4
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * $Source$
 * $Revision$
 * $Date$
 * $Locker$
d9 3
a11 1
 * $Log$
d15 1
a15 1
static char const vcid[]="$Id$";
d38 1
a38 1
 * PartTable::PartTable(VOS2Disk * d,ULONG n)
d43 1
d51 1
a51 1
PartTable::PartTable(VOS2Disk * d,ULONG n)
d58 1
d60 101
a169 1
    PMBR const pt = new MBR;
d171 1
a171 1
    rderr = disk->read(secno, 1, pt);
a175 1
    entry = pt->PartitionTable;
d177 1
a177 1
    if( pt->Signature != 0xAA55 )
d179 4
a182 3
	Verbose(1, "PartTable", "clearing invalid partition table");
	memset(pt, 0, sizeof(*pt));
	pt->Signature = 0xAA55;
d191 1
a191 1
 * <fkt>
d194 2
d197 2
d200 1
a200 13
 * REMARKS
 */
PartTable::~PartTable()
{
    flush();
    delete pt;
}




/*# ----------------------------------------------------------------------
 * <fkt>
a201 3
 * PARAMETER
 * RETURNS
 * DESCRIPTION
d208 1
a208 1
	return rderr;
d213 1
a213 1
	rc = disk->write(secno, 1, pt);
d216 1
a216 1
	    Verbose(1, "PartTable", "can't write sector %lu - rc %lu",secno,rc);
d231 1
a231 1
 * <fkt>
d234 2
d241 2
d248 8
a256 1

d259 1
a259 1
	if( partentry == &pt->PartitionTable[i] )
d261 1
a261 1
	    memset(&pt->PartitionTable[i], 0, sizeof(pt->PartitionTable[i]));
d274 1
a274 1
 * <fkt>
d277 2
d284 2
d289 1
a289 1
PartTable::addPE(PPARTITIONENTRY partentry)
d291 8
a298 1
    BOOL	done = FALSE;
a299 1

d301 1
a301 1
	if( pt->PartitionTable[i].SysIndicator == 0 )
d307 2
d310 1
d312 1
a312 1
    memcpy(&pt->PartitionTable[i], partentry, sizeof(partentry));
d321 1
a321 1
 * <fkt>
d324 5
d330 3
d339 3
d361 4
a364 1
    pe.RelativeSectors = start - secno;
d367 1
a367 1
    return addPE(&pe);
d374 1
a374 1
 * <fkt>
d377 5
d383 3
d394 3
d401 1
a401 1
    ULONG const	cylsize = dpb.cHeads * dpb.cCylinders;
d404 4
a407 3
    end /= cylsize;
    end *= cylsize;
    if( end != size + start )
d409 2
a410 2
    size = end - start;

@
