head	2.1;
access;
symbols
	VSETUPv0_84:1.15
	VSETUP_82:1.11
	VSETUPv0_80:1.10
	VSETUPv0_71:1.5
	VSETUPv0_70:1.5;
locks; strict;
comment	@// @;


2.1
date	2005.06.17.06.10.30;	author vitus;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.08.18.31.09;	author vitus;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.15.01.25.47;	author vitus;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.17.02.05.21;	author vitus;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.07.00.50.10;	author vitus;	state Exp;
branches;
next	1.12;

1.12
date	2000.06.15.01.21.31;	author vitus;	state Exp;
branches;
next	1.11;

1.11
date	99.07.05.00.48.30;	author vitus;	state Exp;
branches;
next	1.10;

1.10
date	99.06.21.01.32.56;	author vitus;	state Exp;
branches;
next	1.9;

1.9
date	99.06.19.17.20.03;	author vitus;	state Exp;
branches;
next	1.8;

1.8
date	99.06.02.01.56.41;	author vitus;	state Exp;
branches;
next	1.7;

1.7
date	99.05.13.23.17.44;	author vitus;	state Exp;
branches;
next	1.6;

1.6
date	99.04.29.01.31.48;	author vitus;	state Exp;
branches;
next	1.5;

1.5
date	99.03.15.03.25.33;	author vitus;	state Exp;
branches;
next	1.4;

1.4
date	99.03.06.20.19.02;	author vitus;	state Exp;
branches;
next	1.3;

1.3
date	99.03.04.02.05.36;	author vitus;	state Exp;
branches;
next	1.2;

1.2
date	99.03.01.00.56.58;	author vitus;	state Exp;
branches;
next	1.1;

1.1
date	99.02.24.00.20.33;	author vitus;	state Exp;
branches;
next	;


desc
@Define classes to represent RAID structure at runtime.
@


2.1
log
@- new setSize() method
- added New BSD license statement
- removed tabs
@
text
@/*
 * $Source: r:/source/driver/raid/setup/RCS/dskinfo.hpp,v $
 * $Revision: 1.16 $
 * $Date: 2001/07/08 18:31:09 $
 * $Locker: vitus $
 *
 *      Define classes to represent RAID structure at runtime.
 *
 *      Reading block 0 means reading the sector containg configuration
 *      data about the device just read.
 *
 * $Log: dskinfo.hpp,v $
 * Revision 1.16  2001/07/08 18:31:09  vitus
 * - enum ArrayState commented
 *
 * Revision 1.15  2001/01/15 01:25:47  vitus
 * - VDriveWithRedundancy: added method queryState()
 *
 * Revision 1.14  2000/08/17 02:05:21  vitus
 * - class VRDrive: addChild() parameter 'datav' changed to contain first invalid
 *   sector no.  So this class holds the same amount of information as a
 *   configuration sector.
 * class VDriveWithRedundancy: added ioInvalidChild(), ioStartRebuild()
 *
 * Revision 1.13  2000/08/07 00:50:10  vitus
 * - VDriveWithRedundancy::setBuild: added redo argument to distinguish
 *   between build and rebuild
 *
 * Revision 1.12  2000/06/15 01:21:31  vitus
 * - added queryFltHd and setFltHd methods
 *
 * Revision 1.11  1999/07/05 00:48:30  vitus
 * - VRDrive::addChild() gets additional flag "config sector valid"
 *
 * Revision 1.10  1999/06/21 01:32:56  vitus
 * - corrected english spelling
 *
 * Revision 1.9  1999/06/19 17:20:03  vitus
 * - added VOS2Disk::VOS2Disk(ULONG idx,ULONG handle) constructor
 *
 * Revision 1.8  1999/06/02 01:56:41  vitus
 * - VRDev: defines method queryWhere(), virtual base returns NULL
 * - VFRDev/VORDev: contains member inv_icon
 * - VRDrive: isValidChild(), two parameter sets
 *
 * Revision 1.7  1999/05/13 23:17:44  vitus
 * - VDriveWithRedundancy. added method ioRemoveChild()
 *
 * Revision 1.6  1999/04/29 01:31:48  vitus
 * - define MAX_CHILDS = 32, should be enough for everybody
 *
 * Revision 1.5  1999/03/15 03:25:33  vitus
 * - VRDev: added virtual destructure. Important, see Stroustroup
 *
 * Revision 1.4  1999/03/06 20:19:02  vitus
 * - added queryIcon() method
 *
 * Revision 1.3  1999/03/04 02:05:36  vitus
 * - removed any but abstract classes
 *
 * Revision 1.2  1999/03/01 00:56:58  vitus
 * - many more methods to get things working again
 *
 * Revision 1.1  1999/02/24 00:20:33  vitus
 * Initial revision
 * ---------------------------------------------
 *      Copyright (c) 1998-2001,2005, Vitus Jensen
 *      All rights reserved.
 *
 *      Redistribution and use in source and binary forms, with or without
 *      modification, are permitted provided that the following conditions are
 *      met:
 *
 *          * Redistributions of source code must retain the above copyright
 *            notice, this list of conditions and the following disclaimer.
 *          * Redistributions in binary form must reproduce the above copyright
 *            notice, this list of conditions and the following disclaimer in
 *            the documentation and/or other materials provided with the
 *            distribution.
 *          * Neither the name of Vitus Jensen nor the names of its
 *            contributors may be used to endorse or promote products derived
 *            from this software without specific prior written permission.
 *
 *      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#define _DSKINFO_HPP    "$Id: dskinfo.hpp,v 1.16 2001/07/08 18:31:09 vitus Exp vitus $"


typedef enum { false = 0, False = 0, true  = 1, True  = 1 } Boolean;

typedef enum { Ready = 0,                       /* all well */
               Build,                           /* at least one child is invalid */
               Rebuild,                         /* just rewrite all information */
               Fail,                            /* working w/o redundancy */
               Error                            /* data [partly] unavailable */
} ArrayState;


#define MAX_CHILDREN    32                      /* should be enough for everybody */

#define VERROR_NO_CONTENTS      0xFF00          /* application defined errorcode */






class VRDrive;                                  /* forward declaration */






/* ======================================================================
 * A disk of any kind.  It has the (pure virtual) methods to read and
 * write and has a size.
 * Anything more? */

class VDisk {

  public:
    virtual Boolean     isWritable() =0;
    virtual ULONG       querySize() =0;
    virtual APIRET      read(ULONG block,ULONG count,PVOID buffer) =0;
    virtual APIRET      write(ULONG block,ULONG count,PVOID buffer) =0;
};


class VOS2Disk : public VDisk {
    ULONG               pdskidx;
    ULONG               pdskhd;                 /* PDskOpen() handle */
    DEVICEPARAMETERBLOCK devparam;
    Boolean             writable;

    APIRET              create(ULONG idx,ULONG handle);


  public:
    VOS2Disk(ULONG idx);
    VOS2Disk(ULONG idx,ULONG handle);
    ~VOS2Disk();

    DEVICEPARAMETERBLOCK &queryDPB();
    ULONG               queryIndex();

    Boolean             isWritable() { return writable; }
    ULONG               querySize();
    APIRET              read(ULONG block,ULONG count,PVOID buffer);
    APIRET              write(ULONG block,ULONG count,PVOID buffer);
};






/* ======================================================================
 * VRDev
 * A special VDisk to contain all operations possible on all
 * VRAID entities (PHYSDEV, VRAID, HOST).  All linking is done
 * with objects of this type.
 */
class VRDev : public VDisk {
  protected:
    USHORT      flt_hd;                         /* accessable through vraid.flt? */
    VRDrive *   parent;
    DEVID       id;

  public:
    VRDev() { flt_hd = -1u; }
    virtual     ~VRDev() {}                     /* see Stroustroup pg216!!! */

    void                setParent(VRDrive * newparent) { parent = newparent; }
    VRDrive *           getParent() { return parent; }

    DEVID const *       queryID() { return &id; }
    virtual void        forceUnwritable() =0;

    /* If configuration changes ... */
    virtual int         ioDeleteYourself() =0;
    virtual int         ioRemoveParent() =0;
    virtual int         ioChangeID(DEVID) =0;
    virtual int         ioSync() =0;

    USHORT const        queryFltHd() { return flt_hd; }
    virtual VOS2Disk *  queryWhere() { return NULL; }

    virtual UCHAR       isArray() =0;           /* returns type or array or 0 */
    virtual Boolean     isHostdrive() =0;
    virtual char *      allocateDescription() =0;
    virtual HPOINTER    queryIcon() =0;
};






/* ======================================================================
 * V{F|O}RDev
 * The complete VRAID partition.  Either accessed via filter driver
 * or directly through OS/2.
 */
class VFRDev : public VRDev {
  private:
    ULONG       partsize;
    ULONG       size;                           /* may be less than partition! */
    Boolean     writable;
    HPOINTER    inv_icon, rw_icon, ro_icon;

  public:
    /* Create from filter handle... */
    VFRDev(USHORT flthd);
    ~VFRDev();

    int         ioDeleteYourself();
    int         ioRemoveParent();
    int         ioChangeID(DEVID);              // doesn't do I/O...
    int         ioSync();

    UCHAR       isArray() { return 0; }
    Boolean     isHostdrive() { return False; }
    char *      allocateDescription();
    HPOINTER    queryIcon();

    void        forceUnwritable() { writable = False; }
    Boolean     isWritable() { return writable; }
    ULONG       querySize();
    APIRET      read(ULONG offset,ULONG count,PVOID buffer);
    APIRET      write(ULONG offset,ULONG count,PVOID buffer);
};




class VORDev : public VRDev {
  private:
    VOS2Disk *  theDisk;
    ULONG       partstart, partsize;
    ULONG       size;
    Boolean     writable;
    Boolean     delete_disk;
    HPOINTER    inv_icon, rw_icon, ro_icon;

  public:
    VORDev(VOS2Disk * where,ULONG pstart,ULONG psize); /* create from PDsk*() index*/
    ~VORDev();

    int         ioDeleteYourself();
    int         ioRemoveParent();
    int         ioChangeID(DEVID);              // doesn't do I/O...
    int         ioSync();

    VOS2Disk *  queryWhere() { return theDisk; }

    UCHAR       isArray() { return 0; }
    Boolean     isHostdrive() { return False; }
    char *      allocateDescription();
    HPOINTER    queryIcon();

    void        forceUnwritable() { writable = False; }
    USHORT const queryFltHd() { return -1u; }
    Boolean     isWritable() { return writable; }
    ULONG       querySize();
    APIRET      read(ULONG offset,ULONG count,PVOID buffer);
    APIRET      write(ULONG offset,ULONG count,PVOID buffer);
};






/* ======================================================================
 * VOS2Drive
 * Dummy added to conform to C++ syntax.
 * This is a OS/2 drive *not* containing any VRAID structures but directly
 * representing the total disk.
 * It's directly accessable by OS/2 (thus 'hostdrive') but no array.
 */
class VOS2Drive : public VRDev {
  private:
    VOS2Disk *  theDisk;
    Boolean     writable;
    Boolean     delete_disk;
    HPOINTER    rw_icon, ro_icon;

  public:
    VOS2Drive(VOS2Disk *);
    ~VOS2Drive();

    VOS2Disk *  queryWhere() { return theDisk; }
    int         ioDeleteYourself();             /* impossible.  marks for deletion. */
    int         ioRemoveParent();               // returns error, sorry
    int         ioChangeID(DEVID);              // dito
    int         ioSync();

    UCHAR       isArray() { return 0; }
    Boolean     isHostdrive() { return True; }
    char *      allocateDescription();
    HPOINTER    queryIcon();

    void        forceUnwritable() { writable = False; }
    USHORT const queryFltHd() { return -1u; }
    Boolean     isWritable() { return writable; }
    ULONG       querySize();
    APIRET      read(ULONG block,ULONG count,PVOID buffer);
    APIRET      write(ULONG block,ULONG count,PVOID buffer);
};






/* ======================================================================
 * VRDrive
 * A possible hostdrive, anything above a PHYSDEVICE.
 */
class VRDrive : public VRDev {
  public:
    void                setFltHd(USHORT hd) { flt_hd = hd; }
    virtual void        setHostdrive(ULONG os2idx = -1ul) =0;
    virtual void        addChild(VRDev * newchild, Boolean cfgv,
                                 ULONG datav = -1ul) =0;

    virtual int         queryChildren() =0;
    virtual VRDev *     getChild(int which) =0;
    virtual Boolean     isValidChild(int which) { return True; }
    virtual Boolean     isValidChild(VRDev * child) { return True; }
};






/* ======================================================================
 * VDriveWithRedundancy
 * Fail-safe devices are based on this abstract class.
 */

class VDriveWithRedundancy : public VRDrive {
  public:
    virtual void        setSize(ULONG newsize) =0; // those devices are changable
    virtual void        setBuild(ULONG nextsec, Boolean redo = False) =0;
    virtual ArrayState  queryState() =0;
    virtual int         ioRemoveChild(VRDev * child) =0;

    virtual int         ioInvalidChild(DEVID const id_of_invalid_child,
                                       ULONG from_this_sector_on) =0;

    virtual int         ioStartRebuild(ULONG start_sector) =0;
};
@


1.16
log
@- enum ArrayState commented
@
text
@d3 2
a4 2
 * $Revision: 1.15 $
 * $Date: 2001/01/15 01:25:47 $
d7 1
a7 1
 *	Define classes to represent RAID structure at runtime.
d9 2
a10 2
 *	Reading block 0 means reading the sector containg configuration
 *	data about the device just read.
d13 3
d67 28
a94 1
 * This code is Copyright Vitus Jensen 1999-2001
d96 1
a96 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.15 2001/01/15 01:25:47 vitus Exp vitus $"
d101 5
a105 5
typedef enum { Ready = 0,			/* all well */
	       Build,				/* at least one child is invalid */
	       Rebuild,				/* just rewrite all information */
	       Fail,				/* working w/o redundancy */
	       Error				/* data [partly] unavailable */
d109 1
a109 1
#define MAX_CHILDREN	32			/* should be enough for everybody */
d111 1
a111 1
#define VERROR_NO_CONTENTS	0xFF00		/* application defined errorcode */
d118 1
a118 1
class VRDrive;					/* forward declaration */
d133 4
a136 4
    virtual Boolean	isWritable() =0;
    virtual ULONG	querySize() =0;
    virtual APIRET	read(ULONG block,ULONG count,PVOID buffer) =0;
    virtual APIRET	write(ULONG block,ULONG count,PVOID buffer) =0;
d141 2
a142 2
    ULONG		pdskidx;
    ULONG		pdskhd;			/* PDskOpen() handle */
d144 1
a144 1
    Boolean		writable;
d146 1
a146 1
    APIRET		create(ULONG idx,ULONG handle);
d155 1
a155 1
    ULONG		queryIndex();
d157 4
a160 4
    Boolean		isWritable() { return writable; }
    ULONG		querySize();
    APIRET		read(ULONG block,ULONG count,PVOID buffer);
    APIRET		write(ULONG block,ULONG count,PVOID buffer);
d176 3
a178 3
    USHORT	flt_hd;				/* accessable through vraid.flt? */
    VRDrive *	parent;
    DEVID	id;
d182 1
a182 1
    virtual	~VRDev() {}			/* see Stroustroup pg216!!! */
d184 2
a185 2
    void		setParent(VRDrive * newparent) { parent = newparent; }
    VRDrive *		getParent() { return parent; }
d187 2
a188 2
    DEVID const *	queryID() { return &id; }
    virtual void	forceUnwritable() =0;
d191 12
a202 12
    virtual int		ioDeleteYourself() =0;
    virtual int		ioRemoveParent() =0;
    virtual int		ioChangeID(DEVID) =0;
    virtual int		ioSync() =0;

    USHORT const	queryFltHd() { return flt_hd; }
    virtual VOS2Disk *	queryWhere() { return NULL; }

    virtual UCHAR	isArray() =0;		/* returns type or array or 0 */
    virtual Boolean	isHostdrive() =0;
    virtual char *	allocateDescription() =0;
    virtual HPOINTER	queryIcon() =0;
d217 4
a220 4
    ULONG	partsize;
    ULONG	size;				/* may be less than partition! */
    Boolean	writable;
    HPOINTER	inv_icon, rw_icon, ro_icon;
d227 15
a241 15
    int		ioDeleteYourself();
    int		ioRemoveParent();
    int		ioChangeID(DEVID);		// doesn't do I/O...
    int		ioSync();

    UCHAR	isArray() { return 0; }
    Boolean	isHostdrive() { return False; }
    char *	allocateDescription();
    HPOINTER	queryIcon();

    void	forceUnwritable() { writable = False; }
    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG offset,ULONG count,PVOID buffer);
    APIRET	write(ULONG offset,ULONG count,PVOID buffer);
d249 6
a254 6
    VOS2Disk *	theDisk;
    ULONG	partstart, partsize;
    ULONG	size;
    Boolean	writable;
    Boolean	delete_disk;
    HPOINTER	inv_icon, rw_icon, ro_icon;
d260 11
a270 11
    int		ioDeleteYourself();
    int		ioRemoveParent();
    int		ioChangeID(DEVID);		// doesn't do I/O...
    int		ioSync();

    VOS2Disk *	queryWhere() { return theDisk; }

    UCHAR	isArray() { return 0; }
    Boolean	isHostdrive() { return False; }
    char *	allocateDescription();
    HPOINTER	queryIcon();
d272 1
a272 1
    void	forceUnwritable() { writable = False; }
d274 4
a277 4
    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG offset,ULONG count,PVOID buffer);
    APIRET	write(ULONG offset,ULONG count,PVOID buffer);
d294 2
a295 2
    VOS2Disk *	theDisk;
    Boolean	writable;
d297 1
a297 1
    HPOINTER	rw_icon, ro_icon;
d304 9
a312 9
    int		ioDeleteYourself();             /* impossible.  marks for deletion. */
    int		ioRemoveParent();		// returns error, sorry
    int		ioChangeID(DEVID);		// dito
    int		ioSync();

    UCHAR	isArray() { return 0; }
    Boolean	isHostdrive() { return True; }
    char *	allocateDescription();
    HPOINTER	queryIcon();
d314 1
a314 1
    void	forceUnwritable() { writable = False; }
d316 4
a319 4
    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG block,ULONG count,PVOID buffer);
    APIRET	write(ULONG block,ULONG count,PVOID buffer);
d333 9
a341 9
    void		setFltHd(USHORT hd) { flt_hd = hd; }
    virtual void	setHostdrive(ULONG os2idx = -1ul) =0;
    virtual void	addChild(VRDev * newchild, Boolean cfgv,
				 ULONG datav = -1ul) =0;

    virtual int		queryChildren() =0;
    virtual VRDev *	getChild(int which) =0;
    virtual Boolean	isValidChild(int which) { return True; }
    virtual Boolean	isValidChild(VRDev * child) { return True; }
d356 4
a359 3
    virtual void	setBuild(ULONG nextsec, Boolean redo = False) =0;
    virtual ArrayState	queryState() =0;
    virtual int		ioRemoveChild(VRDev * child) =0;
d361 2
a362 2
    virtual int		ioInvalidChild(DEVID const id_of_invalid_child,
				       ULONG from_this_sector_on) =0;
d364 1
a364 1
    virtual int		ioStartRebuild(ULONG start_sector) =0;
@


1.15
log
@- VDriveWithRedundancy: added method queryState()
@
text
@d3 2
a4 2
 * $Revision: 1.14 $
 * $Date: 2000/08/17 02:05:21 $
d13 3
d66 1
a66 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.14 2000/08/17 02:05:21 vitus Exp vitus $"
d71 6
a76 1
typedef enum { Ready = 0, Build, Rebuild, Fail, Error } ArrayState;
@


1.14
log
@- class VRDrive: addChild() parameter 'datav' changed to contain first invalid
  sector no.  So this class holds the same amount of information as a
  configuration sector.
class VDriveWithRedundancy: added ioInvalidChild(), ioStartRebuild()
@
text
@d3 2
a4 2
 * $Revision: 1.13 $
 * $Date: 2000/08/07 00:50:10 $
d13 6
d61 1
a61 1
 * This code is Copyright Vitus Jensen 1999-2000
d63 1
a63 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.13 2000/08/07 00:50:10 vitus Exp vitus $"
d68 3
d77 4
a80 1
class VRDrive;
d319 1
d322 1
a322 1
    virtual int		ioInvalidChild(DEVID id_of_invalid_child,
@


1.13
log
@- VDriveWithRedundancy::setBuild: added redo argument to distinguish
  between build and rebuild
@
text
@d3 2
a4 2
 * $Revision: 1.12 $
 * $Date: 2000/06/15 01:21:31 $
d13 4
d57 1
a57 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.12 2000/06/15 01:21:31 vitus Exp vitus $"
d284 3
a286 2
    virtual void	setHostdrive(ULONG os2idx=-1ul) =0;
    virtual void	addChild(VRDev * newchild,Boolean cfgv,Boolean datav=True)=0;
d308 5
@


1.12
log
@- added queryFltHd and setFltHd methods
@
text
@d3 2
a4 2
 * $Revision: 1.11 $
 * $Date: 1999/07/05 00:48:30 $
d13 3
d53 1
a53 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.11 1999/07/05 00:48:30 vitus Exp vitus $"
d301 1
a301 1
    virtual void	setBuild(ULONG nextsec) =0;
@


1.11
log
@- VRDrive::addChild() gets additional flag "config sector valid"
@
text
@d3 2
a4 2
 * $Revision: 1.10 $
 * $Date: 1999/06/21 01:32:56 $
d13 3
d47 2
a48 2
 * ----------------------------------------
 * This code is Copyright Vitus Jensen 1999
d50 1
a50 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.10 1999/06/21 01:32:56 vitus Exp vitus $"
d119 1
d124 2
a125 1
    virtual	~VRDev() {}			// see Stroustroup pg216!!!
d139 1
d142 1
a142 1
    virtual UCHAR	isArray() =0;		// returns type or array or 0
a159 1
    USHORT	hd;
d161 1
a161 1
    ULONG	size;				// may be less than partition!
d216 1
d258 1
d276 1
@


1.10
log
@- corrected english spelling
@
text
@d3 2
a4 2
 * $Revision: 1.9 $
 * $Date: 1999/06/19 17:20:03 $
d13 3
d47 1
a47 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.9 1999/06/19 17:20:03 vitus Exp vitus $"
d54 3
d270 1
a270 1
    virtual void	addChild(VRDev * newchild,Boolean valid=True) =0;
@


1.9
log
@- added VOS2Disk::VOS2Disk(ULONG idx,ULONG handle) constructor
@
text
@d3 2
a4 2
 * $Revision: 1.8 $
 * $Date: 1999/06/02 01:56:41 $
d13 3
d44 1
a44 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.8 1999/06/02 01:56:41 vitus Exp vitus $"
d49 1
a49 1
#define MAX_CHILDS	32			/* should be enough for everybody */
d266 1
a266 1
    virtual int		queryChilds() =0;
@


1.8
log
@- VRDev: defines method queryWhere(), virtual base returns NULL
- VFRDev/VORDev: contains member inv_icon
- VRDrive: isValidChild(), two parameter sets
@
text
@d3 2
a4 2
 * $Revision: 1.7 $
 * $Date: 1999/05/13 23:17:44 $
d13 5
d41 1
a41 1
#define _DSKINFO_HPP	"$Id: dskinfo.hpp,v 1.7 1999/05/13 23:17:44 vitus Exp vitus $"
d77 3
d82 1
d260 1
a260 1
    virtual void	setHostdrive(ULONG os2idx=-1) =0;
@


1.7
log
@- VDriveWithRedundancy. added method ioRemoveChild()
@
text
@d3 2
a4 2
 * $Revision: 1.6 $
 * $Date: 1999/04/29 01:31:48 $
d13 3
d36 1
a36 1
#define _DSKINFO_HPP	"$Id$"
d116 2
d140 1
a140 1
    HPOINTER	rw_icon, ro_icon;
d174 1
a174 1
    HPOINTER	rw_icon, ro_icon;
d256 2
@


1.6
log
@- define MAX_CHILDS = 32, should be enough for everybody
@
text
@d3 2
a4 2
 * $Revision: 1.5 $
 * $Date: 1999/03/15 03:25:33 $
d13 3
d33 1
a262 1

d266 1
a267 1

@


1.5
log
@- VRDev: added virtual destructure. Important, see Stroustroup
@
text
@d3 2
a4 2
 * $Revision: 1.4 $
 * $Date: 1999/03/06 20:19:02 $
d13 3
d33 3
@


1.4
log
@- added queryIcon() method
@
text
@d3 2
a4 2
 * $Revision: 1.3 $
 * $Date: 1999/03/04 02:05:36 $
d13 3
d89 2
d150 2
d154 1
a154 1
    VOS2Disk *	os2disk;
d158 1
d170 1
a170 1
    VOS2Disk *	queryWhere() { return os2disk; }
d200 1
d207 2
a208 1
    int		ioDeleteYourself();
@


1.3
log
@- removed any but abstract classes
@
text
@d3 2
a4 2
 * $Revision: 1.2 $
 * $Date: 1999/03/01 00:56:58 $
d13 3
d101 1
d120 1
d135 1
d151 1
d167 1
d192 1
d206 1
@


1.2
log
@- many more methods to get things working again
@
text
@d3 2
a4 2
 * $Revision: 1.1 $
 * $Date: 1999/02/24 00:20:33 $
d13 3
d32 2
a33 1
/* A disk of any kind.  It hast the (pure virtual) methods to read and
a225 11
class VSingle : public VRDrive {
  private:
    Boolean	hostdrive;
    ULONG	os2access;
    VRDev      *child;
    ULONG	size;
    Boolean	writable;

  public:
    VSingle(DEVID drive_id);
    ~VSingle();
a226 1
    void	forceUnwritable() { writable = False; }
d228 4
a231 82
    int		ioDeleteYourself();
    int		ioRemoveParent();
    int		ioChangeID(DEVID newid);
    int		ioSync();

    UCHAR	isArray() { return RDTYPE_SINGLE; }
    Boolean	isHostdrive() { return hostdrive; }
    char *	allocateDescription();
    int		queryChilds();
    VRDev *	getChild(int which);

    void	setHostdrive(ULONG os2idx = -1);
    void	addChild(VRDev * newchild,Boolean valid=True);

    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG offset,ULONG count,PVOID buffer);
    APIRET	write(ULONG offset,ULONG count,PVOID buffer);
};


class VChain : public VRDrive {
  private:
    Boolean	hostdrive;
    ULONG	os2access;
    int		childs;
    VRDev     **child;
    ULONG	size;
    Boolean	writable;

  public:
    VChain(DEVID drive_id,int nchd);
    ~VChain();

    void	forceUnwritable() { writable = False; }

    int		ioDeleteYourself();
    int		ioRemoveParent();
    int		ioChangeID(DEVID);
    int		ioSync();

    UCHAR	isArray() { return RDTYPE_CHAIN; }
    Boolean	isHostdrive() { return hostdrive; }
    char *	allocateDescription();
    int		queryChilds();
    VRDev *	getChild(int which);

    void	setHostdrive(ULONG os2idx = -1);
    void	addChild(VRDev * newchild,Boolean valid=True);

    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG offset,ULONG count,PVOID buffer);
    APIRET	write(ULONG offset,ULONG count,PVOID buffer);
};


class VStripe : public VRDrive {
  private:
    Boolean	hostdrive;
    ULONG	os2access;
    int		childs;
    VRDev     **child;
    ULONG	size;
    Boolean	writable;

  public:
    VStripe(DEVID drive_id,int nchd);
    ~VStripe();

    void	forceUnwritable() { writable = False; }

    int		ioDeleteYourself();
    int		ioRemoveParent();
    int		ioChangeID(DEVID);
    int		ioSync();

    UCHAR	isArray() { return RDTYPE_STRIPE; }
    Boolean	isHostdrive() { return hostdrive; }
    char *	allocateDescription();
    int		queryChilds();
    VRDev *	getChild(int which);
a232 14
    void	setHostdrive(ULONG os2idx = -1);
    void	addChild(VRDev * newchild,Boolean valid=True);

    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG offset,ULONG count,PVOID buffer);
    APIRET	write(ULONG offset,ULONG count,PVOID buffer);
};





#if 0
a234 17
  private:
    ULONG	os2access;
    int		childs;
    VRDev     **child;
    ULONG	size;

  public:
    void	setBuild(ULONG nextsec);
};


class VMirror : public VDriveWithRedundancy {
  private:
    Boolean	hostdrive;
    ULONG	size;
    Boolean	writable;

d236 1
a236 20
    VMirror(DEVID drive_id,int nchd);
    ~VMirror();

    void	forceUnwritable() { writable = False; }

    int		ioDeleteYourself();
    int		ioRemoveParent();
    int		ioChangeID(DEVID);
    int		ioSync();

    UCHAR	isArray() { return RDTYPE_MIRROR; }
    Boolean	isHostdrive() { return hostdrive; }

    void	setHostdrive(ULONG os2idx = -1);
    void	addChild(VRDev * newchild,Boolean valid=True);

    Boolean	isWritable() { return writable; }
    ULONG	querySize();
    APIRET	read(ULONG offset,ULONG count,PVOID buffer);
    APIRET	write(ULONG offset,ULONG count,PVOID buffer);
a238 1
#endif
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * $Source$
 * $Revision$
 * $Date$
 * $Locker$
d12 3
a14 1
 * $Log$
a34 3
  protected:
    Boolean	writable;

d36 1
a36 1
    Boolean		isWritable() {return writable;}
a37 1

d47 1
d53 2
a54 1
    ULONG	querySize();
d56 4
a59 2
    APIRET	read(ULONG block,ULONG count,PVOID buffer);
    APIRET	write(ULONG block,ULONG count,PVOID buffer);
d68 4
a71 3
 * V{F|O}RDev
 * The complete VRAID partition.  Either accessed via filter driver
 * or directly through OS/2.
d79 5
a83 1
    void	setParent(VRDrive * newparent) { parent = newparent; }
d85 2
a86 1
    /* Wenn die Config neu kommt, etc. */
d89 1
d91 3
a93 2
    DEVID const *	queryID();
    void		forceUnwritable() {writable = False;}
d97 9
d111 1
d118 1
d121 5
d127 2
d137 1
a137 1
    VOS2Disk *	os2dev;
d140 1
d146 1
d149 3
d153 6
d174 1
d179 1
d185 1
d188 1
d190 6
a210 5
  protected:
    ULONG	os2access;
    int		childs;
    VRDev     **child;

d212 2
a213 1
    int		ioDeleteYourself();		// "Remove yourself from disk"
d215 2
a216 2
    virtual void addChild(VRDev * newchild,Boolean valid=True) =0;
    void	setHostdrive(ULONG os2idx = -1);
d224 3
d228 1
d231 1
a231 1
    VSingle(DEVID drive_id,int nchd);
d234 3
d239 9
d250 1
d256 1
d259 4
d264 1
d270 3
d275 9
d286 1
d292 1
d295 4
d300 1
d306 3
d311 9
d322 1
d331 3
d336 3
d348 1
d350 1
d356 3
d361 6
d369 1
d374 2
@
