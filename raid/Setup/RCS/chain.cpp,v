head	1.12;
access;
symbols
	VSETUPv0_84:1.12
	VSETUP_82:1.11
	VSETUPv0_80:1.8
	VSETUPv0_71:1.3
	VSETUPv0_70:1.3;
locks; strict;
comment	@// @;


1.12
date	2000.08.17.02.14.41;	author vitus;	state Exp;
branches;
next	1.11;

1.11
date	2000.04.10.00.56.56;	author vitus;	state Exp;
branches;
next	1.10;

1.10
date	99.12.14.00.26.13;	author vitus;	state Exp;
branches;
next	1.9;

1.9
date	99.07.05.00.45.51;	author vitus;	state Exp;
branches;
next	1.8;

1.8
date	99.06.21.01.37.41;	author vitus;	state Exp;
branches;
next	1.7;

1.7
date	99.06.19.18.26.00;	author vitus;	state Exp;
branches;
next	1.6;

1.6
date	99.06.02.01.40.17;	author vitus;	state Exp;
branches;
next	1.5;

1.5
date	99.05.13.22.41.50;	author vitus;	state Exp;
branches;
next	1.4;

1.4
date	99.04.13.01.25.16;	author vitus;	state Exp;
branches;
next	1.3;

1.3
date	99.03.24.23.02.06;	author vitus;	state Exp;
branches;
next	1.2;

1.2
date	99.03.22.02.07.13;	author vitus;	state Exp;
branches;
next	1.1;

1.1
date	99.03.01.01.07.06;	author vitus;	state Exp;
branches;
next	;


desc
@Implements VChain class
@


1.12
log
@- method addChild() parameter 'datav' changed to sector no.  Ignored.
@
text
@/*
 * $Source: r:/source/driver/raid/setup/RCS/chain.cpp,v $
 * $Revision: 1.11 $
 * $Date: 2000/04/10 00:56:56 $
 * $Locker: vitus $
 *
 *	Implements VChain class.
 *
 * $Log: chain.cpp,v $
 * Revision 1.11  2000/04/10 00:56:56  vitus
 * - include VSetup.h instead of proto.h
 * - converted C++ to C comments
 *
 * Revision 1.10  1999/12/14 00:26:13  vitus
 * - more error logging
 *
 * Revision 1.9  1999/07/05 00:45:51  vitus
 * - addChild() gets additional flag "config sector valid"
 * - modifications to keep this flag in child table and honour it when reading
 *   from admin space
 *
 * Revision 1.8  1999/06/21 01:37:41  vitus
 * - corrected english spelling
 *
 * Revision 1.7  1999/06/19 18:26:00  vitus
 * - minor corrections to keep compiler happy
 *
 * Revision 1.6  1999/06/02 01:40:17  vitus
 * - queryIcon() returns ICO_INVCHILDARRAY if parent says that this
 *   child is invalid
 *
 * Revision 1.5  1999/05/13 22:41:50  vitus
 * - ioRemoveParent: clear parent's admin sector
 * - ioDeleteYourself: no disk i/o
 *
 * Revision 1.4  1999/04/13 01:25:16  vitus
 * - child[] now static member of object
 *
 * Revision 1.3  1999/03/24 23:02:06  vitus
 * - allocateDescription() adds drive ID to description
 *
 * Revision 1.2  1999/03/22 02:07:13  vitus
 * - implemented queryIcon() method
 * - ioDeleteYourself: first clear own sector and afterwards call childs
 * - read method reads all childs and compares.  Currently differences are
 *   only logged.  Better ideas?
 *
 * Revision 1.1  1999/03/01 01:07:06  vitus
 * Initial revision
 * ---------------------------------------------
 * This code is Copyright Vitus Jensen 1999-2000
 */
static char const vcid[]="$Id: chain.cpp,v 1.11 2000/04/10 00:56:56 vitus Exp vitus $";

#include <assert.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define __IBMC__	0
#define INCL_WINPOINTERS
#define INCL_DOS
#define INCL_DOSDEVIOCTL
#define INCL_ERRORS
#include <os2.h>

extern "C" {
#include "../../../Lib/defines.h"
#include "../../../Lib/verbose.h"
}
#include "VSetup.h"
#include "resources.h"
#include "drvif.h"

#include "dskinfo.hpp"
#include "Chain.hpp"





/*# ----------------------------------------------------------------------
 * VChain::VChain(drive_id,nchd)
 *
 * PARAMETER
 *	drive_id	ID of this chain
 *	nchd		child count
 *
 * RETURNS
 *	(nothing, C++)
 *
 * DESCRIPTION
 *	Creates a new VRAID object in memory.
 *
 * REMARKS
 */
VChain::VChain(DEVID drive_id,int nchd)
{
    parent = NULL;
    children = 0;
    size = 0;
    hostdrive = False;
    writable = True;
    memcpy(id, drive_id, sizeof(DEVID));

    inv_icon = WinLoadPointer(HWND_DESKTOP, NULLHANDLE, ICO_INVCHILDARRAY);
    rw_icon = WinLoadPointer(HWND_DESKTOP, NULLHANDLE, ICO_RAIDDRIVE);
    ro_icon = WinLoadPointer(HWND_DESKTOP, NULLHANDLE, ICO_DISABLEDARRAY);
}




/*# ----------------------------------------------------------------------
 * VChain::~VChain()
 *
 * PARAMETER
 *	(none, C++)
 * RETURNS
 *	(nothing, C++)
 * DESCRIPTION
 *	Destroys VRAID memory object.
 *
 * REMARKS
 */
VChain::~VChain()
{
    WinDestroyPointer(rw_icon);
    WinDestroyPointer(ro_icon);
}




/*# ----------------------------------------------------------------------
 * VChain::queryChildren()
 *
 * PARAMETER
 *	(none)
 * RETURNS
 *	count
 * DESCRIPTION
 *	Returns count of children.
 *
 * REMARKS
 */
int
VChain::queryChildren()
{
    return children;
}




/*# ----------------------------------------------------------------------
 * VChain::getChild(index)
 *
 * PARAMETER
 *	index		which child?
 * RETURNS
 *	pointer to child object
 * DESCRIPTION
 *	Returns pointer to a child, used for display purposes.
 *
 * REMARKS
 */
VRDev *
VChain::getChild(int index)
{
    if( index >= children )
	return 0;
    return child[index].rdev;
}




/*# ----------------------------------------------------------------------
 * VChain::allocateDescription()
 *
 * PARAMETER
 *	(none)
 * RETURNS
 *	pointer to description.
 *
 * DESCRIPTION
 *	Allocates and fill buffer containing description of our object.
 *
 * REMARKS
 */
char *
VChain::allocateDescription()
{
    char * descr = new char[80];
    if( hostdrive )
	sprintf(descr, "Chaining (OS/2 Drive %lu)\n"
		"ID %02X%02X%02X%02X%02X%02X    %lu MByte",
		os2access,
		id[0],id[1],id[2],id[3],id[4],id[5],
		size / 2 / 1024);
    else
	sprintf(descr, "Chaining\n"
		"ID %02X%02X%02X%02X%02X%02X    %lu MByte",
		id[0],id[1],id[2],id[3],id[4],id[5],
		size / 2 / 1024);
    return descr;
}




/*# ----------------------------------------------------------------------
 * VChain::queryIcon()
 *
 * PARAMETER
 *	(none)
 * RETURNS
 *	HPOINTER to display
 * DESCRIPTION
 *	Returns icon to reflect the logical state of this drive.
 *
 * REMARKS
 */
HPOINTER
VChain::queryIcon()
{
    if( parent != 0  &&  parent->isValidChild(this) == False )
	return inv_icon;
    else if( writable == True )
	return rw_icon;
    else
	return ro_icon;
}




/*# ----------------------------------------------------------------------
 * VChain::setHostdrive(os2idx)
 *
 * PARAMETER
 *	os2idx		accessable through this PDsk*() index
 *			or -1 if it isn't accessable.
 *
 * RETURNS
 *	(nothing)
 *
 * DESCRIPTION
 *	Marks this VRAID drives as a host drive with or w/o
 *	OS/2 access.
 *
 * REMARKS
 */
void
VChain::setHostdrive(ULONG os2idx)
{
    hostdrive = True;
    os2access = os2idx;
}




/*# ----------------------------------------------------------------------
 * VChain::addChild(newchild,cfgv,datav)
 *
 * PARAMETER
 *	newchild	pointer to child to add
 *	cfgv		configuration already written?
 *	datav		whether data of this child is valid (uptodate)
 *
 * RETURNS
 *	(nothing)
 *
 * DESCRIPTION
 *	Adds a new child to our VRAID object.
 *
 * REMARKS
 */
void
VChain::addChild(VRDev * newchild, Boolean cfgv, ULONG datav)
{
    assert( newchild != NULL );
    assert( datav == -1ul );

    /* Set double link between child and parent. */

    child[children].rdev = newchild;
    child[children].cfgok = cfgv;
    newchild->setParent(this);

    /* Update our object with information from child. */

    size += newchild->querySize();
    if( newchild->isWritable() == False )
	writable = False;			/* oups, it isn't 'changable' */

    ++children;
}




/*# ----------------------------------------------------------------------
 * VChain::ioDeleteYourself()
 *
 * PARAMETER
 *	this		to be removed
 *
 * RETURNS
 *	count of errors
 *
 * DESCRIPTION
 *	Remove any traces of ourself from physical storage.
 *	This is done by telling all children that we are about
 *	to be killed (they might set the "HOSTDRIVE" in their
 *	configuration sectors) and clearing our own sector.
 *
 * REMARKS
 */
int
VChain::ioDeleteYourself()
{
    int		i;
    int		errors = 0;


    /* Update all children (parent removed -> marked in sectors) */

    for( i = 0; i < children; ++i )
    {
	if( child[i].rdev != NULL )
	{
	    errors += child[i].rdev->ioRemoveParent();
	    child[i].rdev = NULL;		/* we don't need pointer anymore */
	}
    }

    return errors;
}




/*# ----------------------------------------------------------------------
 * VChain::ioRemoveParent()
 *
 * PARAMETER
 *	(none, C++)
 * RETURNS
 *	0		OK
 *
 * DESCRIPTION
 *	Removes any traces of parent from configuration sectors.  Means
 *	this array becomes hostdrive!
 *
 * REMARKS
 */
int
VChain::ioRemoveParent()
{
    PSEC_VRDEV	sec = new SEC_VRDEV;
    int		errors = 0;
    APIRET	rc;


    /* 1st: clear administrative sector of parent. */

    memset(sec, 0, SECTOR_SIZE);
    rc = write(1, 1, sec);
    if( rc != 0 )
    {
	Verbose(1, "VChain::ioRemoveParent", "can't clear parent SEC_VRDEV - rc %lu", rc);
	++errors;
    }


    /* 2nd: set RDFLAG_HOSTDRIVE in own configuration. */

    do
    {
	rc = read(0, 1, sec);			/* remember: 0 defines ourself */
	if( rc != 0 )
	{
	    Verbose(1, "VChain::ioRemoveParent", "can't read own SEC_VRDEV - rc %lu", rc);
	    ++errors;
	    break;
	}

	sec->u.s.flags |= RDFLAG_HOSTDRIVE;	/* no parent means hostdrive */
	sec->timestamp = time(NULL);		/* UTC of change */
	sec->crc = Crc16(sec, SECTOR_SIZE-2);	/* update CRC!!! */

	rc = write(0, 1, sec);
	if( rc != 0 )
	{
	    Verbose(1, "VChain::ioRemoveParent", "can't write own SEC_VRDEV - rc %lu", rc);
	    ++errors;
	    break;
	}

	parent = NULL;				/* none */
    }
    while(0);

    delete sec;
    return errors;
}




/*# ----------------------------------------------------------------------
 * VChain::ioChangeID(newid)
 *
 * PARAMETER
 *	newid		new ID
 * RETURNS
 *	count of errors
 *
 * DESCRIPTION
 *	Changes it's own DEVID.
 *
 * REMARKS
 */
int
VChain::ioChangeID(DEVID newid)
{
    PSEC_VRDEV	sec = new SEC_VRDEV;
    int		errors = 0;

    memcpy(id, newid, sizeof(DEVID));		/* update object */

    do
    {
	APIRET	rc;

	rc = read(0, 1, sec);			/* remember: 0 defines ourself */
	if( rc != 0 )
	{
	    Verbose(1,"VChain::ioChangeID", "can't read own SEC_VRDEV - rc %lu", rc);
	    ++errors;
	    break;
	}

	memcpy(sec->u.s.id, newid, sizeof(DEVID));
	sec->timestamp = time(NULL);		/* UTC of change */
	sec->crc = Crc16(sec, SECTOR_SIZE-2);	/* update CRC!!! */

	rc = write(0, 1, sec);
	if( rc != 0 )
	{
	    Verbose(1,"VChain::ioChangeID","can't write own SEC_VRDEV - rc %lu", rc);
	    ++errors;
	    break;
	}
    }
    while(0);

    delete sec;
    return errors;
}




/*# ----------------------------------------------------------------------
 * VChain::ioSync()
 *
 * PARAMETER
 *	(none, C++)
 * RETURNS
 *	count of errors
 *
 * DESCRIPTION
 *	'this' has been changed by the user -> update physical storage.
 *
 * REMARKS
 */
int
VChain::ioSync()
{
    PSEC_VRDEV	sec = new SEC_VRDEV;
    USHORT	i;
    int		errors = 0;


    /* First: fill configuration sector of current level. */

    memset(sec, 0, sizeof(*sec));
    memcpy(sec->sectype, "VRAIDDEVICE     ", 16);
    sec->timestamp = time(NULL);

    memcpy(sec->u.s.id, id, sizeof(DEVID));
    sec->u.s.type = RDTYPE_CHAIN;
    sec->u.s.flags = (UCHAR)(parent != 0 ? 0 : 0x80);

    sec->u.s.children = children;


    /* 2nd: recalculate drive size, correct size of children.
     * The current values were only wild guesses. */

    size = 0;
    for( i = 0; i < children; ++i )
    {
	sec->u.s.child[i].size = child[i].rdev->querySize();
	size += sec->u.s.child[i].size;
    }


    /* 3rd: update all children and record their IDs. */

    for( i = 0; i < children; ++i )
    {
	child[i].rdev->ioSync();
	memcpy(sec->u.s.child[i].id, child[i].rdev->queryID(), sizeof(DEVID));
    }


    /* Last: write administrative sector of current level. */

    sec->crc = Crc16(sec, SECTOR_SIZE-2);
    APIRET rc = write(0, 1, sec);
    if( rc != 0 )
    {
	Verbose(1, "VChain::ioSync", "write(0,1,...) - rc %lu, not updated", rc);
	++errors;
    }

    delete sec;
    return errors;
}




/*# ----------------------------------------------------------------------
 * VChain::querySize()
 *
 * PARAMETER
 *	(none, C++)
 * RETURNS
 *	size of array
 *
 * DESCRIPTION
 *	Guess!
 *
 * REMARKS
 */
ULONG
VChain::querySize()
{
    return size;
}




/*# ----------------------------------------------------------------------
 * VChain::read(offset,count,buffer)
 *
 * PARAMETER
 *	offset		offset in configuration space
 *	count		sector count
 *	buffer		sector data
 *
 * RETURNS
 *	0		OK
 *	/0		APIRET
 *
 * DESCRIPTION
 *	Reads data from configuration sectors of this VRAID drive.
 *
 * REMARKS
 */
APIRET
VChain::read(ULONG offset,ULONG count,PVOID buffer)
{
    PUCHAR	copybuf = new UCHAR[count];
    int		goodchildren = 0;
    APIRET	rc = VERROR_NO_CONTENTS;

    for( int i = 0; i < children; ++i )
    {
	if( !child[i].cfgok )
	    continue;				/* nothing on this child */

	rc = child[i].rdev->read(offset+1, count, buffer);
	if( rc != 0 )
	    continue;				/* Verbose() already called */
	if( goodchildren == 0 )
	    memcpy(copybuf, buffer, (size_t)count);
	else if( memcmp(copybuf, buffer, (size_t)count) != 0 )
	    Verbose(0, "VChain", "Data error when reading child %d, ignored", i);
	++goodchildren;
    }

    delete[] copybuf;
    return (goodchildren == 0 ? rc : 0);
}




/*# ----------------------------------------------------------------------
 * VChain::write(offset,count,buffer)
 *
 * PARAMETER
 *	offset		offset in configuratoin space
 *	count		sector count
 *	buffer		sector data
 *
 * RETURNS
 *	0		OK
 *	/0		APIRET
 *
 * DESCRIPTION
 *	Writes data to configuration sectors of this VRAID drive.
 *
 * REMARKS
 */
APIRET
VChain::write(ULONG offset,ULONG count,PVOID buffer)
{
    APIRET	rc = 0;

    for( int i = 0; i < children; ++i )
	rc |= child[i].rdev->write(offset+1, count, buffer);
    return rc;
}
@


1.11
log
@- include VSetup.h instead of proto.h
- converted C++ to C comments
@
text
@d3 2
a4 2
 * $Revision: 1.10 $
 * $Date: 1999/12/14 00:26:13 $
d10 4
d50 2
a51 2
 * ----------------------------------------
 * This code is Copyright Vitus Jensen 1999
d53 1
a53 1
static char const vcid[]="$Id: chain.cpp,v 1.10 1999/12/14 00:26:13 vitus Exp vitus $";
a59 1
#include <limits.h>
d283 1
a283 1
VChain::addChild(VRDev * newchild,Boolean cfgv,Boolean datav)
d286 1
@


1.10
log
@- more error logging
@
text
@d3 2
a4 2
 * $Revision: 1.9 $
 * $Date: 1999/07/05 00:45:51 $
d10 3
d49 1
a49 1
static char const vcid[]="$Id: chain.cpp,v 1.9 1999/07/05 00:45:51 vitus Exp vitus $";
d69 1
a71 1
#include "proto.h"
d81 2
a82 2
 * CALL
 *	VChain::VChain(drive_id,nchd)
d113 2
a114 2
 * CALL
 *	VChain::~VChain()
d134 2
a135 2
 * CALL
 *	VChain::queryChildren()
d155 2
a156 2
 * CALL
 *	VChain::getChild(index)
d178 2
a179 2
 * CALL
 *	VChain::allocateDescription()
d212 2
a213 2
 * CALL
 *	VChain::queryIcon()
d238 2
a239 2
 * CALL
 *	VChain::setHostdrive(os2idx)
d264 2
a265 2
 * CALL
 *	VChain::addChild(newchild,cfgv,datav)
d303 2
a304 2
 * CALL
 *	ioDeleteYourself()
d333 1
a333 1
	    child[i].rdev = NULL;		// we don't need pointer anymore
d344 2
a345 2
 * CALL
 *	VChain::ioRemoveParent()
d380 1
a380 1
	rc = read(0, 1, sec);			// remember: 0 defines ourself
d388 3
a390 3
	sec->u.s.flags |= RDFLAG_HOSTDRIVE;	// no parent means hostdrive
	sec->timestamp = time(NULL);		// UTC of change
	sec->crc = Crc16(sec, SECTOR_SIZE-2);	// update CRC!!!
d400 1
a400 1
	parent = NULL;				// none
d412 2
a413 2
 * CALL
 *	VChain::ioChangeID(newid)
d430 1
a430 1
    memcpy(id, newid, sizeof(DEVID));		// update object
d436 1
a436 1
	rc = read(0, 1, sec);			// remember: 0 defines ourself
d445 2
a446 2
	sec->timestamp = time(NULL);		// UTC of change
	sec->crc = Crc16(sec, SECTOR_SIZE-2);	// update CRC!!!
d466 2
a467 2
 * CALL
 *	VChain::ioSync()
d537 2
a538 2
 * CALL
 *	VChain::querySize()
d559 2
a560 2
 * CALL
 *	VChain::read(offset,count,buffer)
d585 1
a585 1
	    continue;				// nothing on this child
d589 1
a589 1
	    continue;				// Verbose() already called
d605 2
a606 2
 * CALL
 *	VChain::write(offset,count,buffer)
@


1.9
log
@- addChild() gets additional flag "config sector valid"
- modifications to keep this flag in child table and honour it when reading
  from admin space
@
text
@d3 2
a4 2
 * $Revision: 1.8 $
 * $Date: 1999/06/21 01:37:41 $
d10 5
d46 1
a46 1
static char const vcid[]="$Id: chain.cpp,v 1.8 1999/06/21 01:37:41 vitus Exp vitus $";
d359 1
d365 4
a368 1
    if( write(1, 1, sec) != 0 )
d370 1
a376 2
	APIRET	rc;

d380 1
a380 1
	    Verbose(1, "VChain", "can't read own SEC_VRDEV - rc %lu", rc);
d392 1
a392 1
	    Verbose(1, "VChain", "can't write own SEC_VRDEV - rc %lu", rc);
d436 1
a436 1
	    Verbose(1, "VChain", "can't read own SEC_VRDEV - rc %lu", rc);
d448 1
a448 1
	    Verbose(1, "VChain", "can't write own SEC_VRDEV - rc %lu", rc);
d520 1
a520 1
    if( rc )
d522 1
a522 1
	Verbose(1, "VChain", "write(0,1,...) - rc %lu, not updated", rc);
@


1.8
log
@- corrected english spelling
@
text
@d3 2
a4 2
 * $Revision: 1.7 $
 * $Date: 1999/06/19 18:26:00 $
d10 3
d41 1
a41 1
static char const vcid[]="$Id: chain.cpp,v 1.7 1999/06/19 18:26:00 vitus Exp vitus $";
d163 1
a163 1
    return child[index];
d257 1
a257 1
 *	VChain::addChild(newchild,valid)
d260 2
a261 1
 *	valid		whether this child is valid (uptodate)
d272 1
a272 1
VChain::addChild(VRDev * newchild,Boolean valid)
d278 2
a279 1
    child[children] = newchild;
d322 1
a322 1
	if( child[i] != NULL )
d324 2
a325 2
	    errors += child[i]->ioRemoveParent();
	    child[i] = NULL;			// we don't need pointer anymore
d494 2
a495 2
	size += child[i]->querySize();
	sec->u.s.child[i].size = child[i]->querySize();
d503 2
a504 2
	child[i]->ioSync();
	memcpy(sec->u.s.child[i].id, child[i]->queryID(), sizeof(DEVID));
d569 1
a569 1
    APIRET	rc;
d573 4
a576 1
	rc = child[i]->read(offset+1, count, buffer);
d616 1
a616 1
	rc |= child[i]->write(offset+1, count, buffer);
@


1.7
log
@- minor corrections to keep compiler happy
@
text
@d3 2
a4 2
 * $Revision: 1.6 $
 * $Date: 1999/06/02 01:40:17 $
d10 3
d38 1
a38 1
static char const vcid[]="$Id: chain.cpp,v 1.6 1999/06/02 01:40:17 vitus Exp vitus $";
d87 1
a87 1
    childs = 0;
d124 1
a124 1
 *	VChain::queryChilds()
d130 1
a130 1
 *	Returns count of childs.
d135 1
a135 1
VChain::queryChilds()
d137 1
a137 1
    return childs;
d158 1
a158 1
    if( index >= childs )
d274 1
a274 1
    child[childs] = newchild;
d283 1
a283 1
    ++childs;
d300 1
a300 1
 *	This is done by telling all childs that we are about
d313 1
a313 1
    /* Update all childs (parent removed -> marked in sectors) */
d315 1
a315 1
    for( i = 0; i < childs; ++i )
d480 1
a480 1
    sec->u.s.childs = childs;
d483 1
a483 1
    /* 2nd: recalculate drive size, correct size of childs.
d487 1
a487 1
    for( i = 0; i < childs; ++i )
d494 1
a494 1
    /* 3rd: update all childs and record their IDs. */
d496 1
a496 1
    for( i = 0; i < childs; ++i )
d563 1
a563 1
    int		goodchilds = 0;
d566 1
a566 1
    for( int i = 0; i < childs; ++i )
d571 1
a571 1
	if( goodchilds == 0 )
d575 1
a575 1
	++goodchilds;
d579 1
a579 1
    return (goodchilds == 0 ? rc : 0);
d607 1
a607 1
    for( int i = 0; i < childs; ++i )
@


1.6
log
@- queryIcon() returns ICO_INVCHILDARRAY if parent says that this
  child is invalid
@
text
@d3 2
a4 2
 * $Revision: 1.5 $
 * $Date: 1999/05/13 22:41:50 $
d10 4
d35 1
a35 1
static char const vcid[]="$Id: chain.cpp,v 1.5 1999/05/13 22:41:50 vitus Exp vitus $";
a463 1
    ULONG	ul;
d475 1
a475 1
    sec->u.s.flags = (parent != 0 ? 0 : 0x80);
d569 2
a570 2
	    memcpy(copybuf, buffer, count);
	else if( memcmp(copybuf, buffer, count) != 0 )
@


1.5
log
@- ioRemoveParent: clear parent's admin sector
- ioDeleteYourself: no disk i/o
@
text
@d3 2
a4 2
 * $Revision: 1.4 $
 * $Date: 1999/04/13 01:25:16 $
d10 4
d31 1
a31 1
static char const vcid[]="$Id: chain.cpp,v 1.4 1999/04/13 01:25:16 vitus Exp vitus $";
d86 1
d208 3
a210 1
    if( writable == True )
@


1.4
log
@- child[] now static member of object
@
text
@d3 2
a4 2
 * $Revision: 1.3 $
 * $Date: 1999/03/24 23:02:06 $
d10 3
d27 1
a27 1
static char const vcid[]="$Id: chain.cpp,v 1.3 1999/03/24 23:02:06 vitus Exp vitus $";
d299 1
a299 10
    /* 1st: clear administrative sector of current level. */

    PUCHAR	buffer = new UCHAR[SECTOR_SIZE];
    memset(buffer, 0, SECTOR_SIZE);
    if( write(0, 1, buffer) != 0 )
	++errors;
    delete[] buffer;


    /* 2nd: update all childs (parent removed -> marked in sector) */
d335 10
@


1.3
log
@- allocateDescription() adds drive ID to description
@
text
@d3 2
a4 2
 * $Revision: 1.2 $
 * $Date: 1999/03/22 02:07:13 $
d10 3
d24 1
a24 1
static char const vcid[]="$Id: chain.cpp,v 1.2 1999/03/22 02:07:13 vitus Exp vitus $";
a77 1
    child = new VRDev *[nchd];
a99 2
    delete[] child;				// delete table of childs

d294 1
@


1.2
log
@- implemented queryIcon() method
- ioDeleteYourself: first clear own sector and afterwards call childs
- read method reads all childs and compares.  Currently differences are
  only logged.  Better ideas?
@
text
@d3 2
a4 2
 * $Revision: 1.1 $
 * $Date: 1999/03/01 01:07:06 $
d10 6
d21 1
a21 1
static char const vcid[]="$Id: chain.cpp,v 1.1 1999/03/01 01:07:06 vitus Exp vitus $";
d169 5
a173 2
	sprintf(descr, "Chaining (OS/2 Drive %lu)\n%lu MByte",
		os2access, size / 2 / 1024);
d175 4
a178 1
	sprintf(descr, "Chaining\n%lu MByte", size / 2 / 1024);
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * $Source$
 * $Revision$
 * $Date$
 * $Locker$
d9 3
a11 1
 * $Log$
d15 1
a15 1
static char const vcid[]="$Id$";
d25 1
d35 1
d40 1
a40 1

d70 3
d93 3
d175 24
d241 2
d283 10
a292 1
    /* 1st: update all childs (parent removed -> marked in sector) */
d299 1
a299 1
	    child[i] = NULL;
a302 9

    /* 2nd: clear administrative sector of current level. */

    PUCHAR	buffer = new UCHAR[SECTOR_SIZE];
    memset(buffer, 0, SECTOR_SIZE);
    if( write(0, 1, buffer) != 0 )
	++errors;
    delete[] buffer;

d516 1
a516 1
 *	offset		offset in configuratoin space
a527 2
 *	Should read all childs and compare. xxx
 *	Should test 'valid'. xxx
d532 18
a549 1
    return child[0]->read(offset+1, count, buffer);
a570 1
 *	Should test 'valid'. xxx
@
