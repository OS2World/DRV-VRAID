head	1.7;
access;
symbols
	VSETUPv0_84:1.5
	VSETUP_82:1.5
	VSETUPv0_80:1.5
	VSETUPv0_71:1.5
	VSETUPv0_70:1.5
	VSETUPv0_60:1.3
	VSETUPv0_52:1.2
	VSETUPv0_51:1.2
	VSETUPv0_50:1.2
	VSETUPv0_20:1.1;
locks; strict;
comment	@ * @;


1.7
date	2005.06.17.06.01.08;	author vitus;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.21.00.56.53;	author vitus;	state Exp;
branches;
next	1.5;

1.5
date	99.03.25.00.30.45;	author vitus;	state Exp;
branches;
next	1.4;

1.4
date	99.02.09.02.51.05;	author vitus;	state Exp;
branches;
next	1.3;

1.3
date	98.12.13.23.08.41;	author vitus;	state Exp;
branches;
next	1.2;

1.2
date	98.09.20.20.39.05;	author vitus;	state Stab;
branches;
next	1.1;

1.1
date	98.04.29.02.27.59;	author vitus;	state Exp;
branches;
next	;


desc
@Dialog box to select which drive to dump and dump thread.
@


1.7
log
@- DumpPartitions: corrected display of drive size (hopefully)
- added New BSD license statement
- removed tabs
@
text
@/*
 * $Source: r:/source/driver/raid/setup/RCS/dump.cpp,v $
 * $Revision: 1.6 $
 * $Date: 2003/09/21 00:56:53 $
 * $Locker: vitus $
 *
 *      Dialog box to select which drive to dump and dump thread.
 *
 * $Log: dump.cpp,v $
 * Revision 1.6  2003/09/21 00:56:53  vitus
 * - DumpPartitions: fixed disk size calculation
 *
 * Revision 1.5  1999/03/25 00:30:45  vitus
 * - dumping calls PDskClose() whatever happens
 * - dumping stops at sectors w/o PHYSDEVICE/VRAIDDEVICE mark
 * - remaining printf's converted to Verbose(0,...)
 *
 * Revision 1.4  1999/02/09 02:51:05  vitus
 * - switched to C++
 *
 * Revision 1.3  1998/12/13 23:08:41  vitus
 * - changed as global headers moved to /source/Lib
 *
 * Revision 1.2  1998/09/20 20:39:05  vitus
 * - moved physdsk.h to ../../tools directory
 *
 * Revision 1.1  1998/04/29 02:27:59  vitus
 * Initial revision
 * -------------------------------------------
 *      Copyright (c) 1998-2001,2005, Vitus Jensen
 *      All rights reserved.
 *
 *      Redistribution and use in source and binary forms, with or without
 *      modification, are permitted provided that the following conditions are
 *      met:
 *
 *          * Redistributions of source code must retain the above copyright
 *            notice, this list of conditions and the following disclaimer.
 *          * Redistributions in binary form must reproduce the above copyright
 *            notice, this list of conditions and the following disclaimer in
 *            the documentation and/or other materials provided with the
 *            distribution.
 *          * Neither the name of Vitus Jensen nor the names of its
 *            contributors may be used to endorse or promote products derived
 *            from this software without specific prior written permission.
 *
 *      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *      "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *      A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
static char const vcid[]="$Id: dump.cpp,v 1.6 2003/09/21 00:56:53 vitus Exp vitus $";

#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define __IBMC__        0
#define INCL_DOS
#define INCL_DOSDEVIOCTL
#define INCL_ERRORS
#define INCL_WIN
#include <os2.h>

extern "C" {
#include "../../../Lib/defines.h"
#include "../../../Lib/verbose.h"
#include "../../../Lib/physdsk.h"
}
#include "resources.h"
#include "vsetup.h"
#include "../dsklayout.h"





/*# ----------------------------------------------------------------------
 * CALL
 * PARAMETER
 * RETURNS
 * DESCRIPTION
 * REMARKS
 */
PRIVATE void
DumpBuffer(char * output,void const * buffer,USHORT const cb)
{
    UCHAR       ascii[17];
    UCHAR const * p = (UCHAR *)buffer;
    USHORT      i;
    int         oi = 0;

    for( i = 0; i < cb; ++i, ++p )
    {
        if( (i % 16) == 0 )
            oi += sprintf(&output[oi], "%04X: ", i);
        oi += sprintf(&output[oi], "%02X", *p);
        ascii[i%16] = (isprint(*p) ? *p : '.');

        if( (i+1) % 16 == 0 )
        {
            ascii[16] = '\0';
            oi += sprintf(&output[oi], "\t%s\n", ascii);
        }
        else if( (i+1) % 8 == 0 )
            oi += sprintf(&output[oi], "-");
        else
            oi += sprintf(&output[oi], " ");
    }
    return;
}




/*# ----------------------------------------------------------------------
 * DumpPartitions(which)
 *
 * PARAMETER
 *      which           drive to dump or -1 for all drives
 *
 * RETURNS
 *      (nothing)
 *
 * DESCRIPTION
 *      Dumps all interesting sectors on one or all disks: MBR, PHYSDEV and
 *      all VRDEV sectors.
 *
 * REMARKS
 */
PRIVATE void _Optlink
DumpPartitions(PVOID dummy)
{
    ULONG       which = (ULONG)dummy;
    UCHAR       buffer[512];
    char        * output = new char[33*80];
    APIRET      rc;
    ULONG       devidx, devcnt;
    int         i;


    rc = PDskEnum(&devcnt);
    if( rc )
    {
        Verbose(0, "Dump", "PDskEnum - rc %lu", rc);
        delete[] output;
        return;
    }
    Verbose(0, "Dump", "Physical disks: %lu", devcnt);

    for( devidx = 0; devidx < devcnt; ++devidx )
    {
        ULONG                   hd;
        DEVICEPARAMETERBLOCK    dp;
        USHORT                  dataoffset;
        ULONG                   partoffset = 0;

        if( which != (ULONG)-1  &&  devidx != which )
            continue;                           /* ignore this one */


        rc = PDskOpen(devidx, &hd);
        if( rc != 0 )
        {
            Verbose(0, "Dump", "PDskOpen(%lu) - rc %lu", devidx, rc);
            continue;
        }

        do
        {
            Verbose(0,"Dump", "======== Disk %lu, handle %#lx ========", devidx, hd);

            rc = PDskQueryParam(hd, &dp);
            if( rc != 0 )
            {
                Verbose(0, "Dump", "PDskQueryParam - rc %lu", rc);
                break;
            }
            {
                ULONG size = (ULONG)dp.cSectorsPerTrack * (ULONG)dp.cHeads / 2ul;
                size /= 1024ul;
                size *= (ULONG)dp.cCylinders;

                Verbose(0,"Dump",
                        "Physical drive parameters: Cylinders: %d,"
                        " Heads: %d,"
                        " Sectors/Track: %d",
                        dp.cCylinders, dp.cHeads, dp.cSectorsPerTrack);
                Verbose(0, "Dump", "Drive capacity: %lu MBytes", size);
            }

            rc = PDskRead(hd, 0, 1, buffer);
            if( rc != 0 )
            {
                Verbose(0, "Dump", "PDskRead - rc %lu", rc);
                break;
            }

            DumpBuffer(output, buffer, 512);
            Verbose(0, "Dump", "-------- Dump of real partition sector --------\n%s",
                    output);

            {
                PMBR    sec = (PMBR)buffer;
                int     i;

                for( i = 0; i < 4; ++i )
                {
                    if( sec->PartitionTable[i].SysIndicator == VRAID_PARTTYPE )
                    {
                        partoffset = sec->PartitionTable[i].RelativeSectors;
                        break;
                    }
                }
                if( partoffset == 0 )
                {
                    Verbose(1, "Dump", "no VRAID partition on drive %u", devidx);
                    break;
                }
            }

            rc = PDskRead(hd, partoffset, 1, buffer);
            if( rc != 0 )
            {
                Verbose(0, "Dump", "PDskRead - rc %lu", rc);
                break;
            }

            DumpBuffer(output, buffer, 512);
            Verbose(0, "Dump", "-------- Dump of PHYSDEV sector (%lu) --------\n%s",
                    partoffset, output);
            {
                PSEC_PHYSDEV    sec = (PSEC_PHYSDEV)buffer;

                if( memcmp(sec->sectype, "PHYSDEVICE      ", 16) != 0 )
                {
                    Verbose(1, "Dump", "no PHYSDEV sector on partition");
                    break;
                }
                dataoffset = sec->u.s.adminspace;
            }

            for( i = 1; (((PSEC_VRDEV)buffer)->u.s.flags & 0x80) == 0; ++i )
            {
                rc = PDskRead(hd, partoffset+i, 1, buffer);
                if( rc != 0 )
                {
                    Verbose(0, "Dump", "PDskRead - rc %lu", rc);
                    break;
                }

                DumpBuffer(output, buffer, 512);
                Verbose(0,
                        "Dump", "-------- Dump of VRDEV sector (%lu) --------\n%s",
                        partoffset+i, output);
                if( memcmp(((PSEC_VRDEV)buffer)->sectype,"VRAIDDEVICE     ",16) != 0)
                {
                    Verbose(1, "Dump", "no VRAIDEVICE mark");
                    break;
                }
            }

            /* Now dump first data sector, it may contain a partition sector. */

            rc = PDskRead(hd, partoffset+dataoffset, 1, buffer);
            if( rc != 0 )
            {
                Verbose(0, "Dump", "PDskRead - rc %lu", rc);
                break;
            }

            DumpBuffer(output, buffer, 512);
            Verbose(0,
                    "Dump", "-------- Dump of first data sector (%lu) --------\n%s",
                    partoffset+dataoffset, output);
        }
        while( 0 );

        PDskClose(hd);

    } /* for every device*/

    delete[] output;
    return;
}








/* **********************************************************************
 * **** Public Entries **************************************************
 * ******************************************************************* */

/*# ----------------------------------------------------------------------
 * CALL
 *      DumpDialogProc(hwnd,msg,mp1,mp2)
 * PARAMETER
 *      hwnd,msg,mp1,mp2        standard parameter
 *      WM_INITDLG              mp2 contains hwnd
 * RETURNS
 *      MRESULT                 standard result code
 *      dialog handling returns id of control which ended dialog
 * GLOBAL
 *      none
 * DESPRIPTION
 *      Nothing special, selfcontained dialog procedure.
 *
 * REMARKS
 */
PUBLIC MRESULT EXPENTRY
DumpDialogProc(HWND hwnd,ULONG msg,MPARAM mp1,MPARAM mp2)
{
    static HWND parent;

    switch( msg )
    {
      case WM_INITDLG:
        parent = HWNDFROMMP(mp2);
        break;

      case WM_COMMAND:
        switch( SHORT1FROMMP(mp1) )
        {
          case DID_OK:
            {
                char    chText[200];
                LONG    cbText;
                ULONG   ul;
                int     i;

                cbText = WinQueryWindowText(WinWindowFromID(hwnd, EF_DRVINDEX),
                                            sizeof(chText), chText);
                for( i = 0; i < cbText; ++i )
                    if( !isdigit(chText[i])  &&  chText[i] != '-' )
                    {
                        MyMessageBox( 1, hwnd, "only numerics allowed!" );
                        return 0;
                    }

                /* Start thread. */

                sscanf(chText, " %ld", &ul);
                _beginthread(DumpPartitions, NULL, STACK_SIZE, (PVOID)ul);

                WinDismissDlg(hwnd, DID_START);
            }
            return 0;

          case DID_CANCEL:
            WinDismissDlg(hwnd, DID_CANCEL);
            return 0;
        }
        break;

      default:
        break;
    }

    return WinDefDlgProc(hwnd, msg, mp1, mp2);
}
@


1.6
log
@- DumpPartitions: fixed disk size calculation
@
text
@d2 4
a5 4
 * $Source$
 * $Revision$
 * $Date$
 * $Locker$
d7 1
a7 1
 *	Dialog box to select which drive to dump and dump thread.
d10 3
d30 28
a57 1
 * This code is Copyright Vitus Jensen 1998-99
d59 1
a59 1
static char const vcid[]="$Id$";
d66 1
a66 1
#define __IBMC__	0
d96 1
a96 1
    UCHAR	ascii[17];
d98 2
a99 2
    USHORT	i;
    int		oi = 0;
d103 14
a116 14
	if( (i % 16) == 0 )
	    oi += sprintf(&output[oi], "%04X: ", i);
	oi += sprintf(&output[oi], "%02X", *p);
	ascii[i%16] = (isprint(*p) ? *p : '.');

	if( (i+1) % 16 == 0 )
	{
	    ascii[16] = '\0';
	    oi += sprintf(&output[oi], "\t%s\n", ascii);
	}
	else if( (i+1) % 8 == 0 )
	    oi += sprintf(&output[oi], "-");
	else
	    oi += sprintf(&output[oi], " ");
d128 1
a128 1
 *	which		drive to dump or -1 for all drives
d131 1
a131 1
 *	(nothing)
d134 2
a135 2
 *	Dumps all interesting sectors on one or all disks: MBR, PHYSDEV and
 *	all VRDEV sectors.
d142 6
a147 6
    ULONG	which = (ULONG)dummy;
    UCHAR	buffer[512];
    char	* output = new char[33*80];
    APIRET	rc;
    ULONG	devidx, devcnt;
    int		i;
d153 3
a155 3
	Verbose(0, "Dump", "PDskEnum - rc %lu", rc);
	delete[] output;
	return;
d161 125
a285 120
	ULONG			hd;
	DEVICEPARAMETERBLOCK	dp;
	USHORT			dataoffset;
	ULONG			partoffset = 0;

	if( which != (ULONG)-1  &&  devidx != which )
	    continue;				/* ignore this one */


	rc = PDskOpen(devidx, &hd);
	if( rc != 0 )
	{
	    Verbose(0, "Dump", "PDskOpen(%lu) - rc %lu", devidx, rc);
	    continue;
	}

	do
	{
	    Verbose(0,"Dump", "======== Disk %lu, handle %#lx ========", devidx, hd);

	    rc = PDskQueryParam(hd, &dp);
	    if( rc != 0 )
	    {
		Verbose(0, "Dump", "PDskQueryParam - rc %lu", rc);
		break;
	    }

	    Verbose(0, "Dump", "Physical drive parameters: Cylinders: %d, Heads: %d,"
		    " Sectors/Track: %d",
		    dp.cCylinders, dp.cHeads, dp.cSectorsPerTrack);
	    Verbose(0, "Dump", "Drive capacity: %lu MBytes",
		    ((ULONG)dp.cSectorsPerTrack * (ULONG)dp.cHeads / 2ul
		     * (ULONG)dp.cCylinders) / 1024ul);

	    rc = PDskRead(hd, 0, 1, buffer);
	    if( rc != 0 )
	    {
		Verbose(0, "Dump", "PDskRead - rc %lu", rc);
		break;
	    }

	    DumpBuffer(output, buffer, 512);
	    Verbose(0, "Dump", "-------- Dump of real partition sector --------\n%s",
		    output);

	    {
		PMBR	sec = (PMBR)buffer;
		int	i;

		for( i = 0; i < 4; ++i )
		{
		    if( sec->PartitionTable[i].SysIndicator == VRAID_PARTTYPE )
		    {
			partoffset = sec->PartitionTable[i].RelativeSectors;
			break;
		    }
		}
		if( partoffset == 0 )
		{
		    Verbose(1, "Dump", "no VRAID partition on drive %u", devidx);
		    break;
		}
	    }

	    rc = PDskRead(hd, partoffset, 1, buffer);
	    if( rc != 0 )
	    {
		Verbose(0, "Dump", "PDskRead - rc %lu", rc);
		break;
	    }

	    DumpBuffer(output, buffer, 512);
	    Verbose(0, "Dump", "-------- Dump of PHYSDEV sector (%lu) --------\n%s",
		    partoffset, output);
	    {
		PSEC_PHYSDEV	sec = (PSEC_PHYSDEV)buffer;

		if( memcmp(sec->sectype, "PHYSDEVICE      ", 16) != 0 )
		{
		    Verbose(1, "Dump", "no PHYSDEV sector on partition");
		    break;
		}
		dataoffset = sec->u.s.adminspace;
	    }

	    for( i = 1; (((PSEC_VRDEV)buffer)->u.s.flags & 0x80) == 0; ++i )
	    {
		rc = PDskRead(hd, partoffset+i, 1, buffer);
		if( rc != 0 )
		{
		    Verbose(0, "Dump", "PDskRead - rc %lu", rc);
		    break;
		}

		DumpBuffer(output, buffer, 512);
		Verbose(0,
			"Dump", "-------- Dump of VRDEV sector (%lu) --------\n%s",
			partoffset+i, output);
		if( memcmp(((PSEC_VRDEV)buffer)->sectype,"VRAIDDEVICE     ",16) != 0)
		{
		    Verbose(1, "Dump", "no VRAIDEVICE mark");
		    break;
		}
	    }

	    /* Now dump first data sector, it may contain a partition sector. */

	    rc = PDskRead(hd, partoffset+dataoffset, 1, buffer);
	    if( rc != 0 )
	    {
		Verbose(0, "Dump", "PDskRead - rc %lu", rc);
		break;
	    }

	    DumpBuffer(output, buffer, 512);
	    Verbose(0,
		    "Dump", "-------- Dump of first data sector (%lu) --------\n%s",
		    partoffset+dataoffset, output);
	}
	while( 0 );
d287 1
a287 1
	PDskClose(hd);
d308 1
a308 1
 *	DumpDialogProc(hwnd,msg,mp1,mp2)
d310 2
a311 2
 *	hwnd,msg,mp1,mp2	standard parameter
 *	WM_INITDLG		mp2 contains hwnd
d313 2
a314 2
 *	MRESULT			standard result code
 *	dialog handling returns id of control which ended dialog
d316 1
a316 1
 *	none
d318 1
a318 1
 *	Nothing special, selfcontained dialog procedure.
d325 1
a325 1
    static HWND	parent;
d330 2
a331 2
	parent = HWNDFROMMP(mp2);
	break;
d334 32
a365 32
	switch( SHORT1FROMMP(mp1) )
	{
	  case DID_OK:
	    {
		char	chText[200];
		LONG	cbText;
		ULONG	ul;
		int	i;

		cbText = WinQueryWindowText(WinWindowFromID(hwnd, EF_DRVINDEX),
					    sizeof(chText), chText);
		for( i = 0; i < cbText; ++i )
		    if( !isdigit(chText[i])  &&  chText[i] != '-' )
		    {
			MyMessageBox( 1, hwnd, "only numerics allowed!" );
			return 0;
		    }

		/* Start thread. */

		sscanf(chText, " %ld", &ul);
		_beginthread(DumpPartitions, NULL, STACK_SIZE, (PVOID)ul);

		WinDismissDlg(hwnd, DID_START);
	    }
	    return 0;

	  case DID_CANCEL:
	    WinDismissDlg(hwnd, DID_CANCEL);
	    return 0;
	}
	break;
d368 1
a368 1
	break;
@


1.5
log
@- dumping calls PDskClose() whatever happens
- dumping stops at sectors w/o PHYSDEVICE/VRAIDDEVICE mark
- remaining printf's converted to Verbose(0,...)
@
text
@d2 4
a5 4
 * $Source: r:/source/driver/raid/setup/RCS/dump.cpp,v $
 * $Revision: 1.4 $
 * $Date: 1999/02/09 02:51:05 $
 * $Locker: vitus $
d10 5
d29 1
a29 1
static char const vcid[]="$Id: dump.cpp,v 1.4 1999/02/09 02:51:05 vitus Exp vitus $";
d95 2
a96 2
 * CALL
 *	DumpPartitions(which)
d101 1
a101 1
 *	0		OK
d104 3
d162 2
a163 3
		    (ULONG)(((ULONG)dp.cSectorsPerTrack
			     * 512 * ((ULONG)dp.cHeads)
			     * (ULONG)dp.cCylinders) / 1024) / 1024);
@


1.4
log
@- switched to C++
@
text
@d3 2
a4 2
 * $Revision: 1.3 $
 * $Date: 1998/12/13 23:08:41 $
d10 3
d24 1
a24 1
static char const vcid[]="$Id: dump.cpp,v 1.3 1998/12/13 23:08:41 vitus Exp vitus $";
d27 1
d131 1
d135 1
a135 1
	    Verbose(0, "Dump", "PDskOpen - rc %lu", rc);
a137 1
	printf("======== Disk %lu, handle %lu ========\n", devidx, hd);
d139 1
a139 2
	rc = PDskQueryParam(hd, &dp);
	if( rc != 0 )
d141 1
a141 3
	    Verbose(0, "Dump", "PDskQueryParam - rc %lu", rc);
	    continue;
	}
d143 6
a148 7
	printf("Physical drive parameters: Cylinders: %d, Heads: %d,"
	       " Sectors/Track: %d\n",
	       dp.cCylinders, dp.cHeads, dp.cSectorsPerTrack);
	printf("Drive capacity: %lu MBytes\n",
	       (ULONG)(((ULONG)dp.cSectorsPerTrack
			* 512 * ((ULONG)dp.cHeads)
			* (ULONG)dp.cCylinders) / 1024) / 1024);
d150 7
a156 6
	rc = PDskRead(hd, 0, 1, buffer);
	if( rc != 0 )
	{
	    Verbose(0, "Dump", "PDskRead - rc %lu", rc);
	    continue;
	}
d158 6
a163 3
	DumpBuffer(output, buffer, 512);
	Verbose(0, "Dump", "-------- Dump of real partition sector --------\n%s",
		output);
d165 3
a167 3
	{
	    PMBR	sec = (PMBR)buffer;
	    int		i;
a168 1
	    for( i = 0; i < 4; ++i )
d170 12
a181 1
		if( sec->PartitionTable[i].SysIndicator == VRAID_PARTTYPE )
d183 1
a183 1
		    partoffset = sec->PartitionTable[i].RelativeSectors;
d187 3
a189 1
	    if( partoffset == 0 )
d191 16
a206 2
		Verbose(1, "Dump", "no VRAID partition on drive %u", devidx);
		continue;
a207 1
	}
d209 8
a216 6
	rc = PDskRead(hd, partoffset, 1, buffer);
	if( rc != 0 )
	{
	    Verbose(0, "Dump", "PDskRead - rc %lu", rc);
	    continue;
	}
d218 10
a227 5
	DumpBuffer(output, buffer, 512);
	Verbose(0, "Dump", "-------- Dump of PHYSDEV sector (%lu) --------\n%s",
		partoffset, output);
	{
	    PSEC_PHYSDEV	sec = (PSEC_PHYSDEV)buffer;
d229 1
a229 2
	    dataoffset = sec->u.s.adminspace;
	}
d231 1
a231 3
	for( i = 1; (((PSEC_VRDEV)buffer)->u.s.flags & 0x80) == 0; ++i )
	{
	    rc = PDskRead(hd, partoffset+i, 1, buffer);
d239 3
a241 2
	    Verbose(0, "Dump", "-------- Dump of VRDEV sector (%lu) --------\n%s",
		    partoffset+i, output);
d243 1
d245 1
a245 1
	/* Now dump first data sector, it may contain a partition sector. */
d247 1
a247 13
	rc = PDskRead(hd, partoffset+dataoffset, 1, buffer);
	if( rc != 0 )
	{
	    Verbose(0, "Dump", "PDskRead - rc %lu", rc);
	    break;
	}

	DumpBuffer(output, buffer, 512);
	Verbose(0, "Dump", "-------- Dump of first data sector (%lu) --------\n%s",
	       partoffset+dataoffset, output);

	PDskClose(hd);
    }
@


1.3
log
@- changed as global headers moved to /source/Lib
@
text
@d2 3
a4 3
 * $Source: r:/source/driver/raid/setup/RCS/dump.c,v $
 * $Revision: 1.2 $
 * $Date: 1998/09/20 20:39:05 $
d9 4
a12 1
 * $Log: dump.c,v $
d18 2
d21 1
a21 1
static char const vcid[]="$Id: dump.c,v 1.2 1998/09/20 20:39:05 vitus Stab vitus $";
d27 1
d34 1
d38 1
d47 9
a55 2
PRIVATE VOID
DumpBuffer(PUCHAR output,VOID const * buffer,USHORT const cb)
d58 1
a58 1
    UCHAR const * p = buffer;
d97 1
a97 1
PRIVATE void
d102 1
a102 1
    PUCHAR	output = malloc(33*80);
a106 5
    if( output == NULL )
    {
	Verbose(0, "Dump", "memory problem");
	return;
    }
d112 1
a112 1
	free(output);
d162 1
a162 1
	    PMBR	sec = (PVOID)buffer;
d191 1
a191 1
	    PSEC_PHYSDEV	sec = (PVOID)buffer;
d226 1
a226 1
    free(output);
@


1.2
log
@- moved physdsk.h to ../../tools directory
@
text
@d2 3
a4 3
 * $Source: d:/source/driver/raid/setup/RCS/dump.c,v $
 * $Revision: 1.1 $
 * $Date: 1998/04/29 02:27:59 $
d10 3
d16 1
a16 1
static char const id[]="$Id: dump.c,v 1.1 1998/04/29 02:27:59 vitus Exp vitus $";
d28 3
a30 3
#include "../../../tools/defines.h"
#include "../../../tools/verbose.h"
#include "../../../tools/physdsk.h"
d39 1
a39 1
PRIVATE void
d70 1
a70 1
/*#
d75 1
d78 1
a78 1
 * GLOBAL
d231 1
a231 1
/*
d295 1
@


1.1
log
@Initial revision
@
text
@d2 4
a5 4
 * $Source$
 * $Revision$
 * $Date$
 * $Author$
d7 1
a7 1
 * Dialog box to select which drive to dump and dump thread.
d9 3
a11 1
 * $Log$
d13 1
a13 1
static char const id[]="$Id: sample.c,v 1.1 1996/03/17 21:10:19 vitus Exp $";
d27 1
a29 1
#include "physdsk.h"
@
