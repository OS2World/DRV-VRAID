head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	98.03.04.02.13.51;	author vitus;	state Exp;
branches;
next	1.4;

1.4
date	97.12.16.02.28.17;	author vitus;	state Exp;
branches;
next	1.3;

1.3
date	97.12.08.23.06.34;	author vitus;	state Exp;
branches;
next	1.2;

1.2
date	97.12.06.01.01.54;	author vitus;	state Exp;
branches;
next	1.1;

1.1
date	97.10.28.02.10.24;	author vitus;	state Exp;
branches;
next	;


desc
@Creates DSKPerf.flt
@


1.5
log
@- changed DDK location
- new version 0.71
@
text
@# -*- Mode: makefile -*-
# $Source: d:/source/driver/perf/RCS/makefile,v $
#
# $Revision: 1.4 $
# $Date: 1997/12/16 02:28:17 $
# $Locker: vitus $
#
# Driver Name: SCSOpt.flt - modify performance related mode pages
#
# Usage: DMake [debug] [all]
#
# $Log: makefile,v $
# Revision 1.4  1997/12/16 02:28:17  vitus
# - renamed driver
# - added generation of SCSIOpt.exe
#
# Revision 1.3  1997/12/08 23:06:34  vitus
# - removed traces from DSKSleep and LOCKDRV
#
# Revision 1.2  1997/12/06 01:01:54  vitus
# - enabled support for WatCom C
#
# Revision 1.1  1997/10/28 02:10:24  vitus
# Initial revision
#


# Set defaults if not passed on commandline
#
LIST *= 0

VERSION = 0
SUBVERSION = 71




# Locations w/ includes, libs and tools
#
DDK = D:\Ddk\Base
DDKTOOLS = D:\Ddk\Tools


INC    = $(DDK)\Inc
H      = $(DDK)\H
LIB    = $(DDK)\Lib
DISKH  = $(DDK)\Src\Dev\dasd\Diskh
DHLIB  = $(DDK)\Src\Dev\Dasd\Devhelp
ADDLIB = $(DDK)\Src\Dev\Dasd\Addcalls
HFLAGS= -d -f -w -s


# Compiler and other tools
# Compiler are assumed to be installed so that they can
# compile applications (header, libraries, etc).  Special
# settings for driver development will be accounted for.
# If environment variable WATCOM isn't set we assume MicroSoft C 5.1
# or higher (tested with 6.0).

.IF $(WATCOM) == $(NULL)
CC = cl -nologo -c
AS = ml -nologo -c
.ELSE
CC = wcc -zq
AS =  $(DDKTOOLS)\Alp -Mb
.ENDIF
LINK = $(DDK)\Tools\Link /ba
MAPSYM = mapsym
H2INC = h2inc


# Compiler and Linker Options

.IF $(WATCOM) == $(NULL)
AINC	= -I$(INC)
AFLAGS	= -Cp
ADFLAGS	= -Zm -Cp -DDEBUG
CINC	= -I$(H) -I$(DISKH)
CDEF	=  -DVERSION=$(VERSION) -DSUBVERSION=$(SUBVERSION)
CFLAGS	= -Zp1 -G2ms -ASw -W3 -Ox
CDFLAGS	= -Zp1 -G2ms -ASw -W3 -DDEBUG -Oi

LIBS	= $(DHLIB)\Dhcalls.lib $(ADDLIB)\Addcalls.lib

.ELSE
AINC	= -I:$(INC)
AFLAGS	= -D:WATCOMC
ADFLAGS	= -D:WATCOMC -D:DEBUG
CINC	= -i=$(H) -i=$(DISKH)
CDEF	= -dVERSION=$(VERSION) -dSUBVERSION=$(SUBVERSION)
CFLAGS	= -ms -zu -zdp -zff -zgf -5 -oxs -s -wx -zl -zp1 -d1+
CDFLAGS	= -ms -zu -zdp -zff -zgf -zc -3 -oi -s -wx -zl -zp1 -hc -d1+ -DDEBUG

LIBS	= 

.ENDIF

LFLAGS	= /map /nod /exepack /packd /a:16 /far
RFLAGS	= -r



#****************************************************************************
# Set up Macros that will contain all the different dependencies for the
# executables and dlls etc. that are generated.
#****************************************************************************


# OBJ files
#
OBJ1 =  o\Startup.obj o\data.obj o\Str1.obj
OBJ2 =  o\Ioctl.obj o\Init1.obj o\Printk.obj
OBJ3 =	o\Cmdparse.obj

#       Debug files
#
DBJ1 =	$(OBJ1:s/obj/dbj/) o\Dprintf.dbj
DBJ2 =	$(OBJ2:s/obj/dbj/)
DBJ3 =	$(OBJ3:s/obj/dbj/)

# Complete lists
#
OBJS =	$(OBJ1) $(OBJ2) $(OBJ3)
DBJS =	$(DBJ1) $(DBJ2) $(DBJ3)

.IF $(WATCOM) == $(NULL)
CLIB =	anulrem.obj anfauldi.obj anuldiv.obj
.ELSE
CLIB =	i4d.obj
.ENDIF



#****************************************************************************
#   Setup the inference rules for compiling and assembling source code to
#   obejct code.
#****************************************************************************


.IF $(WATCOM) == $(NULL)
o\%.obj : %.asm
	$(AS) $(AFLAGS) $(AINC) -Fllist\$*.cod -Fo$@@ $*.asm

o\%.dbj : %.asm
	$(AS) $(ADFLAGS) $(AINC) -Fllist\$*.dod -Fo$@@ $*.asm

o\%.obj : %.c 'scsiopt.h' 'proto.h' 'extern.h'
	$(CC) $(CFLAGS) $(CINC) -Fllist\$*.cod -Fo$@@ $*.c

o\%.dbj : %.c 'scsiopt.h' 'proto.h' 'extern.h'
	$(CC) $(CDFLAGS) $(CINC) -Fllist\$*.dod -Fo$@@ $*.c

.ELSE

o\%.obj : %.asm
	$(AS) $(AFLAGS) $(AINC) $*.asm -Fl:list\$*.cod -Fo:$@@

o\%.dbj : %.asm
	$(AS) $(ADFLAGS) $(AINC) $*.asm -Fl:list\$*.dod -Fo:$@@

o\%.obj : %.c 'scsiopt.h' 'proto.h' 'extern.h'
	$(CC) $(CFLAGS) $(CINC) $(CDEF) -fo=$@@ $*.c
	wdisasm -b -l=list\$*.cod -s=$*.c $@@

o\%.dbj : %.c 'scsiopt.h' 'proto.h' 'extern.h'
	$(CC) $(CDFLAGS) $(CINC) $(CDEF) -fo=$@@ $*.c
	wdisasm -b -l=list\$*.dod -s=$*.c $@@
.ENDIF

%.inc : %.h
	$(H2INC) $(HFLAGS) $*.h -o $*.inc




#****************************************************************************
#   Target Information
#****************************************************************************

# to be scanned by bldlevel.exe (but doesn't work?)

FILEVER = @@\#Vitus Jensen:0.70\#@@



# Should be the default tag for all general processing

.IF $(WATCOM) == $(NULL)
all: scsiopt.flt
.ELSE
all: scsiopt.flt scsiopt.exe
.ENDIF

debug: scsioptd.flt

scsiopt.exe: scsiopt.c scsioptpub.h
	wcl386 -zq -bt=OS2 -oax -i=$(WATCOM)\H\OS2 scsiopt.c


clean:
	+if exist *.lnk		del *.lnk
	+if exist o\*.obj	del o\*.obj
	+if exist o\*.dbj	del o\*.dbj
	+if exist list\*.cod	del list\*.cod
	+if exist list\*.dod	del list\*.dod
	+if exist *.sym		del *.sym
	+if exist *.sys		del *.sys
	+if exist *.tff		del *.tff


#****************************************************************************
#   OBJ dependant  rules for compiling and assembling source code
#****************************************************************************

o\Cmdparse.obj o\Cmdparse.dbj : cmdparse.c cmdproto.h \
	cmdphdr.h cmdparse.h cmdpdefs.h

o\Init1.obj o\Init1.dbj : init1.c modepages.h cmdphdr.h cmdparse.h cmdpdefs.h

o\Ioctl.obj o\Ioctl.dbj : ioctl.c scsioptpub.h





#*****************************************************************************
#   Linker commands
#*****************************************************************************


scsiopt.flt: $(OBJS) $(LIBS) makefile
	$(LINK) $(LFLAGS) @@$(mktmp,$*.lnk	\
		$(OBJ1) +			\n\
		$(CLIB) +			\n\
		$(OBJ2) +			\n\
		$(OBJ3)				\n\
		$*.flt				\n\
		$*.map				\n\
		$(LIBS)				\n\
		$(mktmp,$*.def			\
			LIBRARY SCSIOpt		\n\
			DESCRIPTION "$(FILEVER) SCSI Optimizer" \n\
			PROTMODE			\n\
			SEGMENTS			\n\
			 DDHeader	CLASS 'CONST'	\n\
			 CONST		CLASS 'CONST'	\n\
			 CONST		CLASS 'DATA'	\n\
			 CONST2		CLASS 'DATA'	\n\
			 LIBDATA	CLASS 'DATA'	\n\
			 _DATA		CLASS 'DATA'	\n\
			 _BSS		CLASS 'BSS'	\n\
			 LIBCODE	CLASS 'CODE'	\n\
			 'Code'		CLASS 'CODE'	\n\
			 _TEXT		CLASS 'CODE'	\n\
			 SwapData	CLASS 'FAR_DATA' IOPL	\n\
			 INITDATA	CLASS 'FAR_DATA'\n); )
	$(MAPSYM) $*.map


scsioptd.flt: $(DBJS) $(LIBS) makefile
	$(LINK) $(LFLAGS) @@$(mktmp,$*.lnk	\
		$(DBJ1) +			\n\
		$(CLIB) +			\n\
		$(DBJ2) +			\n\
		$(DBJ3)				\n\
		$*.flt				\n\
		$*.map				\n\
		$(LIBS)				\n\
		$(mktmp,$*.def			\
			LIBRARY SCSIOpt		\n\
			DESCRIPTION "$(FILEVER) SCSI Optimizer" \n\
			PROTMODE			\n\
			SEGMENTS			\n\
			 DDHeader	CLASS 'CONST'	\n\
			 CONST		CLASS 'CONST'	\n\
			 CONST		CLASS 'DATA'	\n\
			 CONST2		CLASS 'DATA'	\n\
			 LIBDATA	CLASS 'DATA'	\n\
			 _DATA		CLASS 'DATA'	\n\
			 _BSS		CLASS 'BSS'	\n\
			 LIBCODE	CLASS 'CODE'	\n\
			 'Code'		CLASS 'CODE'	\n\
			 _TEXT		CLASS 'CODE'	\n\
			 SwapData	CLASS 'FAR_DATA' IOPL	\n\
			 INITDATA	CLASS 'FAR_DATA'\n); )
	$(MAPSYM) $*.map


#****************************************************************************
@


1.4
log
@- renamed driver
- added generation of SCSIOpt.exe
@
text
@d2 1
a2 1
# $Source: e:/source/driver/perf/RCS/makefile,v $
d4 2
a5 2
# $Revision: 1.3 $
# $Date: 1997/12/08 23:06:34 $
d13 4
d33 1
a33 1
SUBVERSION = 70
d40 2
a41 2
DDK = E:\Ddk\Base
DDKTOOLS = E:\Ddk\Tools
@


1.3
log
@- removed traces from DSKSleep and LOCKDRV
@
text
@d4 2
a5 2
# $Revision: 1.2 $
# $Date: 1997/12/06 01:01:54 $
d8 1
a8 1
# Driver Name: DSKPERF.FLT - modify performance related mode pages
d13 3
d36 2
a37 1
DDK = e:\Ddk\Base
a42 1
DDKTOOLS = E:\Ddk\Tools
d50 1
a50 1
# Compiler are assume to be installed so that they can
d53 2
d107 1
a107 1
OBJ1 =  o\Segments.obj o\data.obj o\Str1.obj
d143 1
a143 1
o\%.obj : %.c 'dskperf.h' 'proto.h' 'extern.h'
d146 1
a146 1
o\%.dbj : %.c 'dskperf.h' 'proto.h' 'extern.h'
d157 1
a157 1
o\%.obj : %.c 'dskperf.h' 'proto.h' 'extern.h'
d161 1
a161 1
o\%.dbj : %.c 'dskperf.h' 'proto.h' 'extern.h'
a174 19
#
# This is a very important step. The following small amount of code MUST
# NOT be removed from the program. The following directive will do
# dependency checking every time this component is built UNLESS the
# following is performed:
#                    A specific tag is used -- ie. all
#
# This allows the developer as well as the B & I group to perform incremental
# build with a degree of accuracy that has not been used before.
# There are some instances where certain types of INCLUDE files must be
# created first. This type of format will allow the developer to require
# that file to be created first. In order to achive that, all that has to
# be done is to make the DEPEND.MAK tag have your required target. Below is
# an example:
#
#    depend.mak:   { your file(s) } dephold
#
# Please DON'T remove the following line
#
d176 4
a179 1
.INCLUDE: "$(H)\Version.mak"
d184 7
a190 1
all: dskperf.flt
d192 2
a193 1
debug: dskperfd.flt
d216 1
a216 1
o\Ioctl.obj o\Ioctl.dbj : ioctl.c dskpfpub.h
d227 1
a227 1
dskperf.flt: $(OBJS) $(LIBS) makefile
d237 2
a238 2
			LIBRARY DSKPERF		\n\
			DESCRIPTION "$(FILEVER) Disk Performance Filter" \n\
d256 1
a256 1
dskperfd.flt: $(DBJS) $(LIBS) makefile
d266 2
a267 2
			LIBRARY DSKPERF		\n\
			DESCRIPTION "$(FILEVER) Disk Performance Filter" \n\
@


1.2
log
@- enabled support for WatCom C
@
text
@d4 2
a5 2
# $Revision: 1.1 $
# $Date: 1997/10/28 02:10:24 $
d13 3
d26 1
a26 1
SUBVERSION = 60
d152 1
a152 1
o\%.obj : %.c 'dsksleep.h' 'proto.h' 'extern.h'
d218 1
a218 1
o\Init.obj o\Init.dbj : init.c modepages.h cmdphdr.h cmdparse.h cmdpdefs.h
d241 1
a241 1
			LIBRARY DSKSLEEP	\n\
d270 1
a270 1
			LIBRARY LOCKDRV		\n\
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $Source: e:/source/driver/sleep/RCS/makefile,v $
d4 3
a6 3
# $Revision: 1.4 $
# $Date: 1997/02/06 01:33:09 $
# $Locker$
d12 4
a15 1
# $Log$
d23 1
a23 1
SUBVERSION = 01
d30 1
a30 1
DDK = e:/ddk/base
d33 7
a39 7
INC    = $(DDK)/inc
H      = $(DDK)/h
LIB    = $(DDK)/lib
TOOLSPATH = $(DDK)/tools
DISKH  = $(DDK)/src/dev/dasd/diskh
DHLIB  = $(DDK)/src/dev/dasd/devhelp
ADDLIB = $(DDK)/src/dev/dasd/addcalls
d48 1
d51 5
a55 1
LINK = link /ba
d62 1
a63 1
CINC	= -I$(H) -I$(DISKH)
d66 20
a85 2
CFLAGS	= -Zp1 -G2ms -ASw -W3 -Ox -DVERSION=$(VERSION) -DSUBVERSION=$(SUBVERSION)
CDFLAGS	= -Zp1 -G2ms -ASw -W3 -DDEBUG -Oi -DVERSION=$(VERSION) -DSUBVERSION=$(SUBVERSION)
a88 2
LIBS	= $(DHLIB)/dhcalls.lib $(ADDLIB)/addcalls.lib

d99 3
a101 3
OBJ1 =  o/segments.obj o/data.obj o/str1.obj
OBJ2 =  o/ioctl.obj o/init1.obj o/printk.obj
OBJ3 =	o/cmdparse.obj
d105 1
a105 1
DBJ1 =	$(OBJ1:s/obj/dbj/) o/dprintf.dbj
d114 6
d128 17
a144 2
o/%.obj : %.asm
	$(AS) $(AFLAGS) $(AINC) -Fllist/$*.cod -Fo$@@ $*.asm
d146 2
a147 2
o/%.dbj : %.asm
	$(AS) $(ADFLAGS) $(AINC) -Fllist/$*.dod -Fo$@@ $*.asm
d149 3
a151 2
o/%.obj : %.c 'dskperf.h' 'proto.h' 'extern.h'
	$(CC) $(CFLAGS) $(CINC) -Fllist/$*.cod -Fo$@@ $*.c
d153 4
a156 2
o/%.dbj : %.c 'dskperf.h' 'proto.h' 'extern.h'
	$(CC) $(CDFLAGS) $(CINC) -Fllist/$*.dod -Fo$@@ $*.c
d187 1
a187 1
.INCLUDE: "$(H)/version.mak"
d198 8
a205 8
	if exist *.lnk		del *.lnk
	if exist o/*.obj	del o/*.obj
	if exist o/*.dbj	del o/*.dbj
	if exist list/*.cod	del list/*.cod
	if exist list/*.dod	del list/*.dod
	if exist *.sym		del *.sym
	if exist *.sys		del *.sys
	if exist *.tff		del *.tff
d212 1
a212 1
o/cmdparse.obj o/cmdparse.dbj : cmdparse.c cmdproto.h \
d215 1
a215 1
o/init.obj o/init.dbj : init.c modepages.h cmdphdr.h cmdparse.h cmdpdefs.h
d217 1
a217 1
o/ioctl.obj o/ioctl.dbj : ioctl.c dskpfpub.h
d230 4
a233 5
		$(OBJ1:s?/?\?) +		\n\
		anulrem.obj anfauldi.obj +	\n\
		anuldiv.obj +			\n\
		$(OBJ2:s?/?\?) +		\n\
		$(OBJ3:s?/?\?)			\n\
d236 1
a236 1
		$(LIBS:s?/?\\?)			\n\
d244 2
d252 1
d259 4
a262 5
		$(DBJ1:s?/?\?) +		\n\
		anulrem.obj anfauldi.obj +	\n\
		anuldiv.obj +			\n\
		$(DBJ2:s?/?\?) +		\n\
		$(DBJ3:s?/?\?)			\n\
d265 1
a265 1
		$(LIBS:s?/?\\?)			\n\
d273 2
d281 1
@
