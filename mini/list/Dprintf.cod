Microsoft (R) Macro Assembler Version 6.00B 		    06/26/01 01:49:38
..\Dprintf.asm						     Page 1 - 1


				;	SCCSID = @(#)dprintf.asm	6.3 92/05/05
				;	$Source: R:/source/driver/raid/RCS/Dprintf.asm,v $

				;/***********************************************************************/
				;/*									*/
				;/* Driver Name: IBM2SCSI.ADD - Adapter Driver for ABIOS SCB Devices	*/
				;/*		 ---------------------------------------------------	*/
				;/*									*/
				;/* Source File Name: DPRINTF.ASM					*/
				;/*									*/
				;/* Descriptive Name: Format/Send debug information to COMx:		*/
				;/*									*/
				;/* Function:								*/
				;/*									*/
				;/*									*/
				;/*---------------------------------------------------------------------*/
				;/*									*/
				;/* Copyright (C) 1992 IBM Corporation					*/
				;/*									*/
				;/* DISCLAIMER OF WARRANTIES.  The following [enclosed] code is 	*/
				;/* provided to you solely for the purpose of assisting you in		*/
				;/* the development of your applications. The code is provided		*/
				;/* "AS IS", without warranty of any kind. IBM shall not be liable      */
				;/* for any damages arising out of your use of this code, even if	*/
				;/* they have been advised of the possibility of such damages.		*/
				;/*									*/
				;/*---------------------------------------------------------------------*/
				;/*									*/
				;/* Change Log								*/
				;/*									*/
				;/* Mark    Date      Programmer  Comment				*/
				;/* ----    ----      ----------  -------				*/
				;/* @nnnn   mm/dd/yy  NNN						*/
				;/*									*/
				;/* $Log: Dprintf.asm,v $
				;/* Revision 1.2  1998/05/29 01:36:55  vitus
				;/* - save/restore flags
				;/*
				;/* Revision 1.1  1998/02/17 23:12:04  vitus
				;/* Initial revision
				;/***********************************************************************/


				;****************************************************************************
				;*
				;* dprintf - this routine displays information on the debug terminal. it
				;*	     provides limited formatting, which is a subset of c's printf
				;*	     function
				;*
				;*	calling sequence:	push selector for insert 'n'
				;*				push offset for insert 'n'
				;*				push selector for 'n-1'
				;*				push offset for 'n-1'
				;*				   ...
				;*				push selector for second insert
				;*				push offset for second insert
				;*				push selector for first insert
				;*				push offset for first insert
				;*				push selector raw string
				;*				push offset for raw string
				;*				call dprintf
				;*				add sp,4 + ('n' * 4)
				;*
				;*			for "%w", just push one word containing the data to
				;*				  be displayed. make sure that the "add sp"
				;*				  cleans the stack correctly.
				;*
				;*			for "%z", just the repeat count, then the selector
				;*				  of the area to display, and then the offset.
				;*				  make sure that the "add sp" cleans the stack
				;*				  correctly.
				;*
				;*	formatting:	prior to being displayed, the raw string is formatted
				;*			by scanning it for format control sequences. as each
				;*			format control sequence is encountered, it is replaced
				;*			by appropriately formatted text obtained from the
				;*			corresponding pointer
				;*
				;*			the following format control sequences are supported:
				;*
				;*			%c -  the corresponding far ptr points to a byte
				;*			      which replaces the "%c"
				;*
				;*			%u -  the corresponding far ptr points to a word
				;*			      which is displayed as an unsigned decimal
				;*			      integer, replacing the "%u"
				;*
				;*			%x -  the corresponding far ptr points to a word
				;*			      which is displayed as upper case hex,
				;*			      replacing the "%X"
				;*
				;*			%lx - the corresponding far ptr points to a double
				;*			      word which is displayed as upper case hex,
				;*			      replacing the "%X"
				;*
				;*			%s -  the corresponding far ptr points to a null
				;*			      terminated string which is displayed unchanged,
				;*			      replacing the "%s"
				;*
				;*			%p -  the corresponding far ptr is displayed as upper
				;*			      case hex in the format "ssss:oooo"
				;*
				;*			%w -  the corresponding word is displayed as upper
				;*			      case hex replacing the "%w". note that in this
				;*			      case, only one word is pushed onto the stack
				;*			      for the %w insert
				;*
				;*			%z -  using the corresponding repeat count and far
				;*			      pointer, a memory dump is produced. note that
				;*			      in this case the stack contains a repeat count
				;*			      and a far pointer to the area to dump
				;*
				;*			%% -  the character "%" is displayed, replacing the
				;*			      "%%"
				;*
				;*

				.286p


 = 03F8				COM1_PORT	EQU	03f8h
 = 02F8				COM2_PORT	EQU	02f8h


 = 02F8				DEFAULT_PORT	EQU	COM2_PORT

 = 000D				CAR_RET 	EQU	0DH
 = 000A				LINE_FEED	EQU	0AH
 = 0007				BELL		EQU	07H
 = 0005				COM_LSR 	EQU	05H
 = 0000				COM_DAT 	EQU	00H



 000E				s_frame 	struc

 0000  0000			s_bp		dw	?		; callers bp.
 0002  0000			s_ptr_delta	dw	?		; delta (in bytes) to current pointer
									; from first pointer.
 0004  0000			s_ret		dw	?		; callers ip.
 0006  00000000			s_string	dd	?		; far pointer to raw string.
 000A  00000000			s_ptrs		dd	?		; pointer to first variable.

				s_frame 	ends

				;word_10000	 dw	 10000
				;word_1000	 dw	 1000
				;word_100	 dw	 100
				;word_10	 dw	 10


 0000				_TEXT	segment word public 'CODE'
					assume	cs:_TEXT


 0000				_dprintf	proc	near
						public	_dprintf

 0000  6A 00					push	0		; zero the delta to current pointer.

 0002  55					push	bp		; save our callers bp register.
 0003  8B EC					mov	bp,sp		; point to our stack frame.

 0005  1E					push	ds		; save our callers ds register.
 0006  06					push	es		; save our callers es register.
 0007  60					pusha			; save all other caller registers.
 0008  9C					pushf
 0009  FA					cli

						lds	si,ss:[bp+s_string] ; point to the raw string.
..\Dprintf.asm(170): error A2006: undefined symbol : s_string

 0014  AC			dprintf_loop:	lodsb			; pick up a byte of the string.

 0015  0A C0					or	al,al		; is it the end of the string?
 0017  75 09					jnz	dprintf_more	; no, go check for format control.

 0019  9D					popf
 001A  61					popa			; restore all other caller registers.
 001B  07					pop	es		; restore our callers es register.
 001C  1F					pop	ds		; restore our callers ds register.
 001D  5D					pop	bp		; restore our callers bp register.
 001E  83 C4 02					add	sp,2		; unstack s_ptr_delta.

 0021  C3					ret			; return to our caller.

 0022  3C 25			dprintf_more:	cmp	al,'%'          ; no, is it the start of a format
									; control sequence?
 0024  74 03					je	dprintf_type	; yes, go see what type of sequence.
 0026  E9 02C3					jmp	dprintf_put_ch	; no, go display character and return.

 0029  AC			dprintf_type:	lodsb			; pick up a byte of the string.
 002A  3C 25					cmp	al,'%'          ; is caller trying to display "%"?

 002C  75 05					jne	dprintf_try_c	; no, go see if it is a "c".

 002E  B0 25					mov	al,'%'          ; yes, go display it
 0030  E9 02B9					jmp	dprintf_put_ch	; and exit.

 0033  3C 63			dprintf_try_c:	cmp	al,'c'          ; is it a string display?
 0035  75 31					jne	dprintf_try_s	; no, go see if it is a "s".

						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(202): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding
..\Dprintf.asm(203): error A2006: undefined symbol : s_ptr_delta
 0037  36: C4 1F				les	bx,ss:[bx]	       ; pointer.
						add	ss:[bp+s_ptr_delta],4  ; move down to next pointer.
..\Dprintf.asm(205): error A2006: undefined symbol : s_ptr_delta

 003A  26: 8A 07				mov	al,es:[bx]	; pick up a byte.
 003D  E9 02AC					jmp	dprintf_put_ch	; go display character and return.

 0068  3C 73			dprintf_try_s:	cmp	al,'s'          ; is it a string display?
 006A  75 3B					jne	dprintf_try_u	; no, go see if it is a "u".

						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(213): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding
..\Dprintf.asm(214): error A2006: undefined symbol : s_ptr_delta
 006C  36: C4 1F				les	bx,ss:[bx]	       ; pointer.
						add	ss:[bp+s_ptr_delta],4  ; move down to next pointer.
..\Dprintf.asm(216): error A2006: undefined symbol : s_ptr_delta

 0097  26: 8A 07		dprintf_next_s: mov	al,es:[bx]	; pick up a byte.

 009A  0A C0					or	al,al		; is it the end of the string?
 009C  75 03 E9 FF73				jz	dprintf_loop	; yes, go do next raw string byte.

 00A1  E8 029A					call	put_char	; no, display the character.

 00A4  43					inc	bx		; move down to the next character
 00A5  EB F0					jmp	dprintf_next_s	; and go round again.

 00A7  3C 75			dprintf_try_u:	cmp	al,'u'          ; is it an unsigned short display?
 00A9  75 6B					jne	dprintf_try_x	; no, go see if it is a "X".

						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(231): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding
..\Dprintf.asm(232): error A2006: undefined symbol : s_ptr_delta
 00AB  36: C4 1F				les	bx,ss:[bx]	       ; pointer.
						add	ss:[bp+s_ptr_delta],4  ; move down to next pointer.
..\Dprintf.asm(234): error A2006: undefined symbol : s_ptr_delta

 00AE  26: 8B 07				mov	ax,es:[bx]	; pick up the word to display.

 00B1  33 D2					xor	dx,dx		; convert the
 00B3  B9 2710					mov	cx, 10000
 00B6  F7 F1					div	cx		; ten thousands
				;		div	word_10000	; ten thousands
 00B8  0C 30					or	al,'0'          ; digit and
 00BA  E8 0281					call	put_char	; display it.

 00BD  8B C2					mov	ax,dx		; convert the
 00BF  33 D2					xor	dx,dx		; thousands
 00C1  B9 03E8					mov	cx, 1000
 00C4  F7 F1					div	cx		; digit
				;		div	word_1000	; digit
 00C6  0C 30					or	al,'0'          ; and
 00C8  E8 0273					call	put_char	; display it.

 00CB  8B C2					mov	ax,dx		; convert the
 00CD  33 D2					xor	dx,dx		; hundreds
 00CF  B9 0064					mov	cx, 100
 00D2  F7 F1					div	cx		; digit
				;		div	word_100	; digit
 00D4  0C 30					or	al,'0'          ; and
 00D6  E8 0265					call	put_char	; display it.

 00D9  8B C2					mov	ax,dx		; convert the
 00DB  33 D2					xor	dx,dx		; tens
 00DD  B9 000A					mov	cx, 10
 00E0  F7 F1					div	cx		; digit
				;		div	word_10 	; digit
 00E2  0C 30					or	al,'0'          ; and
 00E4  E8 0257					call	put_char	; display it.

 00E7  8A C2					mov	al,dl		; convert the units digit
 00E9  0C 30					or	al,'0'          ; and go display it
 00EB  E9 01FE					jmp	dprintf_put_ch	; and return.

 0116  3C 78			dprintf_try_x:	cmp	al,'x'          ; is it an unsigned short hex display?
 0118  75 31					jne	dprintf_try_lx	; no, go see if it is a "lX".

						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(276): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding
..\Dprintf.asm(277): error A2006: undefined symbol : s_ptr_delta
 011A  36: C4 1F				les	bx,ss:[bx]	       ; pointer.
						add	ss:[bp+s_ptr_delta],4  ; move down to next pointer.
..\Dprintf.asm(279): error A2006: undefined symbol : s_ptr_delta

 011D  E8 0200					call	put_hex_word	; convert and display the word.

 0120  E9 FEF1					jmp	dprintf_loop	; go do next raw string byte.

 014B  3C 6C			dprintf_try_lx: cmp	al,'l'          ; is it an unsigned long hex display?
 014D  75 42					jne	dprintf_try_p	; no, go see if it is a "p".
 014F  AC					lodsb			; maybe, pick up a byte of the string.
 0150  3C 78					cmp	al,'x'          ; is the second byte correct?
 0152  74 03					je	dprintf_do_lx	; no, go report
 0154  E9 017D					jmp	dprintf_error	; the error.

 0157				dprintf_do_lx:	lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(292): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding
..\Dprintf.asm(293): error A2006: undefined symbol : s_ptr_delta
 0157  36: C4 1F				les	bx,ss:[bx]	       ; pointer.
						add	ss:[bp+s_ptr_delta],4  ; move down to next pointer.
..\Dprintf.asm(295): error A2006: undefined symbol : s_ptr_delta

 015A  83 C3 02					add	bx,2		; move down to the second word.
 015D  E8 01C0					call	put_hex_word	; convert and display the second word.
 0160  83 EB 02					sub	bx,2		; move back to the first word.
 0163  E8 01BA					call	put_hex_word	; convert and display the first word.

 0166  E9 FEAB					jmp	dprintf_loop	; go do next raw string byte.

 0191  3C 70			dprintf_try_p:	cmp	al,'p'          ; is it a far pointer display?
 0193  75 40					jne	dprintf_try_w	; no, go see if it is a "w".

						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(307): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding pointer.
..\Dprintf.asm(308): error A2006: undefined symbol : s_ptr_delta
						add	ss:[bp+s_ptr_delta],4  ; move down to next pointer.
..\Dprintf.asm(309): error A2006: undefined symbol : s_ptr_delta

 0195  06					push	es		; save the callers data selector.

 0196  16					push	ss		; set up the proper
 0197  07					pop	es		; selector.

 0198  83 C3 02					add	bx,2		; move down to the second word.
 019B  E8 0182					call	put_hex_word	; convert and display the selector.
 019E  B0 3A					mov	al,':'          ; display
 01A0  E8 019B					call	put_char	; the ":".
 01A3  83 EB 02					sub	bx,2		; move back to the first word.
 01A6  E8 0177					call	put_hex_word	; convert and display the offset.

				;;;		mov	al,' '		; display
				;;;		call	put_char	; a couple
				;;;		mov	al,' '		; of
				;;;		call	put_char	; spaces.

 01A9  07					pop	es		; recover the callers data selector.

 01AA  E9 FE67					jmp	dprintf_loop	; go do next raw string byte.

 01D5  3C 77			dprintf_try_w:	cmp	al,'w'          ; is it an immediate word display?
 01D7  75 32					jne	dprintf_try_z	; no, go see if it is a "z".

						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(335): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding pointer.
..\Dprintf.asm(336): error A2006: undefined symbol : s_ptr_delta
						add	ss:[bp+s_ptr_delta],2  ; move down to next pointer.
..\Dprintf.asm(337): error A2006: undefined symbol : s_ptr_delta

 01D9  06					push	es		; save the callers data selector.

 01DA  16					push	ss		; set up the proper
 01DB  07					pop	es		; selector.

 01DC  E8 0141					call	put_hex_word	; convert and display the word.

 01DF  07					pop	es		; recover the callers data selector.

 01E0  E9 FE31					jmp	dprintf_loop	; go do next raw string byte.

 020B  3C 7A			dprintf_try_z:	cmp	al,'z'          ; is it a memory dump display?
 020D  74 03					je	dprintf_do_z	; no, go report
 020F  E9 00C2					jmp	dprintf_error	; the error.

 0212				dprintf_do_z:
						lea	bx,[bp]+s_ptrs	       ; yes, pick up the
..\Dprintf.asm(355): error A2006: undefined symbol : s_ptrs
						add	bx,ss:[bp+s_ptr_delta] ; corresponding pointer.
..\Dprintf.asm(356): error A2006: undefined symbol : s_ptr_delta
						add	ss:[bp+s_ptr_delta],6  ; move down to next pointer.
..\Dprintf.asm(357): error A2006: undefined symbol : s_ptr_delta

 0212  36: 8B 4F 04				mov	cx,ss:[bx+4]	; pick up the repeat count.

 0216  06					push	es		; save the callers data selector.

 0217  36: C4 1F				les	bx,ss:[bx]	; point to the area to display.

 0242  8C C0			dprintf_z_a:	mov	ax,es		; pick up the selector to display.
 0244  86 E0					xchg	ah,al		; set up to process the first byte.
 0246  E8 00A9					call	put_left_nib	; display the first byte
 0249  E8 00B7					call	put_right_nib	; of the selector.
 024C  86 E0					xchg	ah,al		; set up to process the second byte.
 024E  E8 00A1					call	put_left_nib	; display the second byte
 0251  E8 00AF					call	put_right_nib	; of the selector.

 0254  B0 3A					mov	al,':'          ; display a
 0256  E8 00E5					call	put_char	; colon.

 0259  8B C3					mov	ax,bx		; pick up the offset to display.
 025B  86 E0					xchg	ah,al		; set up to process the first byte.
 025D  E8 0092					call	put_left_nib	; display the first byte
 0260  E8 00A0					call	put_right_nib	; of the offset.
 0263  86 E0					xchg	ah,al		; set up to process the second byte.
 0265  E8 008A					call	put_left_nib	; display the second byte
 0268  E8 0098					call	put_right_nib	; of the offset.

 026B  B0 20					mov	al,' '          ; display
 026D  E8 00CE					call	put_char	; two
 0270  B0 20					mov	al,' '          ; seperating
 0272  E8 00C9					call	put_char	; spaces.

 0275  51					push	cx		; save the repeat count for later.

 0276  BA 0031					mov	dx,16*3+1	; initialize the fill count.

 0279  83 F9 10					cmp	cx,16		; are there more than 16 bytes left?
 027C  76 03					jbe	dprintf_z_b	; yes, limit it to 16 bytes
 027E  B9 0010					mov	cx,16		; for this line.

 0281  53			dprintf_z_b:	push	bx		; save offset and display count
 0282  51					push	cx		; for the character display.

 0283  26: 8A 07		dprintf_z_c:	mov	al,es:[bx]	; pick up a byte to display.
 0286  E8 008A					call	put_hex_byte	; display it in hex.

 0289  B0 20					mov	al,' '          ; set up to display a space.
 028B  83 FA 1C					cmp	dx,9*3+1	; should it be a dash?
 028E  75 02					jne	dprintf_z_e	; no, bypass changing it.
 0290  B0 2D					mov	al,'-'          ; yes, set up to display a dash.
 0292  E8 00A9			dprintf_z_e:	call	put_char	; display the dash or space.

 0295  83 EA 03					sub	dx,3		; down the fill count by one position.

 0298  43					inc	bx		; move down to the next byte.

 0299  E2 E8					loop	dprintf_z_c	; more to do? yes, go round again?

 029B  8B CA					mov	cx,dx		; no, pick up remaining fill count.

 029D  B0 20			dprintf_z_g:	mov	al,' '          ; display a
 029F  E8 009C					call	put_char	; space.

 02A2  E2 F9					loop	dprintf_z_g	; more to do? yes, go round again.

 02A4  59					pop	cx		; recover the offset and
 02A5  5B					pop	bx		; display count.

 02A6  B0 2E			dprintf_z_i:	mov	al,'.'          ; set up to display a dot.

 02A8  26: 8A 27				mov	ah,es:[bx]	; does the byte
 02AB  80 FC 20					cmp	ah,20h		; contain a
 02AE  72 07					jb	dprintf_z_k	; valid ascii
 02B0  80 FC 7F					cmp	ah,7fh		; code?
 02B3  77 02					ja	dprintf_z_k	; no, go display the dot.

 02B5  86 C4					xchg	al,ah		; yes, set up to do byte's contents.

 02B7  E8 0084			dprintf_z_k:	call	put_char	; display a dot or the byte contents.

 02BA  43					inc	bx		; move down to the next byte.

 02BB  E2 E9					loop	dprintf_z_i	; more to do on this line?
									; yes, go round again.

 02BD  59					pop	cx		; no, recover the repeat count.

 02BE  83 E9 10					sub	cx,16		; down the repeat count by one line.

 02C1  7E 0D					jle	dprintf_z_z	; more to do? no, go exit.

 02C3  B0 0D					mov	al,CAR_RET	; perform
 02C5  E8 0076					call	put_char	; a
 02C8  B0 0A					mov	al,LINE_FEED	; new line
 02CA  E8 0071					call	put_char	; operation.

 02CD  E9 FF72					jmp	dprintf_z_a	; go round and display another line.

 02D0  07			dprintf_z_z:	pop	es		; recover the callers data selector.

 02D1  E9 FD40					jmp	dprintf_loop	; go do next raw string byte.

 02D4  8A E0			dprintf_error:	mov	ah,al		; display
 02D6  B0 3F					mov	al,'?'          ; an
 02D8  E8 0063					call	put_char	; eye
 02DB  B0 5C					mov	al,'\'          ; catching
 02DD  E8 005E					call	put_char	; "invalid
 02E0  8A C4					mov	al,ah		; format
 02E2  E8 0059					call	put_char	; control"
 02E5  B0 5C					mov	al,'\'          ; message
 02E7  E8 0054					call	put_char	; and
 02EA  B0 07					mov	al,BELL 	; beep.

 02EC  E8 004F			dprintf_put_ch: call	put_char	; display the character.
 02EF  E9 FD22					jmp	dprintf_loop	; go process next raw string byte.

 02F2				_dprintf	endp

 02F2				put_left_nib	proc	near

 02F2  50					push	ax		; save the callers ax register.

 02F3  C0 E8 04					shr	al,4		; convert the
 02F6  04 30					add	al,'0'          ; left nibble
 02F8  3C 39					cmp	al,'9'          ; to an ascii
 02FA  76 02					jbe	put_left_nib_a	; hex
 02FC  04 07					add	al,'A'-'9'-1    ; representation.
 02FE  E8 003D			put_left_nib_a: call	put_char	; display the character.

 0301  58					pop	ax		; restore the callers ax register.

 0302  C3					ret			; return to our caller.

 0303				put_left_nib	endp

 0303				put_right_nib	proc	near

 0303  50					push	ax		; save the callers ax register.

 0304  24 0F					and	al,0fh		; convert the
 0306  04 30					add	al,'0'          ; right nibble
 0308  3C 39					cmp	al,'9'          ; to an
 030A  76 02					jbe	put_rght_nib_a	; ascii hex
 030C  04 07					add	al,'A'-'9'-1    ; representation.
 030E  E8 002D			put_rght_nib_a: call	put_char	; display the character.

 0311  58					pop	ax		; restore the callers ax register.

 0312  C3					ret			; return to our caller

 0313				put_right_nib	endp

 0313				put_hex_byte	proc	near

 0313  26: 8A 07				mov	al,es:[bx]	; display the left nibble
 0316  E8 FFD9					call	put_left_nib	; in ascii hex.

 0319  26: 8A 07				mov	al,es:[bx]	; display the right nibble
 031C  E8 FFE4					call	put_right_nib	; in ascii hex.

 031F  C3					ret			; return to our caller.

 0320				put_hex_byte	endp


 0320				put_hex_word	proc	near

 0320  43					inc	bx		; set up to process second byte first.

 0321  E8 FFEF					call	put_hex_byte	; display the byte in hex.

 0324  4B					dec	bx		; move back to the first byte.

 0325  E8 FFEB					call	put_hex_byte	; display the byte in hex.

 0328  C3					ret			; return to our caller.

 0329				put_hex_word	endp


				;		 public  portadr
				;portadr	 dw	 DEFAULT_PORT	 ; change config.h to change this.
									; use: com2=02f8H, com1=03f8H

				IODelay Macro
				    local a
				    jmp a
				a:
				endm

 0329				PollC	PROC	NEAR

				;	mov	dx, cs:PortAdr
 0329  BA 02F8				mov	dx, DEFAULT_PORT
 032C  83 C2 05				add	dx, COM_LSR

 032F  EC				in	al,dx			; get input status
				;	IODelay

 0330  24 01				and	al,1			; is there a char in RECV buffer?
 0332  74 09				jz	plc1			; no, go return empty

				;	mov	dx, cs:PortAdr
 0334  BA 02F8				mov	dx, DEFAULT_PORT
 0337  83 C2 00				add	dx, COM_DAT

 033A  EC				in	al,dx			; suck char out of buffer
				;	IODelay

 033B  24 7F				and	al,07fh 		; strip off stupid parity crap
 033D  C3			plc1:	ret
 033E				PollC	ENDP


				;**	PUTC - output a single char to COM2 handling ^S


 033E				put_char	proc	near

 033E  52				push	dx
 033F  50				push	ax

				;	See if ^S

 0340  E8 FFE6				call	PollC		    ; is there a char at input
 0343  74 0D				jz	pc2		    ; no, go output our char
 0345  3C 13				cmp	al,'S' - 'A' + 1    ; is it ^S?
 0347  75 09				jnz	pc2		    ; no, go output our char

				;	Saw ^S.  Wait for and eat next char.

 0349  E8 FFDD			pc1:	call	PollC		    ; look for next char
 034C  74 FB				jz	pc1		    ; no char, go look again
 034E  3C 13				cmp	al,'S' - 'A' + 1    ; is it ^S again?
 0350  74 F7				jz	pc1		    ; yes, go look for something else

				;pc2:	 mov	 dx, cs:PortAdr
 0352  BA 02F8			pc2:	mov	dx, DEFAULT_PORT
 0355  83 C2 05				add	dx, COM_LSR
 0358  EC				in	al,dx
				;	IODelay
 0359  A8 20				test	al,020h
 035B  74 F5				jz	pc2

				;	ready.	crank it out!

				;	mov	dx, cs:PortAdr
 035D  BA 02F8				mov	dx, DEFAULT_PORT
 0360  83 C2 00				add	dx, COM_DAT
 0363  58				pop	ax
 0364  EE				out	dx,al

 0365  5A					pop	dx		; restore the callers dx register.

 0366  C3				ret

 0367				put_char	endp

 0367				_TEXT	ends
					end
Microsoft (R) Macro Assembler Version 6.00B 		    06/26/01 01:49:38
..\Dprintf.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IODelay  . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

s_frame  . . . . . . . . . . . .	 000E
  s_bp . . . . . . . . . . . . .	 0000	     Word
  s_ptr_delta  . . . . . . . . .	 0002	     Word
  s_ret  . . . . . . . . . . . .	 0004	     Word
  s_string . . . . . . . . . . .	 0006	     DWord
  s_ptrs . . . . . . . . . . . .	 000A	     DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

_TEXT  . . . . . . . . . . . . .	16 Bit	 0367	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

PollC  . . . . . . . . . . . . .	P Near	 0329	  _TEXT	Length= 0015 Public
  plc1 . . . . . . . . . . . . .	L Near	 033D	  _TEXT	
_dprintf . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 02F2 Public
  dprintf_loop . . . . . . . . .	L Near	 0014	  _TEXT	
  dprintf_more . . . . . . . . .	L Near	 0022	  _TEXT	
  dprintf_type . . . . . . . . .	L Near	 0029	  _TEXT	
  dprintf_try_c  . . . . . . . .	L Near	 0033	  _TEXT	
  dprintf_try_s  . . . . . . . .	L Near	 0068	  _TEXT	
  dprintf_next_s . . . . . . . .	L Near	 0097	  _TEXT	
  dprintf_try_u  . . . . . . . .	L Near	 00A7	  _TEXT	
  dprintf_try_x  . . . . . . . .	L Near	 0116	  _TEXT	
  dprintf_try_lx . . . . . . . .	L Near	 014B	  _TEXT	
  dprintf_do_lx  . . . . . . . .	L Near	 0157	  _TEXT	
  dprintf_try_p  . . . . . . . .	L Near	 0191	  _TEXT	
  dprintf_try_w  . . . . . . . .	L Near	 01D5	  _TEXT	
  dprintf_try_z  . . . . . . . .	L Near	 020B	  _TEXT	
  dprintf_do_z . . . . . . . . .	L Near	 0212	  _TEXT	
  dprintf_z_a  . . . . . . . . .	L Near	 0242	  _TEXT	
  dprintf_z_b  . . . . . . . . .	L Near	 0281	  _TEXT	
  dprintf_z_c  . . . . . . . . .	L Near	 0283	  _TEXT	
  dprintf_z_e  . . . . . . . . .	L Near	 0292	  _TEXT	
  dprintf_z_g  . . . . . . . . .	L Near	 029D	  _TEXT	
  dprintf_z_i  . . . . . . . . .	L Near	 02A6	  _TEXT	
  dprintf_z_k  . . . . . . . . .	L Near	 02B7	  _TEXT	
  dprintf_z_z  . . . . . . . . .	L Near	 02D0	  _TEXT	
  dprintf_error  . . . . . . . .	L Near	 02D4	  _TEXT	
  dprintf_put_ch . . . . . . . .	L Near	 02EC	  _TEXT	
put_char . . . . . . . . . . . .	P Near	 033E	  _TEXT	Length= 0029 Public
  pc1  . . . . . . . . . . . . .	L Near	 0349	  _TEXT	
  pc2  . . . . . . . . . . . . .	L Near	 0352	  _TEXT	
put_hex_byte . . . . . . . . . .	P Near	 0313	  _TEXT	Length= 000D Public
put_hex_word . . . . . . . . . .	P Near	 0320	  _TEXT	Length= 0009 Public
put_left_nib . . . . . . . . . .	P Near	 02F2	  _TEXT	Length= 0011 Public
  put_left_nib_a . . . . . . . .	L Near	 02FE	  _TEXT	
put_right_nib  . . . . . . . . .	P Near	 0303	  _TEXT	Length= 0010 Public
  put_rght_nib_a . . . . . . . .	L Near	 030E	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

BELL . . . . . . . . . . . . . .	Number	 0007h	 
CAR_RET  . . . . . . . . . . . .	Number	 000Dh	 
COM1_PORT  . . . . . . . . . . .	Number	 03F8h	 
COM2_PORT  . . . . . . . . . . .	Number	 02F8h	 
COM_DAT  . . . . . . . . . . . .	Number	 0000h	 
COM_LSR  . . . . . . . . . . . .	Number	 0005h	 
DEFAULT_PORT . . . . . . . . . .	Number	 02F8h	 
LINE_FEED  . . . . . . . . . . .	Number	 000Ah	 

	   0 Warnings
	   25 Errors
